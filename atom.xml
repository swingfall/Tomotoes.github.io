<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ToMoToes</title>
  <icon>https://www.gravatar.com/avatar/2c7238d7430719ddfcdfc929397955cf</icon>
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://tomotoes.com/blog/"/>
  <updated>2018-01-30T15:20:19.437Z</updated>
  <id>http://tomotoes.com/blog/</id>
  
  <author>
    <name>Simon Ma</name>
    <email>1755811882@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git修炼手册</title>
    <link href="http://tomotoes.com/blog//posts/264f2bd1/"/>
    <id>http://tomotoes.com/blog//posts/264f2bd1/</id>
    <published>2018-01-27T01:58:00.000Z</published>
    <updated>2018-01-30T15:20:19.437Z</updated>
    
    <content type="html"><![CDATA[<p>Git 命令大汇总。<br><a id="more"></a>sad<br>sadsadsad</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><del>aasd</del><br>阿三大苏打<br>阿什顿</p><hr><p>阿斯顿撒旦撒旦阿斯顿撒旦</p><p>这是一个脚注的例子<a href="这里是脚注">^1</a><br>撒旦撒旦阿斯顿撒旦</p><p>阿三大苏打<br>阿斯顿撒大苏打</p><table><thead><tr><th style="text-align:left">一列</th><th style="text-align:center">二二</th></tr></thead><tbody><tr><td style="text-align:left">x</td><td style="text-align:center">y</td></tr></tbody></table><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="入门配置"><a href="#入门配置" class="headerlink" title="入门配置"></a>入门配置</h3><ul><li style="list-style: none"><input type="checkbox"> task</li><li style="list-style: none"><input type="checkbox" checked> listas<h4 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h4></li></ul><ol><li><p>git config –global user.name Simon</p><blockquote><p>设置自己的用户名</p></blockquote></li><li><p>git config –global user.email jinmaup@gmail.com</p><blockquote><p>设置自己的邮箱</p></blockquote></li></ol><h4 id="查看配置"><a href="#查看配置" class="headerlink" title="查看配置"></a>查看配置</h4><p>git config –list</p><blockquote><p>查看自己git的配置信息</p></blockquote><h4 id="设置编辑器"><a href="#设置编辑器" class="headerlink" title="设置编辑器"></a>设置编辑器</h4><p>git config –global core.editor vim</p><blockquote><p>当你用git编辑文件时，编辑文件的文本编辑器会默认调用vim</p></blockquote><h4 id="文本着色"><a href="#文本着色" class="headerlink" title="文本着色"></a>文本着色</h4><p>git config –global color.ui true</p><blockquote><p>可为大部分git的代码布上颜色</p></blockquote><hr><h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><h4 id="建立版本库"><a href="#建立版本库" class="headerlink" title="建立版本库"></a>建立版本库</h4><ol><li><p>git init</p><blockquote><p>当前路径文件 初始化为Git仓库（可以发现 当前路径增加了.git文件夹）</p></blockquote></li><li><p>git init 文件夹名</p><blockquote><p>新建一个文件夹，并将其初始化为Git代码库</p></blockquote></li></ol><h4 id="文件添加到暂存区"><a href="#文件添加到暂存区" class="headerlink" title="文件添加到暂存区"></a>文件添加到暂存区</h4><ol><li><p>git add .</p><blockquote><p>把当前目录所有未追踪文件，已修改的文件，添加到暂存区 (不包括被删除的文件)</p></blockquote></li><li><p>git add 文件（夹）名</p><blockquote><p>把特定文件（夹）添加到暂存区</p></blockquote></li><li><p>git add -A</p><blockquote><p>提交所有的文件操作到暂存区</p></blockquote></li><li><p>git add -u</p><blockquote><p>提交已修改的文件,被删除的文件（不包括新文件）</p></blockquote></li><li><p>git add -p</p><blockquote><p>交互式的缓存提交，会提供多个选项来自定义提交内容、方式</p></blockquote></li></ol><h4 id="文件添加到本地仓库"><a href="#文件添加到本地仓库" class="headerlink" title="文件添加到本地仓库"></a>文件添加到本地仓库</h4><ol><li><p>git commit -m”commit message”</p><blockquote><p>把暂存区的所有文件添加到本地仓库，-m”提交信息” （越详细越好）</p></blockquote></li><li><p>git commit 文件（夹）名 -m”commit message”</p><blockquote><p>把特定文件（夹）添加到本地仓库，-m”提交信息” （越详细越好）</p></blockquote></li><li><p>git commit -am”commit message”</p><blockquote><p>针对已经被追踪的文件，可以直接添加到本地仓库，不用先add在commit.</p></blockquote></li><li><p>git commit –amend -m”commit message”</p><blockquote><p>利用本次commit 重写上一次commit</p></blockquote></li><li><p>git commit –amend –no-edit</p><blockquote><p>利用本次commit 重写上一次commit 不会重写上次commit的提交信息</p></blockquote></li></ol><h4 id="仓库状态获取"><a href="#仓库状态获取" class="headerlink" title="仓库状态获取"></a>仓库状态获取</h4><p>git status</p><blockquote><p>可以立即获取本地仓库状态 以及 git的步骤提示，建议多使用此命令</p></blockquote><h4 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h4><ol><li><p>git reset –hard HEAD</p><blockquote><p>将工作区，暂存区，本地仓库恢复到上一个版本（–hard）</p></blockquote></li><li><p>git reset –soft HEAD^^^</p><blockquote><p>将本地仓库恢复到上三个版本,不会修改暂存区，工作区（–soft）</p></blockquote></li><li><p>git reset –mixd HEAD~5</p><blockquote><p>将暂存区，本地仓库恢复到上五个版本，不会修改工作区（–mixd，默认）</p></blockquote></li><li><p>git reset –hard commitID</p><blockquote><p>将工作区，暂存区，本地仓库恢复到上指定版本<br>其中commitID就是每一次commit的版本号，可以使用git reflog获取</p></blockquote></li></ol><h4 id="撤销暂存"><a href="#撤销暂存" class="headerlink" title="撤销暂存"></a>撤销暂存</h4><ol><li><p>git reset HEAD file.txt</p><blockquote><p>撤销file.txt的add操作，使其变成不跟踪状态</p></blockquote></li><li><p>git reset HEAD^ file.txt</p><blockquote><p>将上一次提交版本的file.txt重新置入缓存区</p></blockquote></li></ol><h4 id="撤销工作区"><a href="#撤销工作区" class="headerlink" title="撤销工作区"></a>撤销工作区</h4><ol><li><p>git checkout – file.txt</p><blockquote><p>（只针对未追踪文件）用历史中的file.txt替换现有工作区的file.txt<br> 如果文件增加到暂存区后 又进行了修改，那么执行命令后 将回到暂存区文件状态</p></blockquote></li><li><p>git checkout HEAD – file.txt</p><blockquote><p>用最后一次提交版本中的file.txt 替换现有工作区的file.txt</p></blockquote></li><li><p>git checkout commitID – file.txt</p><blockquote><p>用特定版本的file.txt 替换现有工作区的file.txt</p></blockquote></li></ol><h4 id="撤销提交"><a href="#撤销提交" class="headerlink" title="撤销提交"></a>撤销提交</h4><p>git revert commitID</p><blockquote><p>撤销指定版本的commit，并将此操作生成一个全新的commit并提交</p></blockquote><hr><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><h4 id="增"><a href="#增" class="headerlink" title="增"></a>增</h4><ol><li><p>touch</p><blockquote><p>touch 文件名 ： 新建文件</p></blockquote></li><li><p>mkdir</p><blockquote><p>mkdir 文件夹名： 新建文件夹</p></blockquote></li><li><p>vim</p><blockquote><p>vim  文件名 ： 新建文件，并用vim模式打开该文件进行编写</p></blockquote></li><li><p>git init</p><blockquote><p>git init 文件夹名：新建一个文件夹，并将其初始化为Git代码库</p></blockquote></li><li><p>printf </p><blockquote><p>printf ‘content’ &gt; 文件名 ：新建一个文件，并把content注入其内容</p></blockquote></li><li><p>echo </p><blockquote><p>echo ‘content’ &gt; 文件名 ：新建一个文件，并把content注入其内容</p></blockquote></li></ol><h4 id="删"><a href="#删" class="headerlink" title="删"></a>删</h4><ol><li><p>rm</p><blockquote><p>rm 文件名 : 删除文件</p></blockquote></li><li><p>clean</p><blockquote><p>git clean -f 文件名 ：删除未跟踪文件</p></blockquote></li></ol><h4 id="改"><a href="#改" class="headerlink" title="改"></a>改</h4><ol><li><p>vim</p><blockquote><p>vim 文件名 ： 打开文件，并用vim模式进行修改</p></blockquote></li><li><p>mv</p><blockquote><p>mv 选定文件名 新的文件名：把选定文件名 修改为 新的文件名</p></blockquote></li><li><p>printf</p><blockquote><p>printf ‘content’ &gt; 文件名 ： 将 content 替换 文件原有内容</p></blockquote></li><li><p>echo</p><blockquote><p>echo ‘content’ &gt; 文件名 ： 将 content 替换 文件原有内容</p></blockquote></li></ol><h4 id="查"><a href="#查" class="headerlink" title="查"></a>查</h4><ol><li><p>pwd</p><blockquote><p>得到当前路径</p></blockquote></li><li><p>cd</p><blockquote><p>cd 路径 ：进到某一文件路径<br>cd .. : 回退文件路径<br>cd    : 回到默认的路径 </p></blockquote></li><li><p>cat</p><blockquote><p>cat 文件名：查看该文件的内容</p></blockquote></li><li><p>ls</p><blockquote><p>查看该目录下的文件列表（不包括隐藏文件）</p></blockquote></li><li><p>ls -a</p><blockquote><p>查看该目录下的文件列表（包括隐藏文件）</p></blockquote></li><li><p>show</p><blockquote><p>git show <branch-name>:<file-name> ：展示任意分支某一文件的内容</file-name></branch-name></p></blockquote></li></ol><hr><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><h4 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h4><ol><li><p>git branch</p><blockquote><p>列出本地分支   </p></blockquote></li><li><p>git branch -r  </p><blockquote><p>列出远端分支   </p></blockquote></li><li><p>git branch -a </p><blockquote><p>列出所有分支   </p></blockquote></li><li><p>git branch -v</p><blockquote><p>查看各个分支最后一个提交对象的信息   </p></blockquote></li><li><p>git branch –merge</p><blockquote><p>查看已经合并到当前分支的分支   </p></blockquote></li><li><p>git branch –no-merge</p><blockquote><p>查看为合并到当前分支的分支  </p></blockquote></li><li><p>git remote show origin </p><blockquote><p>可以查看remote地址，远程分支</p></blockquote></li></ol><h4 id="新建分支"><a href="#新建分支" class="headerlink" title="新建分支"></a>新建分支</h4><ol><li><p>git branch name</p><blockquote><p>新建一个名为name的分支</p></blockquote></li><li><p>git checkout -b name</p><blockquote><p>新建一个名为name的分支，并自动切换为该分支</p></blockquote></li><li><p>git branch [branch] [commit]</p><blockquote><p>新建一个分支，指向指定commit</p></blockquote></li><li><p>git branch –track [branch] [remote-branch]</p><blockquote><p>新建一个分支，与指定的远程分支建立追踪关系</p></blockquote></li></ol><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><ol><li><p>git branch -d name</p><blockquote><p>删除一个名为name的分支</p></blockquote></li><li><p>git branch -D name</p><blockquote><p>强制删除一个名为name的分支</p></blockquote></li><li><p>git push <originname> :<branch></branch></originname></p><blockquote><p>删除远程分支</p></blockquote></li><li><p>git push origin –delete <remote-branchname></remote-branchname></p><blockquote><p>删除远程分支</p></blockquote></li></ol><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><ol><li><p>git checkout name</p><blockquote><p>切换一个名为name的分支</p></blockquote></li><li><p>git checkout -</p><blockquote><p>切换上一个分支</p></blockquote></li></ol><h4 id="重命名分支"><a href="#重命名分支" class="headerlink" title="重命名分支"></a>重命名分支</h4><ol><li>git branch -m name<blockquote><p>将当前所在分支命名为 name</p></blockquote></li></ol><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><h4 id="新建标签"><a href="#新建标签" class="headerlink" title="新建标签"></a>新建标签</h4><ol><li><p>git tag [tag]</p><blockquote><p>新建一个tag在当前commit</p></blockquote></li><li><p>git tag [tag] [commit]</p><blockquote><p>新建一个tag在指定commit</p></blockquote></li><li><p>git tag v0.9 commitID</p><blockquote><p>对某次提交新建标签</p></blockquote></li></ol><h4 id="查看标签"><a href="#查看标签" class="headerlink" title="查看标签"></a>查看标签</h4><ol><li>git tag<blockquote><p>列出所有tag</p></blockquote></li></ol><h4 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h4><ol><li><p>git tag -d [tag]</p><blockquote><p>删除本地tag</p></blockquote></li><li><p>git push origin :refs/tags/<tagname></tagname></p><blockquote><p>可以删除一个远程标签</p></blockquote></li></ol><h4 id="推送标签"><a href="#推送标签" class="headerlink" title="推送标签"></a>推送标签</h4><ol><li><p>git push origin –tags</p><blockquote><p>一次性推送全部尚未推送到远程的本地标签</p></blockquote></li><li><p>git push origin <tagname></tagname></p><blockquote><p>可以推送一个本地标签</p></blockquote></li></ol><hr><h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><ol><li><p>git remote</p><blockquote><p>显示所关联的远程仓库</p></blockquote></li><li><p>git remote -v</p><blockquote><p>显示更详细信息</p></blockquote></li><li><p>git remote add origin git@server-name:path/repo-name.git</p><blockquote><p>关联一个远程库</p></blockquote></li><li><p>git remote rm name</p><blockquote><p>删除一个远程库</p></blockquote></li><li><p>git remote rename <old-name> <new-name></new-name></old-name></p><blockquote><p>将远程连接从 <old-name> 重命名为 <new-name></new-name></old-name></p></blockquote></li></ol><hr><h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><ol><li><p>git rebase master</p><blockquote><p>将master分之上超前的提交，变基到当前分支  </p></blockquote></li><li><p>git rebase –interactive</p><blockquote><p>交互模式，修改commit   </p></blockquote></li><li><p>git rebase –continue</p><blockquote><p>处理完冲突继续合并   </p></blockquote></li><li><p>git rebase –skip</p><blockquote><p>跳过合并</p></blockquote></li><li><p>git rebase –abort</p><blockquote><p>取消合并</p></blockquote></li></ol><hr><h3 id="查看汇总"><a href="#查看汇总" class="headerlink" title="查看汇总"></a>查看汇总</h3><h4 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h4><ol><li><p>git whatchanged –since=’2 weeks ago’</p><blockquote><p>查看两个星期内的改动</p></blockquote></li><li><p>git log –follow [file]</p><blockquote><p>显示某个文件的版本历史</p></blockquote></li><li><p>git log –author=”John”</p><blockquote><p>它会显示所有作者叫 John 的提交</p></blockquote></li><li><p>get log –after=”yesterday”</p><blockquote><p>查看昨天的历史信息</p></blockquote></li><li><p>git log -3</p><blockquote><p>展示最近3次历史信息</p></blockquote></li><li><p>git log –graph</p><blockquote><p>可以看到分支合并图</p></blockquote></li></ol><h4 id="修改历史"><a href="#修改历史" class="headerlink" title="修改历史"></a>修改历史</h4><p>git rebase -i commitID </p><blockquote><p>将pick 替换成 r , 然后回车，vi退出可以使用 :x<br>修改 git的历史记录的提交信息</p></blockquote><h4 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h4><ol><li><p>git diff HEAD – readme.txt</p><blockquote><p>可以查看工作区和版本库里面最新版本的区别</p></blockquote></li><li><p>git diff –staged </p><blockquote><p>显示暂存区（已经add）的文件和版本库文件的比较</p></blockquote></li><li><p>git ls-files</p><blockquote><p>查看在暂存区的文件</p></blockquote></li></ol><h4 id="删除暂存"><a href="#删除暂存" class="headerlink" title="删除暂存"></a>删除暂存</h4><ol><li>git rm –cached 文件名<blockquote><p>把文件从暂缓区 返回至 工作区</p></blockquote></li></ol><hr><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h4><p>echo node_modules/ &gt;&gt; .gitignore</p><blockquote><p>添加忽略文件</p></blockquote><h4 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h4><ol><li><p>git archive master –format=zip –output=master.zip</p><blockquote><p>将Master分支打包</p></blockquote></li><li><p>git bundle create <file> <branch-name></branch-name></file></p><blockquote><p>将历史记录包括分支内容打包到一个文件中</p></blockquote></li><li><p>git clone repo.bundle <repo-dir> -b <branch-name></branch-name></repo-dir></p><blockquote><p>从某个Bundle中导入</p></blockquote></li></ol><h4 id="工作区"><a href="#工作区" class="headerlink" title="工作区"></a>工作区</h4><ol><li><p>git stash </p><blockquote><p>将工作区现场（已跟踪文件）储藏起来</p></blockquote></li><li><p>git stash list  </p><blockquote><p>查看保存的工作现场   </p></blockquote></li><li><p>git stash apply  </p><blockquote><p>恢复工作现场   </p></blockquote></li><li><p>git stash drop  </p><blockquote><p>删除stash内容   </p></blockquote></li><li><p>git stash pop   </p><blockquote><p>恢复的同时直接删除stash内容   </p></blockquote></li><li><p>git stash apply stash@{0}  </p><blockquote><p>恢复指定的工作现场</p></blockquote></li></ol><h4 id="查找内容"><a href="#查找内容" class="headerlink" title="查找内容"></a>查找内容</h4><ol><li><p>git grep “Hello”</p><blockquote><p>从当前目录的所有文件中查找文本内容</p></blockquote></li><li><p>git grep “Hello” v2.5</p><blockquote><p>在某一版本中搜索文本</p></blockquote></li></ol><h4 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h4><p>git help -a</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><!-- foot --><hr><p>本文会同步更新在以下地方(已链接本人主页),欢迎你在常逛的网站中关注我。 </p><ul><li><a href="https://juejin.im/user/599b6d255188252447222dfd" target="_blank" rel="external nofollow">掘金</a></li><li><a href="http://www.jianshu.com/users/2fb2fd6fda89/timeline" target="_blank" rel="external nofollow">简书</a></li><li><a href="http://www.cnblogs.com/jinma" target="_blank" rel="external nofollow">博客园</a>  </li><li><a href="http://blog.csdn.net/Acceptee" target="_blank" rel="external nofollow">CSDN</a></li><li><a href="https://segmentfault.com/u/majin" target="_blank" rel="external nofollow">segmentfault</a></li></ul><p>转载本站文章请注明作者和出处  <a href="http://tomotoes.com">tomotoes.com</a>，请勿用于任何商业用途。<br>深入Web全栈各项技术，坚持原创，文章更新虽不定，但只为质量而生。<br>建议收藏这个坏掉的番茄  <a href="http://tomotoes.com">tomotoes.com</a> ，愿陪你一起在全栈的道路上努力前行！</p>]]></content>
    
    <summary type="html">
    
      Git
    
    </summary>
    
      <category term="底端" scheme="http://tomotoes.com/blog/categories/%E5%BA%95%E7%AB%AF/"/>
    
    
      <category term="Git" scheme="http://tomotoes.com/blog/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>网站必备之简繁切换</title>
    <link href="http://tomotoes.com/blog//posts/316d7913/"/>
    <id>http://tomotoes.com/blog//posts/316d7913/</id>
    <published>2018-01-26T10:17:31.000Z</published>
    <updated>2018-01-27T01:22:54.598Z</updated>
    
    <content type="html"><![CDATA[<p>一个优秀的网站能够更好地照顾不同的用户。</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;一个优秀的网站为了能够更好地照顾不同的用户，一般都会提供简繁两种版本字体切换，提高用户的体验。例如 : <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo 官网</a> 。之所以 Hexo 能得到了不少内地忠实粉丝的追捧，是因为 Hexo 的官网不仅提供了适合台湾同胞<em>（作者是来自台湾的）</em>阅读的繁体中文版，还为我们大陆用户提供了简体中文版，照顾了我们平时的写作习惯。同样，我们也可以提供繁体版来照顾那些使用繁体字的台湾、港澳同胞。<br>&nbsp;&nbsp;&nbsp;&nbsp;下面，我将由浅入深地讲解：如何使用 35 行代码，让网站支持简繁切换功能。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;一般而言，网站上实现两种字体的切换，需要先准备两种字体库，而基本逻辑通常是：识别当前字体，然后根据当前字体去相对的字体库中去寻找另一字体，从而进行字体的替换，处理起来不但麻烦而且耗时。<br>&nbsp;&nbsp;&nbsp;&nbsp;有没有一种方法，可以绕开这些弯路呢？<br>&nbsp;&nbsp;&nbsp;&nbsp;答案是有的，我们可以利用<strong>数组索引的特性</strong>来完成，具体逻辑如下：<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Exchange</span>(<span class="params">text</span>)</span>&#123;</div><div class="line">  <span class="keyword">const</span> Simplified = <span class="string">"万与丑"</span>;</div><div class="line">  <span class="keyword">const</span> Traditional = <span class="string">"萬與醜"</span>;<span class="comment">//翻译成简体：万与丑 </span></div><div class="line">  <span class="keyword">let</span> result,findIndex;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;text.length;++i)&#123;</div><div class="line">      findIndex = Simplified.indexOf(text[i]);</div><div class="line">      result += findIndex === <span class="number">-1</span> ? text[i] : Traditional[j];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;系统来讲，切换字体的大体过程 可分为 3 大步骤：</p><pre><code>1. 得到页面的字体内容2. 切换为简繁字体3. 保存状态与切换状态</code></pre><h3 id="得到页面的内容"><a href="#得到页面的内容" class="headerlink" title="得到页面的内容"></a>得到页面的内容</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;毫无疑问，我们所要切换的内容便是<strong>页面中的汉字</strong>，众所周知，判断汉字可以使用正则表达式<code>/[\u4e00-\u9fa5]/g</code>，而我们在第一步 所面临的最大问题便是：如何得到页面中所有的字体内容。分析网页中结构可得，显示给用户的内容一般都在<code>&lt;body&gt;</code>标签中或者其各个子标签中，我们该如何获取这些包裹着内容的标签呢？又该如何判断 元素与所需字体呢？<br>&nbsp;&nbsp;&nbsp;&nbsp;下面，我将带你学习两个原生 JS 的 API 。</p><h4 id="childNodes"><a href="#childNodes" class="headerlink" title="childNodes"></a>childNodes</h4><blockquote><p>childNodes 属性返回节点的子节点集合，包括 元素节点、文本内容、注释、属性等。</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">document</span>.body.childNodes;<span class="comment">/* 获得 body 元素的子节点集合*/</span></div></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;可以想象到，我们先将 <code>document.body.childNodes</code> 作为入口 循环遍历，然后再如法炮制的递归各个元素，便可得到 body 标签中 所有的 DOM 节点以及节点中所需的文本内容。</p><h4 id="nodeType"><a href="#nodeType" class="headerlink" title="nodeType"></a>nodeType</h4><blockquote><p>nodeType 属性返回以数字值返回指定节点的节点类型。<br>如果节点是元素节点，则 nodeType 属性将返回 1。<br>如果节点是文本节点，则 nodeType 属性将返回 3。</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">document</span>.body.nodeType === <span class="number">1</span>;<span class="comment">/* true */</span></div></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;有了 nodeType 作为当前元素的判断，我们便可轻松的分离出 DOM 节点与 文本节点，从而来进行不同需求的操作。<br>&nbsp;&nbsp;&nbsp;&nbsp;大体逻辑如下：<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">translateBody</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> objs = (obj ? obj : <span class="built_in">document</span>.body).childNodes;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; objs.length; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (objs[i].nodeType === <span class="number">3</span>) &#123;</div><div class="line">            objs[i].textContent = Exchange(objs[i].textContent);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (objs[i].nodeType === <span class="number">1</span> ) &#123;</div><div class="line">            translateBody(objs[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;这样，我们便得到了所需要的文本内容。下面，我们将进行 <code>Exchange</code> 函数的编写。</p><h3 id="切换简繁字体"><a href="#切换简繁字体" class="headerlink" title="切换简繁字体"></a>切换简繁字体</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;毫无疑问，切换字体最大的困难，就是索引相同的字体库了。所幸，我从网上寻得了前辈总结的资源，欢迎大家使用。<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> Simplified = <span class="string">"万与丑专业丛东丝丢两严丧个丬丰临为丽举么义乌乐乔习乡书买乱争于亏云亘亚产亩亲亵亸亿仅从仑仓仪们价众优伙会伛伞伟传伤伥伦伧伪伫体余佣佥侠侣侥侦侧侨侩侪侬俣俦俨俩俪俭债倾偬偻偾偿傥傧储傩儿兑兖党兰关兴兹养兽冁内冈册写军农冢冯冲决况冻净凄凉凌减凑凛几凤凫凭凯击凼凿刍划刘则刚创删别刬刭刽刿剀剂剐剑剥剧劝办务劢动励劲劳势勋勐勚匀匦匮区医华协单卖卢卤卧卫却卺厂厅历厉压厌厍厕厢厣厦厨厩厮县参叆叇双发变叙叠叶号叹叽吁后吓吕吗吣吨听启吴呒呓呕呖呗员呙呛呜咏咔咙咛咝咤咴咸哌响哑哒哓哔哕哗哙哜哝哟唛唝唠唡唢唣唤唿啧啬啭啮啰啴啸喷喽喾嗫呵嗳嘘嘤嘱噜噼嚣嚯团园囱围囵国图圆圣圹场坂坏块坚坛坜坝坞坟坠垄垅垆垒垦垧垩垫垭垯垱垲垴埘埙埚埝埯堑堕塆墙壮声壳壶壸处备复够头夸夹夺奁奂奋奖奥妆妇妈妩妪妫姗姜娄娅娆娇娈娱娲娴婳婴婵婶媪嫒嫔嫱嬷孙学孪宁宝实宠审宪宫宽宾寝对寻导寿将尔尘尧尴尸尽层屃屉届属屡屦屿岁岂岖岗岘岙岚岛岭岳岽岿峃峄峡峣峤峥峦崂崃崄崭嵘嵚嵛嵝嵴巅巩巯币帅师帏帐帘帜带帧帮帱帻帼幂幞干并广庄庆庐庑库应庙庞废庼廪开异弃张弥弪弯弹强归当录彟彦彻径徕御忆忏忧忾怀态怂怃怄怅怆怜总怼怿恋恳恶恸恹恺恻恼恽悦悫悬悭悯惊惧惨惩惫惬惭惮惯愍愠愤愦愿慑慭憷懑懒懔戆戋戏戗战戬户扎扑扦执扩扪扫扬扰抚抛抟抠抡抢护报担拟拢拣拥拦拧拨择挂挚挛挜挝挞挟挠挡挢挣挤挥挦捞损捡换捣据捻掳掴掷掸掺掼揸揽揿搀搁搂搅携摄摅摆摇摈摊撄撑撵撷撸撺擞攒敌敛数斋斓斗斩断无旧时旷旸昙昼昽显晋晒晓晔晕晖暂暧札术朴机杀杂权条来杨杩杰极构枞枢枣枥枧枨枪枫枭柜柠柽栀栅标栈栉栊栋栌栎栏树栖样栾桊桠桡桢档桤桥桦桧桨桩梦梼梾检棂椁椟椠椤椭楼榄榇榈榉槚槛槟槠横樯樱橥橱橹橼檐檩欢欤欧歼殁殇残殒殓殚殡殴毁毂毕毙毡毵氇气氢氩氲汇汉污汤汹沓沟没沣沤沥沦沧沨沩沪沵泞泪泶泷泸泺泻泼泽泾洁洒洼浃浅浆浇浈浉浊测浍济浏浐浑浒浓浔浕涂涌涛涝涞涟涠涡涢涣涤润涧涨涩淀渊渌渍渎渐渑渔渖渗温游湾湿溃溅溆溇滗滚滞滟滠满滢滤滥滦滨滩滪漤潆潇潋潍潜潴澜濑濒灏灭灯灵灾灿炀炉炖炜炝点炼炽烁烂烃烛烟烦烧烨烩烫烬热焕焖焘煅煳熘爱爷牍牦牵牺犊犟状犷犸犹狈狍狝狞独狭狮狯狰狱狲猃猎猕猡猪猫猬献獭玑玙玚玛玮环现玱玺珉珏珐珑珰珲琎琏琐琼瑶瑷璇璎瓒瓮瓯电画畅畲畴疖疗疟疠疡疬疮疯疱疴痈痉痒痖痨痪痫痴瘅瘆瘗瘘瘪瘫瘾瘿癞癣癫癯皑皱皲盏盐监盖盗盘眍眦眬着睁睐睑瞒瞩矫矶矾矿砀码砖砗砚砜砺砻砾础硁硅硕硖硗硙硚确硷碍碛碜碱碹磙礼祎祢祯祷祸禀禄禅离秃秆种积称秽秾稆税稣稳穑穷窃窍窑窜窝窥窦窭竖竞笃笋笔笕笺笼笾筑筚筛筜筝筹签简箓箦箧箨箩箪箫篑篓篮篱簖籁籴类籼粜粝粤粪粮糁糇紧絷纟纠纡红纣纤纥约级纨纩纪纫纬纭纮纯纰纱纲纳纴纵纶纷纸纹纺纻纼纽纾线绀绁绂练组绅细织终绉绊绋绌绍绎经绐绑绒结绔绕绖绗绘给绚绛络绝绞统绠绡绢绣绤绥绦继绨绩绪绫绬续绮绯绰绱绲绳维绵绶绷绸绹绺绻综绽绾绿缀缁缂缃缄缅缆缇缈缉缊缋缌缍缎缏缐缑缒缓缔缕编缗缘缙缚缛缜缝缞缟缠缡缢缣缤缥缦缧缨缩缪缫缬缭缮缯缰缱缲缳缴缵罂网罗罚罢罴羁羟羡翘翙翚耢耧耸耻聂聋职聍联聩聪肃肠肤肷肾肿胀胁胆胜胧胨胪胫胶脉脍脏脐脑脓脔脚脱脶脸腊腌腘腭腻腼腽腾膑臜舆舣舰舱舻艰艳艹艺节芈芗芜芦苁苇苈苋苌苍苎苏苘苹茎茏茑茔茕茧荆荐荙荚荛荜荞荟荠荡荣荤荥荦荧荨荩荪荫荬荭荮药莅莜莱莲莳莴莶获莸莹莺莼萚萝萤营萦萧萨葱蒇蒉蒋蒌蓝蓟蓠蓣蓥蓦蔷蔹蔺蔼蕲蕴薮藁藓虏虑虚虫虬虮虽虾虿蚀蚁蚂蚕蚝蚬蛊蛎蛏蛮蛰蛱蛲蛳蛴蜕蜗蜡蝇蝈蝉蝎蝼蝾螀螨蟏衅衔补衬衮袄袅袆袜袭袯装裆裈裢裣裤裥褛褴襁襕见观觃规觅视觇览觉觊觋觌觍觎觏觐觑觞触觯詟誉誊讠计订讣认讥讦讧讨让讪讫训议讯记讱讲讳讴讵讶讷许讹论讻讼讽设访诀证诂诃评诅识诇诈诉诊诋诌词诎诏诐译诒诓诔试诖诗诘诙诚诛诜话诞诟诠诡询诣诤该详诧诨诩诪诫诬语诮误诰诱诲诳说诵诶请诸诹诺读诼诽课诿谀谁谂调谄谅谆谇谈谊谋谌谍谎谏谐谑谒谓谔谕谖谗谘谙谚谛谜谝谞谟谠谡谢谣谤谥谦谧谨谩谪谫谬谭谮谯谰谱谲谳谴谵谶谷豮贝贞负贠贡财责贤败账货质贩贪贫贬购贮贯贰贱贲贳贴贵贶贷贸费贺贻贼贽贾贿赀赁赂赃资赅赆赇赈赉赊赋赌赍赎赏赐赑赒赓赔赕赖赗赘赙赚赛赜赝赞赟赠赡赢赣赪赵赶趋趱趸跃跄跖跞践跶跷跸跹跻踊踌踪踬踯蹑蹒蹰蹿躏躜躯车轧轨轩轪轫转轭轮软轰轱轲轳轴轵轶轷轸轹轺轻轼载轾轿辀辁辂较辄辅辆辇辈辉辊辋辌辍辎辏辐辑辒输辔辕辖辗辘辙辚辞辩辫边辽达迁过迈运还这进远违连迟迩迳迹适选逊递逦逻遗遥邓邝邬邮邹邺邻郁郄郏郐郑郓郦郧郸酝酦酱酽酾酿释里鉅鉴銮錾钆钇针钉钊钋钌钍钎钏钐钑钒钓钔钕钖钗钘钙钚钛钝钞钟钠钡钢钣钤钥钦钧钨钩钪钫钬钭钮钯钰钱钲钳钴钵钶钷钸钹钺钻钼钽钾钿铀铁铂铃铄铅铆铈铉铊铋铍铎铏铐铑铒铕铗铘铙铚铛铜铝铞铟铠铡铢铣铤铥铦铧铨铪铫铬铭铮铯铰铱铲铳铴铵银铷铸铹铺铻铼铽链铿销锁锂锃锄锅锆锇锈锉锊锋锌锍锎锏锐锑锒锓锔锕锖锗错锚锜锞锟锠锡锢锣锤锥锦锨锩锫锬锭键锯锰锱锲锳锴锵锶锷锸锹锺锻锼锽锾锿镀镁镂镃镆镇镈镉镊镌镍镎镏镐镑镒镕镖镗镙镚镛镜镝镞镟镠镡镢镣镤镥镦镧镨镩镪镫镬镭镮镯镰镱镲镳镴镶长门闩闪闫闬闭问闯闰闱闲闳间闵闶闷闸闹闺闻闼闽闾闿阀阁阂阃阄阅阆阇阈阉阊阋阌阍阎阏阐阑阒阓阔阕阖阗阘阙阚阛队阳阴阵阶际陆陇陈陉陕陧陨险随隐隶隽难雏雠雳雾霁霉霭靓静靥鞑鞒鞯鞴韦韧韨韩韪韫韬韵页顶顷顸项顺须顼顽顾顿颀颁颂颃预颅领颇颈颉颊颋颌颍颎颏颐频颒颓颔颕颖颗题颙颚颛颜额颞颟颠颡颢颣颤颥颦颧风飏飐飑飒飓飔飕飖飗飘飙飚飞飨餍饤饥饦饧饨饩饪饫饬饭饮饯饰饱饲饳饴饵饶饷饸饹饺饻饼饽饾饿馀馁馂馃馄馅馆馇馈馉馊馋馌馍馎馏馐馑馒馓馔馕马驭驮驯驰驱驲驳驴驵驶驷驸驹驺驻驼驽驾驿骀骁骂骃骄骅骆骇骈骉骊骋验骍骎骏骐骑骒骓骔骕骖骗骘骙骚骛骜骝骞骟骠骡骢骣骤骥骦骧髅髋髌鬓魇魉鱼鱽鱾鱿鲀鲁鲂鲄鲅鲆鲇鲈鲉鲊鲋鲌鲍鲎鲏鲐鲑鲒鲓鲔鲕鲖鲗鲘鲙鲚鲛鲜鲝鲞鲟鲠鲡鲢鲣鲤鲥鲦鲧鲨鲩鲪鲫鲬鲭鲮鲯鲰鲱鲲鲳鲴鲵鲶鲷鲸鲹鲺鲻鲼鲽鲾鲿鳀鳁鳂鳃鳄鳅鳆鳇鳈鳉鳊鳋鳌鳍鳎鳏鳐鳑鳒鳓鳔鳕鳖鳗鳘鳙鳛鳜鳝鳞鳟鳠鳡鳢鳣鸟鸠鸡鸢鸣鸤鸥鸦鸧鸨鸩鸪鸫鸬鸭鸮鸯鸰鸱鸲鸳鸴鸵鸶鸷鸸鸹鸺鸻鸼鸽鸾鸿鹀鹁鹂鹃鹄鹅鹆鹇鹈鹉鹊鹋鹌鹍鹎鹏鹐鹑鹒鹓鹔鹕鹖鹗鹘鹚鹛鹜鹝鹞鹟鹠鹡鹢鹣鹤鹥鹦鹧鹨鹩鹪鹫鹬鹭鹯鹰鹱鹲鹳鹴鹾麦麸黄黉黡黩黪黾"</span>;</div><div class="line"><span class="keyword">const</span> Traditional = <span class="string">"萬與醜專業叢東絲丟兩嚴喪個爿豐臨為麗舉麼義烏樂喬習鄉書買亂爭於虧雲亙亞產畝親褻嚲億僅從侖倉儀們價眾優夥會傴傘偉傳傷倀倫傖偽佇體餘傭僉俠侶僥偵側僑儈儕儂俁儔儼倆儷儉債傾傯僂僨償儻儐儲儺兒兌兗黨蘭關興茲養獸囅內岡冊寫軍農塚馮衝決況凍淨淒涼淩減湊凜幾鳳鳧憑凱擊氹鑿芻劃劉則剛創刪別剗剄劊劌剴劑剮劍剝劇勸辦務勱動勵勁勞勢勳猛勩勻匭匱區醫華協單賣盧鹵臥衛卻巹廠廳曆厲壓厭厙廁廂厴廈廚廄廝縣參靉靆雙發變敘疊葉號歎嘰籲後嚇呂嗎唚噸聽啟吳嘸囈嘔嚦唄員咼嗆嗚詠哢嚨嚀噝吒噅鹹呱響啞噠嘵嗶噦嘩噲嚌噥喲嘜嗊嘮啢嗩唕喚呼嘖嗇囀齧囉嘽嘯噴嘍嚳囁嗬噯噓嚶囑嚕劈囂謔團園囪圍圇國圖圓聖壙場阪壞塊堅壇壢壩塢墳墜壟壟壚壘墾坰堊墊埡墶壋塏堖塒塤堝墊垵塹墮壪牆壯聲殼壺壼處備複夠頭誇夾奪奩奐奮獎奧妝婦媽嫵嫗媯姍薑婁婭嬈嬌孌娛媧嫻嫿嬰嬋嬸媼嬡嬪嬙嬤孫學孿寧寶實寵審憲宮寬賓寢對尋導壽將爾塵堯尷屍盡層屭屜屆屬屢屨嶼歲豈嶇崗峴嶴嵐島嶺嶽崠巋嶨嶧峽嶢嶠崢巒嶗崍嶮嶄嶸嶔崳嶁脊巔鞏巰幣帥師幃帳簾幟帶幀幫幬幘幗冪襆幹並廣莊慶廬廡庫應廟龐廢廎廩開異棄張彌弳彎彈強歸當錄彠彥徹徑徠禦憶懺憂愾懷態慫憮慪悵愴憐總懟懌戀懇惡慟懨愷惻惱惲悅愨懸慳憫驚懼慘懲憊愜慚憚慣湣慍憤憒願懾憖怵懣懶懍戇戔戲戧戰戩戶紮撲扡執擴捫掃揚擾撫拋摶摳掄搶護報擔擬攏揀擁攔擰撥擇掛摯攣掗撾撻挾撓擋撟掙擠揮撏撈損撿換搗據撚擄摑擲撣摻摜摣攬撳攙擱摟攪攜攝攄擺搖擯攤攖撐攆擷擼攛擻攢敵斂數齋斕鬥斬斷無舊時曠暘曇晝曨顯晉曬曉曄暈暉暫曖劄術樸機殺雜權條來楊榪傑極構樅樞棗櫪梘棖槍楓梟櫃檸檉梔柵標棧櫛櫳棟櫨櫟欄樹棲樣欒棬椏橈楨檔榿橋樺檜槳樁夢檮棶檢欞槨櫝槧欏橢樓欖櫬櫚櫸檟檻檳櫧橫檣櫻櫫櫥櫓櫞簷檁歡歟歐殲歿殤殘殞殮殫殯毆毀轂畢斃氈毿氌氣氫氬氳彙漢汙湯洶遝溝沒灃漚瀝淪滄渢溈滬濔濘淚澩瀧瀘濼瀉潑澤涇潔灑窪浹淺漿澆湞溮濁測澮濟瀏滻渾滸濃潯濜塗湧濤澇淶漣潿渦溳渙滌潤澗漲澀澱淵淥漬瀆漸澠漁瀋滲溫遊灣濕潰濺漵漊潷滾滯灩灄滿瀅濾濫灤濱灘澦濫瀠瀟瀲濰潛瀦瀾瀨瀕灝滅燈靈災燦煬爐燉煒熗點煉熾爍爛烴燭煙煩燒燁燴燙燼熱煥燜燾煆糊溜愛爺牘犛牽犧犢強狀獷獁猶狽麅獮獰獨狹獅獪猙獄猻獫獵獼玀豬貓蝟獻獺璣璵瑒瑪瑋環現瑲璽瑉玨琺瓏璫琿璡璉瑣瓊瑤璦璿瓔瓚甕甌電畫暢佘疇癤療瘧癘瘍鬁瘡瘋皰屙癰痙癢瘂癆瘓癇癡癉瘮瘞瘺癟癱癮癭癩癬癲臒皚皺皸盞鹽監蓋盜盤瞘眥矓著睜睞瞼瞞矚矯磯礬礦碭碼磚硨硯碸礪礱礫礎硜矽碩硤磽磑礄確鹼礙磧磣堿镟滾禮禕禰禎禱禍稟祿禪離禿稈種積稱穢穠穭稅穌穩穡窮竊竅窯竄窩窺竇窶豎競篤筍筆筧箋籠籩築篳篩簹箏籌簽簡籙簀篋籜籮簞簫簣簍籃籬籪籟糴類秈糶糲粵糞糧糝餱緊縶糸糾紆紅紂纖紇約級紈纊紀紉緯紜紘純紕紗綱納紝縱綸紛紙紋紡紵紖紐紓線紺絏紱練組紳細織終縐絆紼絀紹繹經紿綁絨結絝繞絰絎繪給絢絳絡絕絞統綆綃絹繡綌綏絛繼綈績緒綾緓續綺緋綽緔緄繩維綿綬繃綢綯綹綣綜綻綰綠綴緇緙緗緘緬纜緹緲緝縕繢緦綞緞緶線緱縋緩締縷編緡緣縉縛縟縝縫縗縞纏縭縊縑繽縹縵縲纓縮繆繅纈繚繕繒韁繾繰繯繳纘罌網羅罰罷羆羈羥羨翹翽翬耮耬聳恥聶聾職聹聯聵聰肅腸膚膁腎腫脹脅膽勝朧腖臚脛膠脈膾髒臍腦膿臠腳脫腡臉臘醃膕齶膩靦膃騰臏臢輿艤艦艙艫艱豔艸藝節羋薌蕪蘆蓯葦藶莧萇蒼苧蘇檾蘋莖蘢蔦塋煢繭荊薦薘莢蕘蓽蕎薈薺蕩榮葷滎犖熒蕁藎蓀蔭蕒葒葤藥蒞蓧萊蓮蒔萵薟獲蕕瑩鶯蓴蘀蘿螢營縈蕭薩蔥蕆蕢蔣蔞藍薊蘺蕷鎣驀薔蘞藺藹蘄蘊藪槁蘚虜慮虛蟲虯蟣雖蝦蠆蝕蟻螞蠶蠔蜆蠱蠣蟶蠻蟄蛺蟯螄蠐蛻蝸蠟蠅蟈蟬蠍螻蠑螿蟎蠨釁銜補襯袞襖嫋褘襪襲襏裝襠褌褳襝褲襇褸襤繈襴見觀覎規覓視覘覽覺覬覡覿覥覦覯覲覷觴觸觶讋譽謄訁計訂訃認譏訐訌討讓訕訖訓議訊記訒講諱謳詎訝訥許訛論訩訟諷設訪訣證詁訶評詛識詗詐訴診詆謅詞詘詔詖譯詒誆誄試詿詩詰詼誠誅詵話誕詬詮詭詢詣諍該詳詫諢詡譸誡誣語誚誤誥誘誨誑說誦誒請諸諏諾讀諑誹課諉諛誰諗調諂諒諄誶談誼謀諶諜謊諫諧謔謁謂諤諭諼讒諮諳諺諦謎諞諝謨讜謖謝謠謗諡謙謐謹謾謫譾謬譚譖譙讕譜譎讞譴譫讖穀豶貝貞負貟貢財責賢敗賬貨質販貪貧貶購貯貫貳賤賁貰貼貴貺貸貿費賀貽賊贄賈賄貲賃賂贓資賅贐賕賑賚賒賦賭齎贖賞賜贔賙賡賠賧賴賵贅賻賺賽賾贗讚贇贈贍贏贛赬趙趕趨趲躉躍蹌蹠躒踐躂蹺蹕躚躋踴躊蹤躓躑躡蹣躕躥躪躦軀車軋軌軒軑軔轉軛輪軟轟軲軻轤軸軹軼軤軫轢軺輕軾載輊轎輈輇輅較輒輔輛輦輩輝輥輞輬輟輜輳輻輯轀輸轡轅轄輾轆轍轔辭辯辮邊遼達遷過邁運還這進遠違連遲邇逕跡適選遜遞邐邏遺遙鄧鄺鄔郵鄒鄴鄰鬱郤郟鄶鄭鄆酈鄖鄲醞醱醬釅釃釀釋裏钜鑒鑾鏨釓釔針釘釗釙釕釷釺釧釤鈒釩釣鍆釹鍚釵鈃鈣鈈鈦鈍鈔鍾鈉鋇鋼鈑鈐鑰欽鈞鎢鉤鈧鈁鈥鈄鈕鈀鈺錢鉦鉗鈷缽鈳鉕鈽鈸鉞鑽鉬鉭鉀鈿鈾鐵鉑鈴鑠鉛鉚鈰鉉鉈鉍鈹鐸鉶銬銠鉺銪鋏鋣鐃銍鐺銅鋁銱銦鎧鍘銖銑鋌銩銛鏵銓鉿銚鉻銘錚銫鉸銥鏟銃鐋銨銀銣鑄鐒鋪鋙錸鋱鏈鏗銷鎖鋰鋥鋤鍋鋯鋨鏽銼鋝鋒鋅鋶鐦鐧銳銻鋃鋟鋦錒錆鍺錯錨錡錁錕錩錫錮鑼錘錐錦鍁錈錇錟錠鍵鋸錳錙鍥鍈鍇鏘鍶鍔鍤鍬鍾鍛鎪鍠鍰鎄鍍鎂鏤鎡鏌鎮鎛鎘鑷鐫鎳鎿鎦鎬鎊鎰鎔鏢鏜鏍鏰鏞鏡鏑鏃鏇鏐鐔钁鐐鏷鑥鐓鑭鐠鑹鏹鐙鑊鐳鐶鐲鐮鐿鑔鑣鑞鑲長門閂閃閆閈閉問闖閏闈閑閎間閔閌悶閘鬧閨聞闥閩閭闓閥閣閡閫鬮閱閬闍閾閹閶鬩閿閽閻閼闡闌闃闠闊闋闔闐闒闕闞闤隊陽陰陣階際陸隴陳陘陝隉隕險隨隱隸雋難雛讎靂霧霽黴靄靚靜靨韃鞽韉韝韋韌韍韓韙韞韜韻頁頂頃頇項順須頊頑顧頓頎頒頌頏預顱領頗頸頡頰頲頜潁熲頦頤頻頮頹頷頴穎顆題顒顎顓顏額顳顢顛顙顥纇顫顬顰顴風颺颭颮颯颶颸颼颻飀飄飆飆飛饗饜飣饑飥餳飩餼飪飫飭飯飲餞飾飽飼飿飴餌饒餉餄餎餃餏餅餑餖餓餘餒餕餜餛餡館餷饋餶餿饞饁饃餺餾饈饉饅饊饌饢馬馭馱馴馳驅馹駁驢駔駛駟駙駒騶駐駝駑駕驛駘驍罵駰驕驊駱駭駢驫驪騁驗騂駸駿騏騎騍騅騌驌驂騙騭騤騷騖驁騮騫騸驃騾驄驏驟驥驦驤髏髖髕鬢魘魎魚魛魢魷魨魯魴魺鮁鮃鯰鱸鮋鮓鮒鮊鮑鱟鮍鮐鮭鮚鮳鮪鮞鮦鰂鮜鱠鱭鮫鮮鮺鯗鱘鯁鱺鰱鰹鯉鰣鰷鯀鯊鯇鮶鯽鯒鯖鯪鯕鯫鯡鯤鯧鯝鯢鯰鯛鯨鯵鯴鯔鱝鰈鰏鱨鯷鰮鰃鰓鱷鰍鰒鰉鰁鱂鯿鰠鼇鰭鰨鰥鰩鰟鰜鰳鰾鱈鱉鰻鰵鱅鰼鱖鱔鱗鱒鱯鱤鱧鱣鳥鳩雞鳶鳴鳲鷗鴉鶬鴇鴆鴣鶇鸕鴨鴞鴦鴒鴟鴝鴛鴬鴕鷥鷙鴯鴰鵂鴴鵃鴿鸞鴻鵐鵓鸝鵑鵠鵝鵒鷳鵜鵡鵲鶓鵪鶤鵯鵬鵮鶉鶊鵷鷫鶘鶡鶚鶻鶿鶥鶩鷊鷂鶲鶹鶺鷁鶼鶴鷖鸚鷓鷚鷯鷦鷲鷸鷺鸇鷹鸌鸏鸛鸘鹺麥麩黃黌黶黷黲黽"</span>;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;根据上面的总结，<code>Exchange</code> 函数编写如下：<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Exchange</span>(<span class="params">text</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> result = <span class="string">''</span>, j,</div><div class="line">        s = <span class="string">"万与丑专业丛东丝丢两严丧个丬丰临为丽举么义乌乐乔习乡书买乱争于亏云亘亚产亩亲亵亸亿仅从仑仓仪们价众优伙会伛伞伟传伤伥伦伧伪伫体余佣佥侠侣侥侦侧侨侩侪侬俣俦俨俩俪俭债倾偬偻偾偿傥傧储傩儿兑兖党兰关兴兹养兽冁内冈册写军农冢冯冲决况冻净凄凉凌减凑凛几凤凫凭凯击凼凿刍划刘则刚创删别刬刭刽刿剀剂剐剑剥剧劝办务劢动励劲劳势勋勐勚匀匦匮区医华协单卖卢卤卧卫却卺厂厅历厉压厌厍厕厢厣厦厨厩厮县参叆叇双发变叙叠叶号叹叽吁后吓吕吗吣吨听启吴呒呓呕呖呗员呙呛呜咏咔咙咛咝咤咴咸哌响哑哒哓哔哕哗哙哜哝哟唛唝唠唡唢唣唤唿啧啬啭啮啰啴啸喷喽喾嗫呵嗳嘘嘤嘱噜噼嚣嚯团园囱围囵国图圆圣圹场坂坏块坚坛坜坝坞坟坠垄垅垆垒垦垧垩垫垭垯垱垲垴埘埙埚埝埯堑堕塆墙壮声壳壶壸处备复够头夸夹夺奁奂奋奖奥妆妇妈妩妪妫姗姜娄娅娆娇娈娱娲娴婳婴婵婶媪嫒嫔嫱嬷孙学孪宁宝实宠审宪宫宽宾寝对寻导寿将尔尘尧尴尸尽层屃屉届属屡屦屿岁岂岖岗岘岙岚岛岭岳岽岿峃峄峡峣峤峥峦崂崃崄崭嵘嵚嵛嵝嵴巅巩巯币帅师帏帐帘帜带帧帮帱帻帼幂幞干并广庄庆庐庑库应庙庞废庼廪开异弃张弥弪弯弹强归当录彟彦彻径徕御忆忏忧忾怀态怂怃怄怅怆怜总怼怿恋恳恶恸恹恺恻恼恽悦悫悬悭悯惊惧惨惩惫惬惭惮惯愍愠愤愦愿慑慭憷懑懒懔戆戋戏戗战戬户扎扑扦执扩扪扫扬扰抚抛抟抠抡抢护报担拟拢拣拥拦拧拨择挂挚挛挜挝挞挟挠挡挢挣挤挥挦捞损捡换捣据捻掳掴掷掸掺掼揸揽揿搀搁搂搅携摄摅摆摇摈摊撄撑撵撷撸撺擞攒敌敛数斋斓斗斩断无旧时旷旸昙昼昽显晋晒晓晔晕晖暂暧札术朴机杀杂权条来杨杩杰极构枞枢枣枥枧枨枪枫枭柜柠柽栀栅标栈栉栊栋栌栎栏树栖样栾桊桠桡桢档桤桥桦桧桨桩梦梼梾检棂椁椟椠椤椭楼榄榇榈榉槚槛槟槠横樯樱橥橱橹橼檐檩欢欤欧歼殁殇残殒殓殚殡殴毁毂毕毙毡毵氇气氢氩氲汇汉污汤汹沓沟没沣沤沥沦沧沨沩沪沵泞泪泶泷泸泺泻泼泽泾洁洒洼浃浅浆浇浈浉浊测浍济浏浐浑浒浓浔浕涂涌涛涝涞涟涠涡涢涣涤润涧涨涩淀渊渌渍渎渐渑渔渖渗温游湾湿溃溅溆溇滗滚滞滟滠满滢滤滥滦滨滩滪漤潆潇潋潍潜潴澜濑濒灏灭灯灵灾灿炀炉炖炜炝点炼炽烁烂烃烛烟烦烧烨烩烫烬热焕焖焘煅煳熘爱爷牍牦牵牺犊犟状犷犸犹狈狍狝狞独狭狮狯狰狱狲猃猎猕猡猪猫猬献獭玑玙玚玛玮环现玱玺珉珏珐珑珰珲琎琏琐琼瑶瑷璇璎瓒瓮瓯电画畅畲畴疖疗疟疠疡疬疮疯疱疴痈痉痒痖痨痪痫痴瘅瘆瘗瘘瘪瘫瘾瘿癞癣癫癯皑皱皲盏盐监盖盗盘眍眦眬着睁睐睑瞒瞩矫矶矾矿砀码砖砗砚砜砺砻砾础硁硅硕硖硗硙硚确硷碍碛碜碱碹磙礼祎祢祯祷祸禀禄禅离秃秆种积称秽秾稆税稣稳穑穷窃窍窑窜窝窥窦窭竖竞笃笋笔笕笺笼笾筑筚筛筜筝筹签简箓箦箧箨箩箪箫篑篓篮篱簖籁籴类籼粜粝粤粪粮糁糇紧絷纟纠纡红纣纤纥约级纨纩纪纫纬纭纮纯纰纱纲纳纴纵纶纷纸纹纺纻纼纽纾线绀绁绂练组绅细织终绉绊绋绌绍绎经绐绑绒结绔绕绖绗绘给绚绛络绝绞统绠绡绢绣绤绥绦继绨绩绪绫绬续绮绯绰绱绲绳维绵绶绷绸绹绺绻综绽绾绿缀缁缂缃缄缅缆缇缈缉缊缋缌缍缎缏缐缑缒缓缔缕编缗缘缙缚缛缜缝缞缟缠缡缢缣缤缥缦缧缨缩缪缫缬缭缮缯缰缱缲缳缴缵罂网罗罚罢罴羁羟羡翘翙翚耢耧耸耻聂聋职聍联聩聪肃肠肤肷肾肿胀胁胆胜胧胨胪胫胶脉脍脏脐脑脓脔脚脱脶脸腊腌腘腭腻腼腽腾膑臜舆舣舰舱舻艰艳艹艺节芈芗芜芦苁苇苈苋苌苍苎苏苘苹茎茏茑茔茕茧荆荐荙荚荛荜荞荟荠荡荣荤荥荦荧荨荩荪荫荬荭荮药莅莜莱莲莳莴莶获莸莹莺莼萚萝萤营萦萧萨葱蒇蒉蒋蒌蓝蓟蓠蓣蓥蓦蔷蔹蔺蔼蕲蕴薮藁藓虏虑虚虫虬虮虽虾虿蚀蚁蚂蚕蚝蚬蛊蛎蛏蛮蛰蛱蛲蛳蛴蜕蜗蜡蝇蝈蝉蝎蝼蝾螀螨蟏衅衔补衬衮袄袅袆袜袭袯装裆裈裢裣裤裥褛褴襁襕见观觃规觅视觇览觉觊觋觌觍觎觏觐觑觞触觯詟誉誊讠计订讣认讥讦讧讨让讪讫训议讯记讱讲讳讴讵讶讷许讹论讻讼讽设访诀证诂诃评诅识诇诈诉诊诋诌词诎诏诐译诒诓诔试诖诗诘诙诚诛诜话诞诟诠诡询诣诤该详诧诨诩诪诫诬语诮误诰诱诲诳说诵诶请诸诹诺读诼诽课诿谀谁谂调谄谅谆谇谈谊谋谌谍谎谏谐谑谒谓谔谕谖谗谘谙谚谛谜谝谞谟谠谡谢谣谤谥谦谧谨谩谪谫谬谭谮谯谰谱谲谳谴谵谶谷豮贝贞负贠贡财责贤败账货质贩贪贫贬购贮贯贰贱贲贳贴贵贶贷贸费贺贻贼贽贾贿赀赁赂赃资赅赆赇赈赉赊赋赌赍赎赏赐赑赒赓赔赕赖赗赘赙赚赛赜赝赞赟赠赡赢赣赪赵赶趋趱趸跃跄跖跞践跶跷跸跹跻踊踌踪踬踯蹑蹒蹰蹿躏躜躯车轧轨轩轪轫转轭轮软轰轱轲轳轴轵轶轷轸轹轺轻轼载轾轿辀辁辂较辄辅辆辇辈辉辊辋辌辍辎辏辐辑辒输辔辕辖辗辘辙辚辞辩辫边辽达迁过迈运还这进远违连迟迩迳迹适选逊递逦逻遗遥邓邝邬邮邹邺邻郁郄郏郐郑郓郦郧郸酝酦酱酽酾酿释里鉅鉴銮錾钆钇针钉钊钋钌钍钎钏钐钑钒钓钔钕钖钗钘钙钚钛钝钞钟钠钡钢钣钤钥钦钧钨钩钪钫钬钭钮钯钰钱钲钳钴钵钶钷钸钹钺钻钼钽钾钿铀铁铂铃铄铅铆铈铉铊铋铍铎铏铐铑铒铕铗铘铙铚铛铜铝铞铟铠铡铢铣铤铥铦铧铨铪铫铬铭铮铯铰铱铲铳铴铵银铷铸铹铺铻铼铽链铿销锁锂锃锄锅锆锇锈锉锊锋锌锍锎锏锐锑锒锓锔锕锖锗错锚锜锞锟锠锡锢锣锤锥锦锨锩锫锬锭键锯锰锱锲锳锴锵锶锷锸锹锺锻锼锽锾锿镀镁镂镃镆镇镈镉镊镌镍镎镏镐镑镒镕镖镗镙镚镛镜镝镞镟镠镡镢镣镤镥镦镧镨镩镪镫镬镭镮镯镰镱镲镳镴镶长门闩闪闫闬闭问闯闰闱闲闳间闵闶闷闸闹闺闻闼闽闾闿阀阁阂阃阄阅阆阇阈阉阊阋阌阍阎阏阐阑阒阓阔阕阖阗阘阙阚阛队阳阴阵阶际陆陇陈陉陕陧陨险随隐隶隽难雏雠雳雾霁霉霭靓静靥鞑鞒鞯鞴韦韧韨韩韪韫韬韵页顶顷顸项顺须顼顽顾顿颀颁颂颃预颅领颇颈颉颊颋颌颍颎颏颐频颒颓颔颕颖颗题颙颚颛颜额颞颟颠颡颢颣颤颥颦颧风飏飐飑飒飓飔飕飖飗飘飙飚飞飨餍饤饥饦饧饨饩饪饫饬饭饮饯饰饱饲饳饴饵饶饷饸饹饺饻饼饽饾饿馀馁馂馃馄馅馆馇馈馉馊馋馌馍馎馏馐馑馒馓馔馕马驭驮驯驰驱驲驳驴驵驶驷驸驹驺驻驼驽驾驿骀骁骂骃骄骅骆骇骈骉骊骋验骍骎骏骐骑骒骓骔骕骖骗骘骙骚骛骜骝骞骟骠骡骢骣骤骥骦骧髅髋髌鬓魇魉鱼鱽鱾鱿鲀鲁鲂鲄鲅鲆鲇鲈鲉鲊鲋鲌鲍鲎鲏鲐鲑鲒鲓鲔鲕鲖鲗鲘鲙鲚鲛鲜鲝鲞鲟鲠鲡鲢鲣鲤鲥鲦鲧鲨鲩鲪鲫鲬鲭鲮鲯鲰鲱鲲鲳鲴鲵鲶鲷鲸鲹鲺鲻鲼鲽鲾鲿鳀鳁鳂鳃鳄鳅鳆鳇鳈鳉鳊鳋鳌鳍鳎鳏鳐鳑鳒鳓鳔鳕鳖鳗鳘鳙鳛鳜鳝鳞鳟鳠鳡鳢鳣鸟鸠鸡鸢鸣鸤鸥鸦鸧鸨鸩鸪鸫鸬鸭鸮鸯鸰鸱鸲鸳鸴鸵鸶鸷鸸鸹鸺鸻鸼鸽鸾鸿鹀鹁鹂鹃鹄鹅鹆鹇鹈鹉鹊鹋鹌鹍鹎鹏鹐鹑鹒鹓鹔鹕鹖鹗鹘鹚鹛鹜鹝鹞鹟鹠鹡鹢鹣鹤鹥鹦鹧鹨鹩鹪鹫鹬鹭鹯鹰鹱鹲鹳鹴鹾麦麸黄黉黡黩黪黾"</span>,</div><div class="line">        t = <span class="string">"萬與醜專業叢東絲丟兩嚴喪個爿豐臨為麗舉麼義烏樂喬習鄉書買亂爭於虧雲亙亞產畝親褻嚲億僅從侖倉儀們價眾優夥會傴傘偉傳傷倀倫傖偽佇體餘傭僉俠侶僥偵側僑儈儕儂俁儔儼倆儷儉債傾傯僂僨償儻儐儲儺兒兌兗黨蘭關興茲養獸囅內岡冊寫軍農塚馮衝決況凍淨淒涼淩減湊凜幾鳳鳧憑凱擊氹鑿芻劃劉則剛創刪別剗剄劊劌剴劑剮劍剝劇勸辦務勱動勵勁勞勢勳猛勩勻匭匱區醫華協單賣盧鹵臥衛卻巹廠廳曆厲壓厭厙廁廂厴廈廚廄廝縣參靉靆雙發變敘疊葉號歎嘰籲後嚇呂嗎唚噸聽啟吳嘸囈嘔嚦唄員咼嗆嗚詠哢嚨嚀噝吒噅鹹呱響啞噠嘵嗶噦嘩噲嚌噥喲嘜嗊嘮啢嗩唕喚呼嘖嗇囀齧囉嘽嘯噴嘍嚳囁嗬噯噓嚶囑嚕劈囂謔團園囪圍圇國圖圓聖壙場阪壞塊堅壇壢壩塢墳墜壟壟壚壘墾坰堊墊埡墶壋塏堖塒塤堝墊垵塹墮壪牆壯聲殼壺壼處備複夠頭誇夾奪奩奐奮獎奧妝婦媽嫵嫗媯姍薑婁婭嬈嬌孌娛媧嫻嫿嬰嬋嬸媼嬡嬪嬙嬤孫學孿寧寶實寵審憲宮寬賓寢對尋導壽將爾塵堯尷屍盡層屭屜屆屬屢屨嶼歲豈嶇崗峴嶴嵐島嶺嶽崠巋嶨嶧峽嶢嶠崢巒嶗崍嶮嶄嶸嶔崳嶁脊巔鞏巰幣帥師幃帳簾幟帶幀幫幬幘幗冪襆幹並廣莊慶廬廡庫應廟龐廢廎廩開異棄張彌弳彎彈強歸當錄彠彥徹徑徠禦憶懺憂愾懷態慫憮慪悵愴憐總懟懌戀懇惡慟懨愷惻惱惲悅愨懸慳憫驚懼慘懲憊愜慚憚慣湣慍憤憒願懾憖怵懣懶懍戇戔戲戧戰戩戶紮撲扡執擴捫掃揚擾撫拋摶摳掄搶護報擔擬攏揀擁攔擰撥擇掛摯攣掗撾撻挾撓擋撟掙擠揮撏撈損撿換搗據撚擄摑擲撣摻摜摣攬撳攙擱摟攪攜攝攄擺搖擯攤攖撐攆擷擼攛擻攢敵斂數齋斕鬥斬斷無舊時曠暘曇晝曨顯晉曬曉曄暈暉暫曖劄術樸機殺雜權條來楊榪傑極構樅樞棗櫪梘棖槍楓梟櫃檸檉梔柵標棧櫛櫳棟櫨櫟欄樹棲樣欒棬椏橈楨檔榿橋樺檜槳樁夢檮棶檢欞槨櫝槧欏橢樓欖櫬櫚櫸檟檻檳櫧橫檣櫻櫫櫥櫓櫞簷檁歡歟歐殲歿殤殘殞殮殫殯毆毀轂畢斃氈毿氌氣氫氬氳彙漢汙湯洶遝溝沒灃漚瀝淪滄渢溈滬濔濘淚澩瀧瀘濼瀉潑澤涇潔灑窪浹淺漿澆湞溮濁測澮濟瀏滻渾滸濃潯濜塗湧濤澇淶漣潿渦溳渙滌潤澗漲澀澱淵淥漬瀆漸澠漁瀋滲溫遊灣濕潰濺漵漊潷滾滯灩灄滿瀅濾濫灤濱灘澦濫瀠瀟瀲濰潛瀦瀾瀨瀕灝滅燈靈災燦煬爐燉煒熗點煉熾爍爛烴燭煙煩燒燁燴燙燼熱煥燜燾煆糊溜愛爺牘犛牽犧犢強狀獷獁猶狽麅獮獰獨狹獅獪猙獄猻獫獵獼玀豬貓蝟獻獺璣璵瑒瑪瑋環現瑲璽瑉玨琺瓏璫琿璡璉瑣瓊瑤璦璿瓔瓚甕甌電畫暢佘疇癤療瘧癘瘍鬁瘡瘋皰屙癰痙癢瘂癆瘓癇癡癉瘮瘞瘺癟癱癮癭癩癬癲臒皚皺皸盞鹽監蓋盜盤瞘眥矓著睜睞瞼瞞矚矯磯礬礦碭碼磚硨硯碸礪礱礫礎硜矽碩硤磽磑礄確鹼礙磧磣堿镟滾禮禕禰禎禱禍稟祿禪離禿稈種積稱穢穠穭稅穌穩穡窮竊竅窯竄窩窺竇窶豎競篤筍筆筧箋籠籩築篳篩簹箏籌簽簡籙簀篋籜籮簞簫簣簍籃籬籪籟糴類秈糶糲粵糞糧糝餱緊縶糸糾紆紅紂纖紇約級紈纊紀紉緯紜紘純紕紗綱納紝縱綸紛紙紋紡紵紖紐紓線紺絏紱練組紳細織終縐絆紼絀紹繹經紿綁絨結絝繞絰絎繪給絢絳絡絕絞統綆綃絹繡綌綏絛繼綈績緒綾緓續綺緋綽緔緄繩維綿綬繃綢綯綹綣綜綻綰綠綴緇緙緗緘緬纜緹緲緝縕繢緦綞緞緶線緱縋緩締縷編緡緣縉縛縟縝縫縗縞纏縭縊縑繽縹縵縲纓縮繆繅纈繚繕繒韁繾繰繯繳纘罌網羅罰罷羆羈羥羨翹翽翬耮耬聳恥聶聾職聹聯聵聰肅腸膚膁腎腫脹脅膽勝朧腖臚脛膠脈膾髒臍腦膿臠腳脫腡臉臘醃膕齶膩靦膃騰臏臢輿艤艦艙艫艱豔艸藝節羋薌蕪蘆蓯葦藶莧萇蒼苧蘇檾蘋莖蘢蔦塋煢繭荊薦薘莢蕘蓽蕎薈薺蕩榮葷滎犖熒蕁藎蓀蔭蕒葒葤藥蒞蓧萊蓮蒔萵薟獲蕕瑩鶯蓴蘀蘿螢營縈蕭薩蔥蕆蕢蔣蔞藍薊蘺蕷鎣驀薔蘞藺藹蘄蘊藪槁蘚虜慮虛蟲虯蟣雖蝦蠆蝕蟻螞蠶蠔蜆蠱蠣蟶蠻蟄蛺蟯螄蠐蛻蝸蠟蠅蟈蟬蠍螻蠑螿蟎蠨釁銜補襯袞襖嫋褘襪襲襏裝襠褌褳襝褲襇褸襤繈襴見觀覎規覓視覘覽覺覬覡覿覥覦覯覲覷觴觸觶讋譽謄訁計訂訃認譏訐訌討讓訕訖訓議訊記訒講諱謳詎訝訥許訛論訩訟諷設訪訣證詁訶評詛識詗詐訴診詆謅詞詘詔詖譯詒誆誄試詿詩詰詼誠誅詵話誕詬詮詭詢詣諍該詳詫諢詡譸誡誣語誚誤誥誘誨誑說誦誒請諸諏諾讀諑誹課諉諛誰諗調諂諒諄誶談誼謀諶諜謊諫諧謔謁謂諤諭諼讒諮諳諺諦謎諞諝謨讜謖謝謠謗諡謙謐謹謾謫譾謬譚譖譙讕譜譎讞譴譫讖穀豶貝貞負貟貢財責賢敗賬貨質販貪貧貶購貯貫貳賤賁貰貼貴貺貸貿費賀貽賊贄賈賄貲賃賂贓資賅贐賕賑賚賒賦賭齎贖賞賜贔賙賡賠賧賴賵贅賻賺賽賾贗讚贇贈贍贏贛赬趙趕趨趲躉躍蹌蹠躒踐躂蹺蹕躚躋踴躊蹤躓躑躡蹣躕躥躪躦軀車軋軌軒軑軔轉軛輪軟轟軲軻轤軸軹軼軤軫轢軺輕軾載輊轎輈輇輅較輒輔輛輦輩輝輥輞輬輟輜輳輻輯轀輸轡轅轄輾轆轍轔辭辯辮邊遼達遷過邁運還這進遠違連遲邇逕跡適選遜遞邐邏遺遙鄧鄺鄔郵鄒鄴鄰鬱郤郟鄶鄭鄆酈鄖鄲醞醱醬釅釃釀釋裏钜鑒鑾鏨釓釔針釘釗釙釕釷釺釧釤鈒釩釣鍆釹鍚釵鈃鈣鈈鈦鈍鈔鍾鈉鋇鋼鈑鈐鑰欽鈞鎢鉤鈧鈁鈥鈄鈕鈀鈺錢鉦鉗鈷缽鈳鉕鈽鈸鉞鑽鉬鉭鉀鈿鈾鐵鉑鈴鑠鉛鉚鈰鉉鉈鉍鈹鐸鉶銬銠鉺銪鋏鋣鐃銍鐺銅鋁銱銦鎧鍘銖銑鋌銩銛鏵銓鉿銚鉻銘錚銫鉸銥鏟銃鐋銨銀銣鑄鐒鋪鋙錸鋱鏈鏗銷鎖鋰鋥鋤鍋鋯鋨鏽銼鋝鋒鋅鋶鐦鐧銳銻鋃鋟鋦錒錆鍺錯錨錡錁錕錩錫錮鑼錘錐錦鍁錈錇錟錠鍵鋸錳錙鍥鍈鍇鏘鍶鍔鍤鍬鍾鍛鎪鍠鍰鎄鍍鎂鏤鎡鏌鎮鎛鎘鑷鐫鎳鎿鎦鎬鎊鎰鎔鏢鏜鏍鏰鏞鏡鏑鏃鏇鏐鐔钁鐐鏷鑥鐓鑭鐠鑹鏹鐙鑊鐳鐶鐲鐮鐿鑔鑣鑞鑲長門閂閃閆閈閉問闖閏闈閑閎間閔閌悶閘鬧閨聞闥閩閭闓閥閣閡閫鬮閱閬闍閾閹閶鬩閿閽閻閼闡闌闃闠闊闋闔闐闒闕闞闤隊陽陰陣階際陸隴陳陘陝隉隕險隨隱隸雋難雛讎靂霧霽黴靄靚靜靨韃鞽韉韝韋韌韍韓韙韞韜韻頁頂頃頇項順須頊頑顧頓頎頒頌頏預顱領頗頸頡頰頲頜潁熲頦頤頻頮頹頷頴穎顆題顒顎顓顏額顳顢顛顙顥纇顫顬顰顴風颺颭颮颯颶颸颼颻飀飄飆飆飛饗饜飣饑飥餳飩餼飪飫飭飯飲餞飾飽飼飿飴餌饒餉餄餎餃餏餅餑餖餓餘餒餕餜餛餡館餷饋餶餿饞饁饃餺餾饈饉饅饊饌饢馬馭馱馴馳驅馹駁驢駔駛駟駙駒騶駐駝駑駕驛駘驍罵駰驕驊駱駭駢驫驪騁驗騂駸駿騏騎騍騅騌驌驂騙騭騤騷騖驁騮騫騸驃騾驄驏驟驥驦驤髏髖髕鬢魘魎魚魛魢魷魨魯魴魺鮁鮃鯰鱸鮋鮓鮒鮊鮑鱟鮍鮐鮭鮚鮳鮪鮞鮦鰂鮜鱠鱭鮫鮮鮺鯗鱘鯁鱺鰱鰹鯉鰣鰷鯀鯊鯇鮶鯽鯒鯖鯪鯕鯫鯡鯤鯧鯝鯢鯰鯛鯨鯵鯴鯔鱝鰈鰏鱨鯷鰮鰃鰓鱷鰍鰒鰉鰁鱂鯿鰠鼇鰭鰨鰥鰩鰟鰜鰳鰾鱈鱉鰻鰵鱅鰼鱖鱔鱗鱒鱯鱤鱧鱣鳥鳩雞鳶鳴鳲鷗鴉鶬鴇鴆鴣鶇鸕鴨鴞鴦鴒鴟鴝鴛鴬鴕鷥鷙鴯鴰鵂鴴鵃鴿鸞鴻鵐鵓鸝鵑鵠鵝鵒鷳鵜鵡鵲鶓鵪鶤鵯鵬鵮鶉鶊鵷鷫鶘鶡鶚鶻鶿鶥鶩鷊鷂鶲鶹鶺鷁鶼鶴鷖鸚鷓鷚鷯鷦鷲鷸鷺鸇鷹鸌鸏鸛鸘鹺麥麩黃黌黶黷黲黽"</span>;</div><div class="line">    <span class="keyword">if</span> (!currentEncoding) &#123;<span class="comment">//如果当前是 繁体切换为简体，进行交换。</span></div><div class="line">        j = s; s = t; t = j;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; text.length; i++) &#123;</div><div class="line">        j = s.indexOf(text[i]);</div><div class="line">        result += j === <span class="number">-1</span> ? text[i] : t[j];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="保存与切换状态"><a href="#保存与切换状态" class="headerlink" title="保存与切换状态"></a>保存与切换状态</h3><h4 id="保存状态"><a href="#保存状态" class="headerlink" title="保存状态"></a>保存状态</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;相信学习过 HTML5 的同学都对<code>localStorage</code>有一点的了解吧，我们就利用它来进行当前状态的保存。当用户进入网站时，读取曾经保存的状态，而每当状态的切换，我们都要刷新当前存储的值。另外，值得注意得是，<code>localStorage</code>中存储的是字符串类型的值，必须对其进行转换，才能使用，如下所示：<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> (localStorage.getItem(<span class="string">"targetEncoding"</span>) === <span class="string">"false"</span>) &#123;</div><div class="line">   <span class="comment">/* doSomething... */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="切换状态"><a href="#切换状态" class="headerlink" title="切换状态"></a>切换状态</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;目前我们的需求是简繁字体切换，充其量就是两种状态的保存，用 布尔类型 一定是没错的。<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> currentEncoding = targetEncoding = <span class="literal">true</span>;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;我们定义了两个变量，当 <code>currentEncoding</code>的值为 true 时，说明 当前字体为简体，反之为繁体。而<code>targetEncoding</code>永远指向 <code>currentEncoding</code>下一个要切换的状态。<br>&nbsp;&nbsp;&nbsp;&nbsp;当切换状态时， 逻辑如下：<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">currentEncoding = targetEncoding;</div><div class="line">targetEncoding = !targetEncoding;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;Ok ，大体过程就搞定了，下面是源码~</p><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><p><a id="codeHide" class="alone button button-3d button-primary button-rounded">点击显/隐源文件</a> </p><div id="sourceCode" style="display:none"><br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:translatePage();"</span>&gt;</span>简繁切换<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure><br><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> currentEncoding = targetEncoding = <span class="literal">true</span>;</div><div class="line"><span class="keyword">let</span> stopDOM = [<span class="string">"BR"</span>,<span class="string">"TIME"</span>,<span class="string">"IMG"</span>,<span class="string">"CANVAS"</span>,<span class="string">"SCRIPT"</span>];</div><div class="line"><span class="keyword">if</span> (localStorage.getItem(<span class="string">"targetEncoding"</span>) === <span class="string">"false"</span>) &#123;</div><div class="line">    targetEncoding = <span class="literal">false</span>;</div><div class="line">    translateBody();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">translateBody</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> objs = (obj ? obj : <span class="built_in">document</span>.body).childNodes;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; objs.length; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (objs[i].nodeType === <span class="number">3</span> &amp;&amp; <span class="regexp">/[\u4e00-\u9fa5]/g</span>.test(objs[i].textContent)) &#123;</div><div class="line">            objs[i].textContent = Exchange(objs[i].textContent);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (objs[i].nodeType === <span class="number">1</span> &amp;&amp; !stopDOM.includes(objs[i].tagName)) &#123;</div><div class="line">            translateBody(objs[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Exchange</span>(<span class="params">text</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> result = <span class="string">''</span>, j,</div><div class="line">        s = <span class="string">"万与丑专业丛东丝丢两严丧个丬丰临为丽举么义乌乐乔习乡书买乱争于亏云亘亚产亩亲亵亸亿仅从仑仓仪们价众优伙会伛伞伟传伤伥伦伧伪伫体余佣佥侠侣侥侦侧侨侩侪侬俣俦俨俩俪俭债倾偬偻偾偿傥傧储傩儿兑兖党兰关兴兹养兽冁内冈册写军农冢冯冲决况冻净凄凉凌减凑凛几凤凫凭凯击凼凿刍划刘则刚创删别刬刭刽刿剀剂剐剑剥剧劝办务劢动励劲劳势勋勐勚匀匦匮区医华协单卖卢卤卧卫却卺厂厅历厉压厌厍厕厢厣厦厨厩厮县参叆叇双发变叙叠叶号叹叽吁后吓吕吗吣吨听启吴呒呓呕呖呗员呙呛呜咏咔咙咛咝咤咴咸哌响哑哒哓哔哕哗哙哜哝哟唛唝唠唡唢唣唤唿啧啬啭啮啰啴啸喷喽喾嗫呵嗳嘘嘤嘱噜噼嚣嚯团园囱围囵国图圆圣圹场坂坏块坚坛坜坝坞坟坠垄垅垆垒垦垧垩垫垭垯垱垲垴埘埙埚埝埯堑堕塆墙壮声壳壶壸处备复够头夸夹夺奁奂奋奖奥妆妇妈妩妪妫姗姜娄娅娆娇娈娱娲娴婳婴婵婶媪嫒嫔嫱嬷孙学孪宁宝实宠审宪宫宽宾寝对寻导寿将尔尘尧尴尸尽层屃屉届属屡屦屿岁岂岖岗岘岙岚岛岭岳岽岿峃峄峡峣峤峥峦崂崃崄崭嵘嵚嵛嵝嵴巅巩巯币帅师帏帐帘帜带帧帮帱帻帼幂幞干并广庄庆庐庑库应庙庞废庼廪开异弃张弥弪弯弹强归当录彟彦彻径徕御忆忏忧忾怀态怂怃怄怅怆怜总怼怿恋恳恶恸恹恺恻恼恽悦悫悬悭悯惊惧惨惩惫惬惭惮惯愍愠愤愦愿慑慭憷懑懒懔戆戋戏戗战戬户扎扑扦执扩扪扫扬扰抚抛抟抠抡抢护报担拟拢拣拥拦拧拨择挂挚挛挜挝挞挟挠挡挢挣挤挥挦捞损捡换捣据捻掳掴掷掸掺掼揸揽揿搀搁搂搅携摄摅摆摇摈摊撄撑撵撷撸撺擞攒敌敛数斋斓斗斩断无旧时旷旸昙昼昽显晋晒晓晔晕晖暂暧札术朴机杀杂权条来杨杩杰极构枞枢枣枥枧枨枪枫枭柜柠柽栀栅标栈栉栊栋栌栎栏树栖样栾桊桠桡桢档桤桥桦桧桨桩梦梼梾检棂椁椟椠椤椭楼榄榇榈榉槚槛槟槠横樯樱橥橱橹橼檐檩欢欤欧歼殁殇残殒殓殚殡殴毁毂毕毙毡毵氇气氢氩氲汇汉污汤汹沓沟没沣沤沥沦沧沨沩沪沵泞泪泶泷泸泺泻泼泽泾洁洒洼浃浅浆浇浈浉浊测浍济浏浐浑浒浓浔浕涂涌涛涝涞涟涠涡涢涣涤润涧涨涩淀渊渌渍渎渐渑渔渖渗温游湾湿溃溅溆溇滗滚滞滟滠满滢滤滥滦滨滩滪漤潆潇潋潍潜潴澜濑濒灏灭灯灵灾灿炀炉炖炜炝点炼炽烁烂烃烛烟烦烧烨烩烫烬热焕焖焘煅煳熘爱爷牍牦牵牺犊犟状犷犸犹狈狍狝狞独狭狮狯狰狱狲猃猎猕猡猪猫猬献獭玑玙玚玛玮环现玱玺珉珏珐珑珰珲琎琏琐琼瑶瑷璇璎瓒瓮瓯电画畅畲畴疖疗疟疠疡疬疮疯疱疴痈痉痒痖痨痪痫痴瘅瘆瘗瘘瘪瘫瘾瘿癞癣癫癯皑皱皲盏盐监盖盗盘眍眦眬着睁睐睑瞒瞩矫矶矾矿砀码砖砗砚砜砺砻砾础硁硅硕硖硗硙硚确硷碍碛碜碱碹磙礼祎祢祯祷祸禀禄禅离秃秆种积称秽秾稆税稣稳穑穷窃窍窑窜窝窥窦窭竖竞笃笋笔笕笺笼笾筑筚筛筜筝筹签简箓箦箧箨箩箪箫篑篓篮篱簖籁籴类籼粜粝粤粪粮糁糇紧絷纟纠纡红纣纤纥约级纨纩纪纫纬纭纮纯纰纱纲纳纴纵纶纷纸纹纺纻纼纽纾线绀绁绂练组绅细织终绉绊绋绌绍绎经绐绑绒结绔绕绖绗绘给绚绛络绝绞统绠绡绢绣绤绥绦继绨绩绪绫绬续绮绯绰绱绲绳维绵绶绷绸绹绺绻综绽绾绿缀缁缂缃缄缅缆缇缈缉缊缋缌缍缎缏缐缑缒缓缔缕编缗缘缙缚缛缜缝缞缟缠缡缢缣缤缥缦缧缨缩缪缫缬缭缮缯缰缱缲缳缴缵罂网罗罚罢罴羁羟羡翘翙翚耢耧耸耻聂聋职聍联聩聪肃肠肤肷肾肿胀胁胆胜胧胨胪胫胶脉脍脏脐脑脓脔脚脱脶脸腊腌腘腭腻腼腽腾膑臜舆舣舰舱舻艰艳艹艺节芈芗芜芦苁苇苈苋苌苍苎苏苘苹茎茏茑茔茕茧荆荐荙荚荛荜荞荟荠荡荣荤荥荦荧荨荩荪荫荬荭荮药莅莜莱莲莳莴莶获莸莹莺莼萚萝萤营萦萧萨葱蒇蒉蒋蒌蓝蓟蓠蓣蓥蓦蔷蔹蔺蔼蕲蕴薮藁藓虏虑虚虫虬虮虽虾虿蚀蚁蚂蚕蚝蚬蛊蛎蛏蛮蛰蛱蛲蛳蛴蜕蜗蜡蝇蝈蝉蝎蝼蝾螀螨蟏衅衔补衬衮袄袅袆袜袭袯装裆裈裢裣裤裥褛褴襁襕见观觃规觅视觇览觉觊觋觌觍觎觏觐觑觞触觯詟誉誊讠计订讣认讥讦讧讨让讪讫训议讯记讱讲讳讴讵讶讷许讹论讻讼讽设访诀证诂诃评诅识诇诈诉诊诋诌词诎诏诐译诒诓诔试诖诗诘诙诚诛诜话诞诟诠诡询诣诤该详诧诨诩诪诫诬语诮误诰诱诲诳说诵诶请诸诹诺读诼诽课诿谀谁谂调谄谅谆谇谈谊谋谌谍谎谏谐谑谒谓谔谕谖谗谘谙谚谛谜谝谞谟谠谡谢谣谤谥谦谧谨谩谪谫谬谭谮谯谰谱谲谳谴谵谶谷豮贝贞负贠贡财责贤败账货质贩贪贫贬购贮贯贰贱贲贳贴贵贶贷贸费贺贻贼贽贾贿赀赁赂赃资赅赆赇赈赉赊赋赌赍赎赏赐赑赒赓赔赕赖赗赘赙赚赛赜赝赞赟赠赡赢赣赪赵赶趋趱趸跃跄跖跞践跶跷跸跹跻踊踌踪踬踯蹑蹒蹰蹿躏躜躯车轧轨轩轪轫转轭轮软轰轱轲轳轴轵轶轷轸轹轺轻轼载轾轿辀辁辂较辄辅辆辇辈辉辊辋辌辍辎辏辐辑辒输辔辕辖辗辘辙辚辞辩辫边辽达迁过迈运还这进远违连迟迩迳迹适选逊递逦逻遗遥邓邝邬邮邹邺邻郁郄郏郐郑郓郦郧郸酝酦酱酽酾酿释里鉅鉴銮錾钆钇针钉钊钋钌钍钎钏钐钑钒钓钔钕钖钗钘钙钚钛钝钞钟钠钡钢钣钤钥钦钧钨钩钪钫钬钭钮钯钰钱钲钳钴钵钶钷钸钹钺钻钼钽钾钿铀铁铂铃铄铅铆铈铉铊铋铍铎铏铐铑铒铕铗铘铙铚铛铜铝铞铟铠铡铢铣铤铥铦铧铨铪铫铬铭铮铯铰铱铲铳铴铵银铷铸铹铺铻铼铽链铿销锁锂锃锄锅锆锇锈锉锊锋锌锍锎锏锐锑锒锓锔锕锖锗错锚锜锞锟锠锡锢锣锤锥锦锨锩锫锬锭键锯锰锱锲锳锴锵锶锷锸锹锺锻锼锽锾锿镀镁镂镃镆镇镈镉镊镌镍镎镏镐镑镒镕镖镗镙镚镛镜镝镞镟镠镡镢镣镤镥镦镧镨镩镪镫镬镭镮镯镰镱镲镳镴镶长门闩闪闫闬闭问闯闰闱闲闳间闵闶闷闸闹闺闻闼闽闾闿阀阁阂阃阄阅阆阇阈阉阊阋阌阍阎阏阐阑阒阓阔阕阖阗阘阙阚阛队阳阴阵阶际陆陇陈陉陕陧陨险随隐隶隽难雏雠雳雾霁霉霭靓静靥鞑鞒鞯鞴韦韧韨韩韪韫韬韵页顶顷顸项顺须顼顽顾顿颀颁颂颃预颅领颇颈颉颊颋颌颍颎颏颐频颒颓颔颕颖颗题颙颚颛颜额颞颟颠颡颢颣颤颥颦颧风飏飐飑飒飓飔飕飖飗飘飙飚飞飨餍饤饥饦饧饨饩饪饫饬饭饮饯饰饱饲饳饴饵饶饷饸饹饺饻饼饽饾饿馀馁馂馃馄馅馆馇馈馉馊馋馌馍馎馏馐馑馒馓馔馕马驭驮驯驰驱驲驳驴驵驶驷驸驹驺驻驼驽驾驿骀骁骂骃骄骅骆骇骈骉骊骋验骍骎骏骐骑骒骓骔骕骖骗骘骙骚骛骜骝骞骟骠骡骢骣骤骥骦骧髅髋髌鬓魇魉鱼鱽鱾鱿鲀鲁鲂鲄鲅鲆鲇鲈鲉鲊鲋鲌鲍鲎鲏鲐鲑鲒鲓鲔鲕鲖鲗鲘鲙鲚鲛鲜鲝鲞鲟鲠鲡鲢鲣鲤鲥鲦鲧鲨鲩鲪鲫鲬鲭鲮鲯鲰鲱鲲鲳鲴鲵鲶鲷鲸鲹鲺鲻鲼鲽鲾鲿鳀鳁鳂鳃鳄鳅鳆鳇鳈鳉鳊鳋鳌鳍鳎鳏鳐鳑鳒鳓鳔鳕鳖鳗鳘鳙鳛鳜鳝鳞鳟鳠鳡鳢鳣鸟鸠鸡鸢鸣鸤鸥鸦鸧鸨鸩鸪鸫鸬鸭鸮鸯鸰鸱鸲鸳鸴鸵鸶鸷鸸鸹鸺鸻鸼鸽鸾鸿鹀鹁鹂鹃鹄鹅鹆鹇鹈鹉鹊鹋鹌鹍鹎鹏鹐鹑鹒鹓鹔鹕鹖鹗鹘鹚鹛鹜鹝鹞鹟鹠鹡鹢鹣鹤鹥鹦鹧鹨鹩鹪鹫鹬鹭鹯鹰鹱鹲鹳鹴鹾麦麸黄黉黡黩黪黾"</span>,</div><div class="line">        t = <span class="string">"萬與醜專業叢東絲丟兩嚴喪個爿豐臨為麗舉麼義烏樂喬習鄉書買亂爭於虧雲亙亞產畝親褻嚲億僅從侖倉儀們價眾優夥會傴傘偉傳傷倀倫傖偽佇體餘傭僉俠侶僥偵側僑儈儕儂俁儔儼倆儷儉債傾傯僂僨償儻儐儲儺兒兌兗黨蘭關興茲養獸囅內岡冊寫軍農塚馮衝決況凍淨淒涼淩減湊凜幾鳳鳧憑凱擊氹鑿芻劃劉則剛創刪別剗剄劊劌剴劑剮劍剝劇勸辦務勱動勵勁勞勢勳猛勩勻匭匱區醫華協單賣盧鹵臥衛卻巹廠廳曆厲壓厭厙廁廂厴廈廚廄廝縣參靉靆雙發變敘疊葉號歎嘰籲後嚇呂嗎唚噸聽啟吳嘸囈嘔嚦唄員咼嗆嗚詠哢嚨嚀噝吒噅鹹呱響啞噠嘵嗶噦嘩噲嚌噥喲嘜嗊嘮啢嗩唕喚呼嘖嗇囀齧囉嘽嘯噴嘍嚳囁嗬噯噓嚶囑嚕劈囂謔團園囪圍圇國圖圓聖壙場阪壞塊堅壇壢壩塢墳墜壟壟壚壘墾坰堊墊埡墶壋塏堖塒塤堝墊垵塹墮壪牆壯聲殼壺壼處備複夠頭誇夾奪奩奐奮獎奧妝婦媽嫵嫗媯姍薑婁婭嬈嬌孌娛媧嫻嫿嬰嬋嬸媼嬡嬪嬙嬤孫學孿寧寶實寵審憲宮寬賓寢對尋導壽將爾塵堯尷屍盡層屭屜屆屬屢屨嶼歲豈嶇崗峴嶴嵐島嶺嶽崠巋嶨嶧峽嶢嶠崢巒嶗崍嶮嶄嶸嶔崳嶁脊巔鞏巰幣帥師幃帳簾幟帶幀幫幬幘幗冪襆幹並廣莊慶廬廡庫應廟龐廢廎廩開異棄張彌弳彎彈強歸當錄彠彥徹徑徠禦憶懺憂愾懷態慫憮慪悵愴憐總懟懌戀懇惡慟懨愷惻惱惲悅愨懸慳憫驚懼慘懲憊愜慚憚慣湣慍憤憒願懾憖怵懣懶懍戇戔戲戧戰戩戶紮撲扡執擴捫掃揚擾撫拋摶摳掄搶護報擔擬攏揀擁攔擰撥擇掛摯攣掗撾撻挾撓擋撟掙擠揮撏撈損撿換搗據撚擄摑擲撣摻摜摣攬撳攙擱摟攪攜攝攄擺搖擯攤攖撐攆擷擼攛擻攢敵斂數齋斕鬥斬斷無舊時曠暘曇晝曨顯晉曬曉曄暈暉暫曖劄術樸機殺雜權條來楊榪傑極構樅樞棗櫪梘棖槍楓梟櫃檸檉梔柵標棧櫛櫳棟櫨櫟欄樹棲樣欒棬椏橈楨檔榿橋樺檜槳樁夢檮棶檢欞槨櫝槧欏橢樓欖櫬櫚櫸檟檻檳櫧橫檣櫻櫫櫥櫓櫞簷檁歡歟歐殲歿殤殘殞殮殫殯毆毀轂畢斃氈毿氌氣氫氬氳彙漢汙湯洶遝溝沒灃漚瀝淪滄渢溈滬濔濘淚澩瀧瀘濼瀉潑澤涇潔灑窪浹淺漿澆湞溮濁測澮濟瀏滻渾滸濃潯濜塗湧濤澇淶漣潿渦溳渙滌潤澗漲澀澱淵淥漬瀆漸澠漁瀋滲溫遊灣濕潰濺漵漊潷滾滯灩灄滿瀅濾濫灤濱灘澦濫瀠瀟瀲濰潛瀦瀾瀨瀕灝滅燈靈災燦煬爐燉煒熗點煉熾爍爛烴燭煙煩燒燁燴燙燼熱煥燜燾煆糊溜愛爺牘犛牽犧犢強狀獷獁猶狽麅獮獰獨狹獅獪猙獄猻獫獵獼玀豬貓蝟獻獺璣璵瑒瑪瑋環現瑲璽瑉玨琺瓏璫琿璡璉瑣瓊瑤璦璿瓔瓚甕甌電畫暢佘疇癤療瘧癘瘍鬁瘡瘋皰屙癰痙癢瘂癆瘓癇癡癉瘮瘞瘺癟癱癮癭癩癬癲臒皚皺皸盞鹽監蓋盜盤瞘眥矓著睜睞瞼瞞矚矯磯礬礦碭碼磚硨硯碸礪礱礫礎硜矽碩硤磽磑礄確鹼礙磧磣堿镟滾禮禕禰禎禱禍稟祿禪離禿稈種積稱穢穠穭稅穌穩穡窮竊竅窯竄窩窺竇窶豎競篤筍筆筧箋籠籩築篳篩簹箏籌簽簡籙簀篋籜籮簞簫簣簍籃籬籪籟糴類秈糶糲粵糞糧糝餱緊縶糸糾紆紅紂纖紇約級紈纊紀紉緯紜紘純紕紗綱納紝縱綸紛紙紋紡紵紖紐紓線紺絏紱練組紳細織終縐絆紼絀紹繹經紿綁絨結絝繞絰絎繪給絢絳絡絕絞統綆綃絹繡綌綏絛繼綈績緒綾緓續綺緋綽緔緄繩維綿綬繃綢綯綹綣綜綻綰綠綴緇緙緗緘緬纜緹緲緝縕繢緦綞緞緶線緱縋緩締縷編緡緣縉縛縟縝縫縗縞纏縭縊縑繽縹縵縲纓縮繆繅纈繚繕繒韁繾繰繯繳纘罌網羅罰罷羆羈羥羨翹翽翬耮耬聳恥聶聾職聹聯聵聰肅腸膚膁腎腫脹脅膽勝朧腖臚脛膠脈膾髒臍腦膿臠腳脫腡臉臘醃膕齶膩靦膃騰臏臢輿艤艦艙艫艱豔艸藝節羋薌蕪蘆蓯葦藶莧萇蒼苧蘇檾蘋莖蘢蔦塋煢繭荊薦薘莢蕘蓽蕎薈薺蕩榮葷滎犖熒蕁藎蓀蔭蕒葒葤藥蒞蓧萊蓮蒔萵薟獲蕕瑩鶯蓴蘀蘿螢營縈蕭薩蔥蕆蕢蔣蔞藍薊蘺蕷鎣驀薔蘞藺藹蘄蘊藪槁蘚虜慮虛蟲虯蟣雖蝦蠆蝕蟻螞蠶蠔蜆蠱蠣蟶蠻蟄蛺蟯螄蠐蛻蝸蠟蠅蟈蟬蠍螻蠑螿蟎蠨釁銜補襯袞襖嫋褘襪襲襏裝襠褌褳襝褲襇褸襤繈襴見觀覎規覓視覘覽覺覬覡覿覥覦覯覲覷觴觸觶讋譽謄訁計訂訃認譏訐訌討讓訕訖訓議訊記訒講諱謳詎訝訥許訛論訩訟諷設訪訣證詁訶評詛識詗詐訴診詆謅詞詘詔詖譯詒誆誄試詿詩詰詼誠誅詵話誕詬詮詭詢詣諍該詳詫諢詡譸誡誣語誚誤誥誘誨誑說誦誒請諸諏諾讀諑誹課諉諛誰諗調諂諒諄誶談誼謀諶諜謊諫諧謔謁謂諤諭諼讒諮諳諺諦謎諞諝謨讜謖謝謠謗諡謙謐謹謾謫譾謬譚譖譙讕譜譎讞譴譫讖穀豶貝貞負貟貢財責賢敗賬貨質販貪貧貶購貯貫貳賤賁貰貼貴貺貸貿費賀貽賊贄賈賄貲賃賂贓資賅贐賕賑賚賒賦賭齎贖賞賜贔賙賡賠賧賴賵贅賻賺賽賾贗讚贇贈贍贏贛赬趙趕趨趲躉躍蹌蹠躒踐躂蹺蹕躚躋踴躊蹤躓躑躡蹣躕躥躪躦軀車軋軌軒軑軔轉軛輪軟轟軲軻轤軸軹軼軤軫轢軺輕軾載輊轎輈輇輅較輒輔輛輦輩輝輥輞輬輟輜輳輻輯轀輸轡轅轄輾轆轍轔辭辯辮邊遼達遷過邁運還這進遠違連遲邇逕跡適選遜遞邐邏遺遙鄧鄺鄔郵鄒鄴鄰鬱郤郟鄶鄭鄆酈鄖鄲醞醱醬釅釃釀釋裏钜鑒鑾鏨釓釔針釘釗釙釕釷釺釧釤鈒釩釣鍆釹鍚釵鈃鈣鈈鈦鈍鈔鍾鈉鋇鋼鈑鈐鑰欽鈞鎢鉤鈧鈁鈥鈄鈕鈀鈺錢鉦鉗鈷缽鈳鉕鈽鈸鉞鑽鉬鉭鉀鈿鈾鐵鉑鈴鑠鉛鉚鈰鉉鉈鉍鈹鐸鉶銬銠鉺銪鋏鋣鐃銍鐺銅鋁銱銦鎧鍘銖銑鋌銩銛鏵銓鉿銚鉻銘錚銫鉸銥鏟銃鐋銨銀銣鑄鐒鋪鋙錸鋱鏈鏗銷鎖鋰鋥鋤鍋鋯鋨鏽銼鋝鋒鋅鋶鐦鐧銳銻鋃鋟鋦錒錆鍺錯錨錡錁錕錩錫錮鑼錘錐錦鍁錈錇錟錠鍵鋸錳錙鍥鍈鍇鏘鍶鍔鍤鍬鍾鍛鎪鍠鍰鎄鍍鎂鏤鎡鏌鎮鎛鎘鑷鐫鎳鎿鎦鎬鎊鎰鎔鏢鏜鏍鏰鏞鏡鏑鏃鏇鏐鐔钁鐐鏷鑥鐓鑭鐠鑹鏹鐙鑊鐳鐶鐲鐮鐿鑔鑣鑞鑲長門閂閃閆閈閉問闖閏闈閑閎間閔閌悶閘鬧閨聞闥閩閭闓閥閣閡閫鬮閱閬闍閾閹閶鬩閿閽閻閼闡闌闃闠闊闋闔闐闒闕闞闤隊陽陰陣階際陸隴陳陘陝隉隕險隨隱隸雋難雛讎靂霧霽黴靄靚靜靨韃鞽韉韝韋韌韍韓韙韞韜韻頁頂頃頇項順須頊頑顧頓頎頒頌頏預顱領頗頸頡頰頲頜潁熲頦頤頻頮頹頷頴穎顆題顒顎顓顏額顳顢顛顙顥纇顫顬顰顴風颺颭颮颯颶颸颼颻飀飄飆飆飛饗饜飣饑飥餳飩餼飪飫飭飯飲餞飾飽飼飿飴餌饒餉餄餎餃餏餅餑餖餓餘餒餕餜餛餡館餷饋餶餿饞饁饃餺餾饈饉饅饊饌饢馬馭馱馴馳驅馹駁驢駔駛駟駙駒騶駐駝駑駕驛駘驍罵駰驕驊駱駭駢驫驪騁驗騂駸駿騏騎騍騅騌驌驂騙騭騤騷騖驁騮騫騸驃騾驄驏驟驥驦驤髏髖髕鬢魘魎魚魛魢魷魨魯魴魺鮁鮃鯰鱸鮋鮓鮒鮊鮑鱟鮍鮐鮭鮚鮳鮪鮞鮦鰂鮜鱠鱭鮫鮮鮺鯗鱘鯁鱺鰱鰹鯉鰣鰷鯀鯊鯇鮶鯽鯒鯖鯪鯕鯫鯡鯤鯧鯝鯢鯰鯛鯨鯵鯴鯔鱝鰈鰏鱨鯷鰮鰃鰓鱷鰍鰒鰉鰁鱂鯿鰠鼇鰭鰨鰥鰩鰟鰜鰳鰾鱈鱉鰻鰵鱅鰼鱖鱔鱗鱒鱯鱤鱧鱣鳥鳩雞鳶鳴鳲鷗鴉鶬鴇鴆鴣鶇鸕鴨鴞鴦鴒鴟鴝鴛鴬鴕鷥鷙鴯鴰鵂鴴鵃鴿鸞鴻鵐鵓鸝鵑鵠鵝鵒鷳鵜鵡鵲鶓鵪鶤鵯鵬鵮鶉鶊鵷鷫鶘鶡鶚鶻鶿鶥鶩鷊鷂鶲鶹鶺鷁鶼鶴鷖鸚鷓鷚鷯鷦鷲鷸鷺鸇鷹鸌鸏鸛鸘鹺麥麩黃黌黶黷黲黽"</span>;</div><div class="line">    <span class="keyword">if</span> (!currentEncoding) &#123;</div><div class="line">        j = s; s = t; t = j;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; text.length; i++) &#123;</div><div class="line">        j = s.indexOf(text[i]);</div><div class="line">        result += j === <span class="number">-1</span> ? text[i] : t[j];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">translatePage</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    currentEncoding = targetEncoding;</div><div class="line">    targetEncoding = !targetEncoding;</div><div class="line">    localStorage.setItem(<span class="string">"targetEncoding"</span>, targetEncoding);</div><div class="line">    translateBody();</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><br></div><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><hr><p>本文会同步更新在以下地方(已链接本人主页),欢迎你在常逛的网站中关注我。 </p><ul><li><a href="https://juejin.im/user/599b6d255188252447222dfd" target="_blank" rel="external nofollow">掘金</a></li><li><a href="http://www.jianshu.com/users/2fb2fd6fda89/timeline" target="_blank" rel="external nofollow">简书</a></li><li><a href="http://www.cnblogs.com/jinma" target="_blank" rel="external nofollow">博客园</a>  </li><li><a href="http://blog.csdn.net/Acceptee" target="_blank" rel="external nofollow">CSDN</a></li><li><a href="https://segmentfault.com/u/majin" target="_blank" rel="external nofollow">segmentfault</a></li></ul><p>转载本站文章请注明作者和出处  <a href="http://tomotoes.com">tomotoes.com</a>，请勿用于任何商业用途。<br>深入Web全栈各项技术，坚持原创，文章更新虽不定，但只为质量而生。<br>建议收藏这个坏掉的番茄  <a href="http://tomotoes.com">tomotoes.com</a> ，愿陪你一起在全栈的道路上努力前行！</p><p><style> .button {color: #666; background-color: #EEE; border-color: #EEE; text-decoration: none; text-align: center; line-height: 40px; height: 40px; padding: 0 40px; margin: 0; display: inline-block; border: none; -webkit-box-sizing: border-box; box-sizing: border-box; -webkit-transition-property: all; transition-property: all; -webkit-transition-duration: .3s; transition-duration: .3s; font-size: 18px; font-weight: bold; font-family: @font-custom; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; letter-spacing: 3px; } .button:visited {color: #666; } .button:hover, .button:focus {background-color: #f6f6f6; text-decoration: none; outline: none; } .button:active, .button.active, .button.is-active {text-shadow: 0 1px 0 rgba(255, 255, 255, 0.3); text-decoration: none; background-color: #eeeeee; border-color: #cfcfcf; color: #d4d4d4; -webkit-transition-duration: 0s; transition-duration: 0s; -webkit-box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.2); box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.2); } .button.disabled, .button.is-disabled, .button:disabled {top: 0 !important; background: #EEE !important; border: 1px solid #DDD !important; text-shadow: 0 1px 1px white !important; color: #CCC !important; -webkit-box-shadow: none !important; box-shadow: none !important; opacity: .8 !important; } .button-primary {background-color: #1B9AF7; border-color: #1B9AF7; color: #FFF; } .button-primary:visited {color: #FFF; } .button-primary:hover, .button-primary:focus {background-color: #4cb0f9; border-color: #4cb0f9; color: #FFF; } .button-primary:active, .button-primary.active, .button-primary.is-active {background-color: #2798eb; border-color: #2798eb; color: #0880d7; } .button-rounded {border-radius: 4px; } .button-border.button-primary, .button-primary.button-border-thin, .button-primary.button-border-thick, .button-border-thin.button-primary, .button-border-thick.button-primary {color: #1B9AF7; } .button-border.button-primary:hover, .button-primary.button-border-thin:hover, .button-primary.button-border-thick:hover, .button-border.button-primary:focus, .button-primary.button-border-thin:focus, .button-primary.button-border-thick:focus, .button-border-thin.button-primary:hover, .button-border-thin.button-primary:focus, .button-border-thick.button-primary:hover, .button-border-thick.button-primary:focus {background-color: rgba(76, 176, 249, 0.9); color: rgba(255, 255, 255, 0.9); } .button-border.button-primary:active, .button-primary.button-border-thin:active, .button-primary.button-border-thick:active, .button-border.button-primary.active, .button-primary.active.button-border-thin, .button-primary.active.button-border-thick, .button-border.button-primary.is-active, .button-primary.is-active.button-border-thin, .button-primary.is-active.button-border-thick, .button-border-thin.button-primary:active, .button-border-thin.button-primary.active, .button-border-thin.button-primary.is-active, .button-border-thick.button-primary:active, .button-border-thick.button-primary.active, .button-border-thick.button-primary.is-active {background-color: rgba(39, 152, 235, 0.7); color: rgba(255, 255, 255, 0.5); opacity: .3; } .button-3d {position: relative; top: 0; -webkit-box-shadow: 0 7px 0 #bbbbbb, 0 8px 3px rgba(0, 0, 0, 0.2); box-shadow: 0 7px 0 #bbbbbb, 0 8px 3px rgba(0, 0, 0, 0.2); } .button-3d:hover, .button-3d:focus {-webkit-box-shadow: 0 7px 0 #bbbbbb, 0 8px 3px rgba(0, 0, 0, 0.2); box-shadow: 0 7px 0 #bbbbbb, 0 8px 3px rgba(0, 0, 0, 0.2); } .button-3d:active, .button-3d.active, .button-3d.is-active {top: 5px; -webkit-transition-property: all; transition-property: all; -webkit-transition-duration: .15s; transition-duration: .15s; -webkit-box-shadow: 0 2px 0 #bbbbbb, 0 3px 3px rgba(0, 0, 0, 0.2); box-shadow: 0 2px 0 #bbbbbb, 0 3px 3px rgba(0, 0, 0, 0.2); } .button-3d.button-primary {-webkit-box-shadow: 0 7px 0 #0880d7, 0 8px 3px rgba(0, 0, 0, 0.3); box-shadow: 0 7px 0 #0880d7, 0 8px 3px rgba(0, 0, 0, 0.3); } .button-3d.button-primary:hover, .button-3d.button-primary:focus {-webkit-box-shadow: 0 7px 0 #077ace, 0 8px 3px rgba(0, 0, 0, 0.3); box-shadow: 0 7px 0 #077ace, 0 8px 3px rgba(0, 0, 0, 0.3); } .button-3d.button-primary:active, .button-3d.button-primary.active, .button-3d.button-primary.is-active {-webkit-box-shadow: 0 2px 0 #0662a6, 0 3px 3px rgba(0, 0, 0, 0.2); box-shadow: 0 2px 0 #0662a6, 0 3px 3px rgba(0, 0, 0, 0.2); }</style></p><script>codeHide.addEventListener("click",function(){$("#sourceCode").slideToggle("slow")});</script>]]></content>
    
    <summary type="html">
    
      简繁切换
    
    </summary>
    
      <category term="建站" scheme="http://tomotoes.com/blog/categories/%E5%BB%BA%E7%AB%99/"/>
    
    
      <category term="Hexo" scheme="http://tomotoes.com/blog/tags/Hexo/"/>
    
      <category term="JavaScript" scheme="http://tomotoes.com/blog/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>神奇的位运算</title>
    <link href="http://tomotoes.com/blog//posts/11eece28/"/>
    <id>http://tomotoes.com/blog//posts/11eece28/</id>
    <published>2018-01-25T08:32:02.000Z</published>
    <updated>2018-01-25T10:11:28.088Z</updated>
    
    <content type="html"><![CDATA[<p>位运算在计算机领域的作用可谓举足轻重。<br><a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;首先，我们要了解一个概念：<strong>程序中的所有数在计算机内存中都是以二进制的形式储存的</strong>。而位运算，就是直接对在内存中的二进制位进行操作，跳过了 程序转义成二进制的这一步骤，对编译时间有所提高，但带来的缺点也很明显，程序的可读性变低了。<br>&nbsp;&nbsp;&nbsp;&nbsp;掌握位运算 是一位程序员的基本素养，位运算在计算机领域的作用可谓举足轻重。<br>&nbsp;&nbsp;&nbsp;&nbsp;下面我将讲解 位运算的大体方法以及一些基本的应用。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="and-运算"><a href="#and-运算" class="headerlink" title="and 运算"></a>and 运算</h3><blockquote><p>只有对应的两个 二进制数，均为1，结果才为 1，否则为 0</p></blockquote><h4 id="amp-1"><a href="#amp-1" class="headerlink" title="&amp; 1"></a>&amp; 1</h4><p><strong>判断 n的第m位数</strong>。</p><p>介绍两个重要应用，来证明其含义：</p><ol><li>(n &gt;&gt;m ) &amp; 1<br>判断 整数n 的二进制 第m位 是否 为1 或者 为0<br>n 的第m位数，如果为1 ，1&amp;1 就返回1 ，如果为0，0&amp;1 就返回0</li><li>判断 奇偶性<br>如果n 为奇数，辗转相除2，最后的余数 必定为1，如果n 为偶数，辗转相除 余数必定为 0<br>也就是说，n为奇数，n&amp;1 等价于 1&amp;1 ，返回1，n为偶数，n&amp;1 等价于 0&amp;1，返回 0 </li></ol><h4 id="amp-0"><a href="#amp-0" class="headerlink" title="&amp; 0"></a>&amp; 0</h4><p><strong>将 n的第m位数，重置为0</strong><br>基本应用：n &amp; ~(1 &lt;&lt; m)</p><ol><li><p>1 &lt;&lt; m<br>定位到 n的第m位数</p></li><li><p>~(1 &lt;&lt; m)<br>将1进行非运算，变为 0，其他剩下的m位，变成 1，而 &amp;1，是无实际作用的</p></li><li><p>n &amp; 0 ：&amp; 按位与运算<br>只有对应的两个数 全部为1时，结果才为1，而&amp;0，返回值一定为 0</p></li></ol><h3 id="or运算"><a href="#or运算" class="headerlink" title="or运算"></a>or运算</h3><blockquote><p>只有对应的两个 二进制数，均为0，结果才为 0，否则为 1</p></blockquote><h4 id="1"><a href="#1" class="headerlink" title="| 1"></a>| 1</h4><p><strong>将 n的第m位数，重置为1</strong></p><p>基本应用：n | (1 &lt;&lt; m):</p><ol><li><p>1 &lt;&lt; m<br>定位到 n 的第m位数</p></li><li><p>n | 1<br>n的第m位数 进行 |1 操作 其返回值必定为 1！<br>因为|只有，两个数都为 0时，结果才为 0 </p></li></ol><h4 id="0"><a href="#0" class="headerlink" title="| 0"></a>| 0</h4><p>无实际作用</p><p>一定要清楚， 是 n的第m位数 在进行操作，其他 位数操作，根本无 影响</p><p>因为，其他位数，是 在进行 “| 0” 操作，而所谓的 |0 操作，与 &amp;1 操作，毫无差别。</p><p>假设 k=n的第m位数，k = 1 ，k|0 = 1|0 = 1，k = 0，k|0 = 0|0 = 0，所谓 无实际作用。</p><p>但是要注意一点，我说的 0 是在二进制数中的0，有实际含义的 0，不是补 0的0</p><p>所以，可以感性的认识到，| 0 与 &amp; 1 以及 下文的 ^ 0，都是无实际作用的</p><h3 id="xor运算"><a href="#xor运算" class="headerlink" title="xor运算"></a>xor运算</h3><blockquote><p>只有对应的两个 二进制数相等时，结果才为 0，否则为 1</p></blockquote><h4 id="1-1"><a href="#1-1" class="headerlink" title="^ 1"></a>^ 1</h4><p><strong>将 n的第m位数，取反</strong></p><p>基本应用：n ^ (1 &lt;&lt; m)</p><ol><li><p>1 &lt;&lt; m ： 定位到 n的第m位数 </p></li><li><p>n ^ 1，我们要知道，^ (异或）：不相等为 1，相等为 0</p></li></ol><p>而 ^1：如果 n的第m位数 为1，1^1 返回值为 0，如果 n的第m位数 为0，0^1 返回值 为1</p><p>所以，^1 的重要作用，就是 与之相反的作用</p><h4 id="0-1"><a href="#0-1" class="headerlink" title="^ 0"></a>^ 0</h4><p>无实际作用</p><p> 假定 整数k 为0，k^0 = 0^0 = 0 ; 假定整数k 为1，k^0 = 1^0 = 1</p><p>所以说，无论怎么变化，^0 都是无实际作用的</p><h3 id="shl-amp-shr-运算"><a href="#shl-amp-shr-运算" class="headerlink" title="shl &amp; shr 运算"></a>shl &amp; shr 运算</h3><ol><li><p><strong>左移运算符 “&lt;&lt;”</strong><br>表达式：a &lt;&lt; b<br>a&lt;&lt;b 的值是：将a各二进位全部左移b位后得到的值。左移时，高位丢弃，低位补0。<br>实际上，左移1位，就等于是乘以2，左移n位，就等于是乘以2n。<br>而左移操作比乘法操作快得多。</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">例如:9 &lt;&lt; 4</div><div class="line">9的二进制形式：0000 0000 0000 0000 0000 0000 0000 1001</div><div class="line">因此，表达式“9&lt;&lt;4”的值，就是将上面的二进制数左移4位，得：</div><div class="line">0000 0000 0000 0000 0000 0000 1001 0000</div><div class="line">即为十进制的144 , 而 9*2的4次幂 = 9*16 = 144.</div></pre></td></tr></table></figure></li><li><p><strong>右移运算符 “&gt;&gt;”</strong><br> 表达式：a &gt;&gt; b<br> a&gt;&gt;b的值是：将a各二进位全部右移b位后得到的值。右移时，移出最右边的位就被丢弃。<br> 对于有符号数，如long,int,short,char类型变量，在右移时，符号位（即最高位）将一起移动，并且大多数C/C++编译器规定，如果原符号位为1，则右移时高位就补充1，原符号位为0，则右移时高位就补充0。</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">实际上，右移n位，就相当于左操作数除以2n，并且将结果往小里取整。</div><div class="line">例如：-25 &gt;&gt; 4 = -2   -2 &gt;&gt; 4 = -1   18 &gt;&gt; 4 = 1</div></pre></td></tr></table></figure></li></ol><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="对2的整数幂进行模运算"><a href="#对2的整数幂进行模运算" class="headerlink" title="对2的整数幂进行模运算"></a>对2的整数幂进行模运算</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n,k;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;k))&#123;</div><div class="line">        n&lt;&lt;=k;<span class="comment">//相当于 n 乘以 2的 k次幂，并将结果赋给n </span></div><div class="line">        </div><div class="line">        n&gt;&gt;=k;<span class="comment">//相当于 n除以 2的 k次幂，并将结果赋给n </span></div><div class="line">        </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="两数交换"><a href="#两数交换" class="headerlink" title="两数交换"></a>两数交换</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n,m;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m))&#123;</div><div class="line">        n^=m;</div><div class="line">        m^=n;</div><div class="line">        n^=m;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,n,m);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>按位异或 ^ : 不相同 为：1 ; 相同 为 ：0<br>将参与运算的两操作数各对应的二进制位进行异或操作，<br>即只有对应的两个二进位不相同时，结果的对应二进制位才是1，否则为0。</p></blockquote><p><strong>异或运算的特点是：如果 a^b=c，那么就有 c^b = a以及c^a=b</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">例如：表达式“21 ^ 18 ”的值是7(即二进制数111)。</div><div class="line">21：    10101</div><div class="line">18：    10010</div><div class="line">21^18:  00111</div><div class="line"></div><div class="line">假设 n = 5，m = 6 </div><div class="line">5的二进制为：101</div><div class="line">6的二进制为：110 </div><div class="line"></div><div class="line">n^=m = 5^=6   = 101 ^ 110 = 011 ,</div><div class="line">此时 n的二进制为：011 </div><div class="line"></div><div class="line">m^=n = 6^=011 = 110 ^ 011 = 101 ,</div><div class="line">此时 m的二进制为：101，也正是 5的二进制数，也就是说 m ==开始的n </div><div class="line"></div><div class="line">n^=m = 011^=5 = 011 ^ 101 = 110 ,</div><div class="line">此时 n的二进制位：110，也正是 6的二进制数，也就是说 n ==开始的m</div></pre></td></tr></table></figure><p>层次结构：A-&gt;B  B-&gt;A  A-&gt;B 正 反 正</p><h4 id="判断2的正整数幂"><a href="#判断2的正整数幂" class="headerlink" title="判断2的正整数幂"></a>判断2的正整数幂</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))&#123;</div><div class="line">        <span class="keyword">if</span>(!(n &amp; (n<span class="number">-1</span>)) &amp;&amp; n)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d为2的正整数幂\n"</span>,n);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d不是2的正整数幂\n"</span>,n);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>给定整数 n 判断 n是否为 2的正整数幂<br>表达式：(! (n &amp; (n-1)) &amp;&amp; n</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">举个例子： n = 16 = 10000，n-1 = 15 = 1111</div><div class="line">那么 ：10000 &amp; 01111 = 00000 = 0 </div><div class="line">再举个例子： n = 256 = 10000000 ,n-1 = 255 = 11111111</div><div class="line">那么：100000000 &amp; 011111111 = 000000000 = 0</div></pre></td></tr></table></figure><p>是的，如果一个数 n 是2 的正整数幂，那么n 的二进制必定为 1000…. n-1的二进制必定为 1111….<br><strong>即： n &amp; n-1 = 0  所以 (! (n &amp; (n-1)) 为 1 ; &amp;&amp; n ：判断 n为正数</strong></p><h4 id="判断奇偶性"><a href="#判断奇偶性" class="headerlink" title="判断奇偶性"></a>判断奇偶性</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))&#123;</div><div class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d是奇数\n"</span>,n);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d是偶数\n"</span>,n);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>记住：在做位运算时，位数不够的数，自动在 前面补 0</strong><br>比如：21 &amp; 1 ：10101 &amp; 00001 = 00001 = 1<br>     16 &amp; 1 ：10000 &amp; 00001 = 00000 = 0<br>事实证明：偶数的二进制的末尾 为0，奇数的二进制的末尾 为1 </p><p>十进制m 转换 n进制方法：<br> m 一直除 n，每相除一次，m就等于商，直到商为0，然后余数反排 即可。 </p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">1的二进制：1/2 =0 余1</div><div class="line">余数反排 即是 1的二进制：1 </div><div class="line"></div><div class="line">6的二进制：6/2 =3 余0</div><div class="line">          3/2 =1 余1</div><div class="line">          1/2 =0 余1 </div><div class="line">余数反排 即是 6的二进制：110</div><div class="line"></div><div class="line">15的二进制：15/2=7 余1</div><div class="line">           7/2=3 余1</div><div class="line">           3/2=1 余1</div><div class="line">           1/2=0 余1</div><div class="line">余数反排 即是 15的二进制：1111 </div><div class="line"></div><div class="line">5的二进制：5/2 =2 余1</div><div class="line">          2/2 =1 余0 </div><div class="line">          1/2 =0 余1</div><div class="line">余数反排 即是 5的二进制：101</div><div class="line"></div><div class="line">21的二进制：21/2 =10 余1</div><div class="line">           10/2 =5 余0</div><div class="line">           5/2 =2 余1</div><div class="line">           2/2 =1 余0</div><div class="line">           1/2 =0 余1</div><div class="line">余数反排 即是 21的二进制：10101</div></pre></td></tr></table></figure><h4 id="其他方面"><a href="#其他方面" class="headerlink" title="其他方面"></a>其他方面</h4><blockquote><p>(n &gt;&gt; m) &amp; 1 == (n &gt;&gt; m) | 0 == (n &gt;&gt; m) ^ 0</p><p>n &amp; ~(1 &lt;&lt; m) : 将 n的第m位数，重置为 0</p><p>n | (1 &lt;&lt; m)  : 将 n的第m位数，重置为 1</p><p>n ^ (1 &lt;&lt; m)  : 将 n的第m位数，取其相反</p></blockquote><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><hr><p>本文会同步更新在以下地方(已链接本人主页),欢迎你在常逛的网站中关注我。 </p><ul><li><a href="https://juejin.im/user/599b6d255188252447222dfd" target="_blank" rel="external nofollow">掘金</a></li><li><a href="http://www.jianshu.com/users/2fb2fd6fda89/timeline" target="_blank" rel="external nofollow">简书</a></li><li><a href="http://www.cnblogs.com/jinma" target="_blank" rel="external nofollow">博客园</a>  </li><li><a href="http://blog.csdn.net/Acceptee" target="_blank" rel="external nofollow">CSDN</a></li><li><a href="https://segmentfault.com/u/majin" target="_blank" rel="external nofollow">segmentfault</a></li></ul><p>转载本站文章请注明作者和出处  <a href="http://tomotoes.com">tomotoes.com</a>，请勿用于任何商业用途。<br>深入Web全栈各项技术，坚持原创，文章更新虽不定，但只为质量而生。<br>建议收藏这个坏掉的番茄  <a href="http://tomotoes.com">tomotoes.com</a> ，愿陪你一起在全栈的道路上努力前行！</p>]]></content>
    
    <summary type="html">
    
      位运算，c语言
    
    </summary>
    
      <category term="底端" scheme="http://tomotoes.com/blog/categories/%E5%BA%95%E7%AB%AF/"/>
    
    
      <category term="底端" scheme="http://tomotoes.com/blog/tags/%E5%BA%95%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>CCUT告白墙系统</title>
    <link href="http://tomotoes.com/blog//posts/41f67d73/"/>
    <id>http://tomotoes.com/blog//posts/41f67d73/</id>
    <published>2018-01-21T04:38:37.000Z</published>
    <updated>2018-01-26T09:46:35.177Z</updated>
    
    <content type="html"><![CDATA[<p>233，这应该是我的处女项目了。<br><a id="more"></a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>大一时，做的 C 语言的实训项目 <img class="github-emoji" title="baby" alt="baby" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f476.png?v7" height="20" width="20">，拿出来怀念一下~</p><h3 id="实训报告"><a href="#实训报告" class="headerlink" title="实训报告"></a>实训报告</h3><blockquote><p>实训报告如下：</p></blockquote><h4 id="实训计划"><a href="#实训计划" class="headerlink" title="实训计划"></a>实训计划</h4><p>  &nbsp;&nbsp;&nbsp;&nbsp;起初做系统程序，本着一个不想太现实的心，结合着偶然的思路<code>CCUT表白墙</code>犹然而来。  </p><p>  &nbsp;&nbsp;&nbsp;&nbsp;原本想这个程序，大致应该很简单，毕竟只有初等函数，连个指针都用不着，不过慢慢发现，它并不是这样，也差点让我濒临放弃。像一些<code>被告白人 告白人 告白宣言</code>根本无法把他们单独读出来，以此修改被告白人后的排序，青春进行曲名字重复，排序名字重复，以及修改密码的很多 Bug ，很让人焦头烂额。</p><p>  &nbsp;&nbsp;&nbsp;&nbsp;虽然做系统只花了五天时间，但在第二天晚上，各种 Bug 以及各种功能达不到目的，让我不得不放弃，于是第三天，不甘心的我选择重做。最终我发现了关键的问题：再存入文件中，手动存空格，会造成错误，文件只会保存空格前面的信息。</p><p>  &nbsp;&nbsp;&nbsp;&nbsp;嗯，我选择了这种格式：<code>fprintf（fp，“%s”，被告白人名字（告白人名字，告白信息）</code>  并且，我根据<code>（），</code>标识符以及一些小手段，解决了很多问题。然后至于修改告白信息，删除信息信息，我是先定位 要进行操作信息 然后，把他们全换成<code>*</code>号，最后进行单个字符存入文件不存入<code>*</code>号，修改的信息单独存入。</p><p>  &nbsp;&nbsp;&nbsp;&nbsp;所以以至于，这个程序的含金量不高，本想做个纯链表的系统程序，但慢慢做着做着，就发现，连指针都没用上，嗯，是这样。</p><p>  &nbsp;&nbsp;&nbsp;&nbsp;您可以有疑问，我为什么不用 fseek ，客观来说，每个人登陆系统，根本无法知道上一个人在文件中 存进了多少长度，所以我不想这样做。</p><h4 id="功能总结"><a href="#功能总结" class="headerlink" title="功能总结"></a>功能总结</h4><p>  &nbsp;&nbsp;&nbsp;&nbsp;说实话，有些功能，话语很幼稚，但某些环境要求它们的出现，也让您见笑了。</p><ol><li><p>ASCII 码里面 <code>3</code> 就是一个字符小爱心，这个大心,三部分完成：</p><ol><li>上三行，左部分，然后右部分。</li><li>下三行，左部分然后右部分。</li><li>最后一个心。</li></ol></li><li><p>登陆界面，第一步，判断修改密码人的名单中是否有号主名字，如果有先是到着遍历 把号主名字后的最后一次改的密码那出来，进行比较，有三次机会。</p><p>所谓的主菜单，普通的printf构成。</p></li><li><p>马上告白：把被告白人的姓名单独存到一个文件，用于排序，2.把被告白人名字（告白人名字，告白信息），存到一个文件，用于以下功能。</p></li><li><p>修改密码：客观上来讲，这个功能是肯定要有的，把修改人姓名，与新密码存入文件，修改一次存一次，读取时倒着遍历读取。</p></li><li><p>青春进行曲：相当于一个查看功能了，把每一对接受交往的情侣保存到一个文件，先是利用读取字符方式判断文件是否为空，然后把文件指针一定要调回开头，如果用就分拆文件中的字符串，利用二维数组与标识符，下标值为奇数存入甲的名字，为偶数就是乙的名字，然后在把重复的数组筛选出去，然后再遍历输出。</p></li><li><p>男神女神榜：嗯，就是排序了。先是以告白次数进行对比，如果相等就利用名字的 ASCII 码进行对比。排序方法：结构体加自定义<code>sort</code>函数。先是把被告白人的文件读取出来，再判断文件是否为空，就用功能三的办法，如果不为空，分拆数组，如果有重复，告白次数就自加，然后把重复的名字筛选出去，不保存进结构体，然后排序再遍历输出。</p></li><li><p>查看邮箱：先是把被告白人的文件读到内存中，判断有多少个号主名字，也就是收到几条告白信息，如果告白信息存在，就读取，告白人，被告白人，告白信息文件，然后分拆数组，利用二维数组与标识符，下标值为偶数存入告白人名字，为奇数就是告白信息，其中如果有人撤回，也会被判断出来（嗯，系统性质），就是光有你的名字，然后，后面的括号中啥也没有，利用比较，撤回有两种情况，我就不一一说</p></li><li><p>撤回消息：把告白信息文件读到内存，定位到号主名字（也就是告白人名字），把号主名字，告白信息全赋值成<code>*</code>号，然后新建一个文件，把不等于<code>*</code>号的存储进去，然后把原文件删除，把新文件换成原文件的名字。</p></li><li><p>修改消息：刚开始做这个功能，一直存在个 Bug ，只能修改成比原来字符串长度短的，然后换了一种暴力的办法，先输入要修改被告白人的名字与修改后的告白信息，然后定位到号主名字，把前后信息换成<code>*</code>号，然后把不等于星号的存到新文件，然后再单独把修改的被告白人的名字信息，按照特定格式存储到文件，并且，这个时候，男神女神榜也要做相应的变化，把原来输出的换成新修改的，还是这种办法，然后存到新文件，把原文件删除，把新文件换成原文件的名字。</p></li><li><p>注销账号：也是客观存在的东西，我一直假如这个系统是个公共机器，必须有下机的功能。因为一些特定的输入是用结构体来完成，然后只要结构体的下标值不同，就可以实现不同的人，不同的信息，来实现其功能，所以功能八，很简单，也很重要，其下标值也必须自加。</p></li><li><p>退出系统：这个没什么好说的，直接 exit。</p></li><li><p>嗯，我又新加了一个功能，告白动态，以前一直懵逼，把这么重要的功能忘了…这个就很 easy 了，两个文件：1.存接受人，转告的话2.不接收的人，然后再判断。</p></li><li><p>另外，又新加了一个爱情宣言功能,然后读取时，二维字符串是以三一个循环，进行存取，告白人，被告白人，爱情宣言。</p><p>嗯，这就是我的系统程序。</p><h4 id="项目界面"><a href="#项目界面" class="headerlink" title="项目界面"></a>项目界面</h4><p><img src="http://oz707qszw.bkt.clouddn.com/images/ccut表白墙1.png" alt="ccut表白墙"></p><p><img src="http://oz707qszw.bkt.clouddn.com/images/ccut表白墙2.png" alt="ccut表白墙"></p><p><img src="http://oz707qszw.bkt.clouddn.com/images/ccut表白墙3.png" alt="ccut表白墙"></p><p><img src="http://oz707qszw.bkt.clouddn.com/images/ccut表白墙4.png" alt="ccut表白墙"></p><p><img src="http://oz707qszw.bkt.clouddn.com/images/ccut表白墙5.png" alt="ccut表白墙"></p><p><img src="http://oz707qszw.bkt.clouddn.com/images/ccut表白墙6.png" alt="ccut表白墙"></p><p><img src="http://oz707qszw.bkt.clouddn.com/images/ccut表白墙7.png" alt="ccut表白墙"></p><p><img src="http://oz707qszw.bkt.clouddn.com/images/ccut表白墙8.png" alt="ccut表白墙"></p><p><img src="http://oz707qszw.bkt.clouddn.com/images/ccut表白墙9.png" alt="ccut表白墙"></p><p><img src="http://oz707qszw.bkt.clouddn.com/images/ccut表白墙10.png" alt="ccut表白墙"></p><p><img src="http://oz707qszw.bkt.clouddn.com/images/ccut表白墙11.png" alt="ccut表白墙"></p><h3 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h3><p>这个项目足足有 1245 行，真是佩服当时的自己 <img class="github-emoji" title="blossom" alt="blossom" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f33c.png?v7" height="20" width="20"></p></li></ol><h4 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h4><p><a id="codeHide" class="alone button button-3d button-primary button-rounded">点击显/隐源文件</a> </p><p><div id="sourceCode" style="display:none"><br><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;conio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> I 8</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> R 150</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 150</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">person</span> &#123;</span></div><div class="line">  <span class="keyword">char</span> Name1[maxn];<span class="comment">//号主名字  修改密码人的名字</span></div><div class="line">  <span class="keyword">char</span> Name2[maxn];<span class="comment">//被告白人名字</span></div><div class="line">  <span class="keyword">char</span> Password1[maxn];<span class="comment">//修改后的密码</span></div><div class="line">  <span class="keyword">char</span> Information[maxn];<span class="comment">//告白宣言</span></div><div class="line">&#125; love[maxn];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">so</span> &#123;</span></div><div class="line">  <span class="keyword">int</span> num;</div><div class="line">  <span class="keyword">char</span> Name3[maxn];</div><div class="line">&#125; stu[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(so x,so y)</span> </span>&#123;</div><div class="line"> <span class="keyword">if</span>(x.num!=y.num)</div><div class="line"> <span class="keyword">return</span> x.num&gt;y.num;</div><div class="line"> <span class="keyword">else</span></div><div class="line"> <span class="keyword">return</span> x.Name3&gt;y.Name3;</div><div class="line">&#125;</div><div class="line"></div><div class="line">FILE *w1,*w2,*w3,*w4,*w5;</div><div class="line"><span class="comment">//w1:保存号主的名字</span></div><div class="line"><span class="comment">//w2:保存被告人的名字与告白宣言</span></div><div class="line"><span class="comment">//w3,4:保存被告白人的名字用于排序功能</span></div><div class="line"><span class="comment">//w5:在一起的名单</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> n,x,i,len1,len2,num,j,l;</div><div class="line"><span class="keyword">int</span> x1=<span class="number">0</span>,x2=<span class="number">0</span>,x3=<span class="number">0</span>,x4=<span class="number">0</span>,x5=<span class="number">0</span>;</div><div class="line"><span class="keyword">char</span> ch;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">start1</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">start2</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">start3</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">end1</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f1</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f2</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f3</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f4</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f5</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f6</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f7</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f8</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f9</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f0</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">start1</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="keyword">int</span>  i, j, k, l, m;</div><div class="line"> <span class="keyword">char</span> c=<span class="number">3</span>;<span class="comment">//ASCII码里面 3 就是一个字符小爱心</span></div><div class="line"> <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=<span class="number">2</span>; i++)<span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line"> system(<span class="string">"color f4"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\t\t\t       欢迎来到CCUT表白墙\n\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\t\t\t\t     致青春\n\n"</span>);</div><div class="line"> <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=<span class="number">3</span>; i++) &#123;<span class="comment">//前3行中间有空隙分开来写</span></div><div class="line"> <span class="keyword">for</span> (j=<span class="number">1</span>; j&lt;=<span class="number">32</span><span class="number">-2</span>*i; j++)<span class="built_in">printf</span>(<span class="string">" "</span>);<span class="comment">//左边的空格，每下一行左边的空格 比上一行少2个 //8*n-2*i</span></div><div class="line"> <span class="keyword">for</span> (k=<span class="number">1</span>; k&lt;=<span class="number">4</span>*i+<span class="number">1</span>; k++)<span class="built_in">printf</span>(<span class="string">"%c"</span>, c);<span class="comment">//输出左半部分字符小爱心</span></div><div class="line"> <span class="keyword">for</span> (l=<span class="number">1</span>; l&lt;=<span class="number">13</span><span class="number">-4</span>*i; l++)<span class="built_in">printf</span>(<span class="string">" "</span>);<span class="comment">//中间的空格，每下一行的空格比上 一行少4个</span></div><div class="line"> <span class="keyword">for</span> (m=<span class="number">1</span>; m&lt;=<span class="number">4</span>*i+<span class="number">1</span>; m++)<span class="built_in">printf</span>(<span class="string">"%c"</span>, c);<span class="comment">//输出右半部分字符小爱心</span></div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n"</span>);<span class="comment">//每一行输出完毕换行</span></div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=<span class="number">3</span>; i++) &#123;<span class="comment">//下3行中间没有空格</span></div><div class="line"> <span class="keyword">for</span> (j=<span class="number">1</span>; j&lt;=<span class="number">24</span>+<span class="number">1</span>; j++)<span class="built_in">printf</span>(<span class="string">" "</span>);<span class="comment">//左边的空格 //8*(n-1)+1</span></div><div class="line"> <span class="keyword">for</span> (k=<span class="number">1</span>; k&lt;=<span class="number">29</span>; k++)<span class="built_in">printf</span>(<span class="string">"%c"</span>, c);<span class="comment">//输出字符小爱心</span></div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n"</span>);<span class="comment">//每一行输出完毕换行</span></div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="keyword">for</span> (i=<span class="number">7</span>; i&gt;=<span class="number">1</span>; i--) &#123;<span class="comment">//下7行</span></div><div class="line"> <span class="keyword">for</span> (j=<span class="number">1</span>; j&lt;=<span class="number">40</span><span class="number">-2</span>*i; j++)<span class="built_in">printf</span>(<span class="string">" "</span>);<span class="comment">//左边的空格，每下一行左边的空格 比上一行少2个//8*(n+1)-2*i</span></div><div class="line"> <span class="keyword">for</span> (k=<span class="number">1</span>; k&lt;=<span class="number">4</span>*i<span class="number">-1</span>; k++)<span class="built_in">printf</span>(<span class="string">"%c"</span>, c);<span class="comment">//每下一行的字符小爱心比上一行少4个（这个循环是i--）</span></div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n"</span>);<span class="comment">//每一行输出完毕换行</span></div><div class="line"> &#125;</div><div class="line"> <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=<span class="number">39</span>; i++)<span class="built_in">printf</span>(<span class="string">" "</span>);<span class="comment">//最后一行左边的空格</span></div><div class="line"> <span class="built_in">printf</span>(<span class="string">"%c\n"</span>, c);<span class="comment">//最后一个字符小爱心</span></div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\n\n"</span>);<span class="comment">//最后空出5行</span></div><div class="line"> <span class="built_in">printf</span>(<span class="string">"  *请摁任意键进入界面"</span>);</div><div class="line"> getch();</div><div class="line"> start2();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">start2</span><span class="params">()</span> </span>&#123;</div><div class="line"> system(<span class="string">"cls"</span>);</div><div class="line">  system(<span class="string">"color 1B"</span>);</div><div class="line">   <span class="built_in">printf</span>(<span class="string">"\n\n\n"</span>);</div><div class="line">   <span class="built_in">printf</span>(<span class="string">"\t                ----------------------------------\n"</span>);</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"\t                |                                |\n"</span>);</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"\t                |                                |\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\t                |       欢迎进入CCUT表白墙       |\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\t                |                                |\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\t                |         为您传递浓浓的爱       |\n"</span>);</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"\t                |                                |\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\t                ----------------------------------\n"</span>);</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"\t\t       (初始化密码为abcd,用户名长度应大于2)\n\n"</span>);</div><div class="line">   <span class="built_in">printf</span>(<span class="string">"\n       请输入您的用户名:"</span>);</div><div class="line">   w1=fopen(<span class="string">"d://text1.txt"</span>,<span class="string">"a+"</span>);</div><div class="line">   w4=fopen(<span class="string">"d://text4.txt"</span>,<span class="string">"a+"</span>);</div><div class="line">  <span class="keyword">char</span> s[maxn];</div><div class="line">   <span class="built_in">fscanf</span>(w4,<span class="string">"%s"</span>,s); </div><div class="line">  len1=<span class="built_in">strlen</span>(s);</div><div class="line"> <span class="keyword">char</span> k[maxn],v[maxn];</div><div class="line"> <span class="built_in">scanf</span>(<span class="string">"%s%*c"</span>,love[x1].Name1);</div><div class="line"> <span class="built_in">strcpy</span>(k,love[x1].Name1);</div><div class="line"> <span class="keyword">if</span>(<span class="built_in">strlen</span>(k)&gt;=<span class="number">3</span>) &#123;</div><div class="line"> <span class="keyword">int</span> c,u;</div><div class="line"> c=u=<span class="number">0</span>;</div><div class="line"> <span class="keyword">bool</span> o=<span class="number">0</span>;</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=len1<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--) &#123;</div><div class="line"> <span class="keyword">if</span>(s[i]==<span class="string">'('</span>) &#123;</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;len1,s[j]!=<span class="string">'~'</span>; j++) &#123; <span class="comment">//判断号主是否改过密码，并读取后面的密码</span></div><div class="line"> <span class="keyword">if</span>(s[j]==k[u]) &#123;</div><div class="line"> u++;</div><div class="line"> <span class="keyword">if</span>(u==<span class="built_in">strlen</span>(k)) &#123;</div><div class="line"> o=<span class="number">1</span>;</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> l=j+<span class="number">2</span>; l&lt;len1,s[l]!=<span class="string">')'</span>; l++) &#123;</div><div class="line"> v[c]=s[l];</div><div class="line"> c++;</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">4</span>; i++) &#123;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n       请输入您的密码:"</span>);</div><div class="line"> <span class="keyword">int</span> e=<span class="number">0</span>;</div><div class="line"> <span class="keyword">char</span> c;</div><div class="line"> <span class="keyword">char</span> password[maxn]=<span class="string">"\0"</span>;</div><div class="line"> <span class="keyword">while</span>((c=getch())!=<span class="number">13</span>&amp;&amp;e&lt;<span class="number">100</span>) &#123;</div><div class="line"> <span class="keyword">if</span>(c==<span class="number">8</span>) &#123; <span class="comment">//8为退格</span></div><div class="line"> <span class="keyword">if</span>(e&gt;<span class="number">0</span>) &#123;</div><div class="line"> password[e--]=<span class="string">'\0'</span>;<span class="comment">//删除最后一个，并且计数器减1</span></div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\b \b"</span>);<span class="comment">//退格</span></div><div class="line"> &#125;</div><div class="line"> &#125; <span class="keyword">else</span> &#123;</div><div class="line"> password[e++]=c;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"*"</span>);</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> password[e]=<span class="string">'\0'</span>;</div><div class="line"> <span class="keyword">if</span>(o) &#123;</div><div class="line"> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(password,v)==<span class="number">0</span>) &#123;</div><div class="line"> <span class="keyword">break</span>;</div><div class="line"> &#125; <span class="keyword">else</span> &#123;</div><div class="line"> <span class="keyword">if</span> (i &lt; <span class="number">3</span>) &#123;</div><div class="line"> system(<span class="string">"cls"</span>);</div><div class="line"> system(<span class="string">"color 1B"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n       密码错误，请您重新输入(初始化密码为abcde)\n"</span>);</div><div class="line"> &#125; <span class="keyword">else</span> &#123;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\n       连续3次输错密码，退出系统。"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n       您已连续3次将密码输错，系统将退出!"</span>);</div><div class="line"> <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> &#125; <span class="keyword">else</span> &#123;</div><div class="line"> <span class="keyword">if</span>((<span class="built_in">strcmp</span>(password,<span class="string">"abcd"</span>)==<span class="number">0</span>)&amp;&amp;(o==<span class="number">0</span>)) &#123;</div><div class="line"> <span class="keyword">break</span>;</div><div class="line"> &#125; <span class="keyword">else</span> &#123;</div><div class="line"> <span class="keyword">if</span> (i &lt; <span class="number">3</span>) &#123;</div><div class="line"> system(<span class="string">"cls"</span>);</div><div class="line"> system(<span class="string">"color 1B"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n       密码错误，请您重新输入(初始化密码为abcde)\n"</span>);</div><div class="line"> &#125; <span class="keyword">else</span> &#123;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\n       连续3次输错密码，退出系统。"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n       您已连续3次将密码输错，系统将退出!"</span>);</div><div class="line"> <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="built_in">fprintf</span>(w1,<span class="string">"%s%*c"</span>,love[x1].Name1);</div><div class="line"> fclose(w1);</div><div class="line"> fclose(w4);</div><div class="line"> &#125; <span class="keyword">else</span> &#123;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\t抱歉，用户名长度应大于二个字节，请您重新登陆！\n"</span>);</div><div class="line"> <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line"> &#125;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\n\n\n\n*密码正确,请摁任意键进入界面"</span>);</div><div class="line"> getch();</div><div class="line"> start3();</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">start3</span><span class="params">()</span> </span>&#123;</div><div class="line"> system(<span class="string">"cls"</span>);</div><div class="line"> system(<span class="string">"color B0"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\t\t    /***************************************\\\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\t\t    *                                       *\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\t\t    *        \\  青春无悔|大胆说爱 /         *\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\t\t    *         \\------------------/          *\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\t\t    *                                       *\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\t\t    *              1.马上告白               *\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\t\t    *              2.修改密码               *\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\t\t    *              3.青春进行曲             *\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\t\t    *              4.女神男神榜             *\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\t\t    *              5.查看邮箱               *\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\t\t    *              6.告白动态               *\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\t\t    *              7.修改信息               *\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\t\t    *              8.撤回信息               *\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\t\t    *              9.脱单秘籍               *\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\t\t    *              0.注销或退出             *\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\t\t    *                                       *\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\t\t    \\***************************************/\n\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\n请输入选择项(1-9):"</span>);</div><div class="line"> <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)) &#123;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\n\n"</span>);</div><div class="line"> <span class="keyword">if</span>(n&gt;=<span class="number">0</span>&amp;&amp;n&lt;=<span class="number">9</span>) &#123;</div><div class="line"> <span class="keyword">switch</span>(n) &#123;</div><div class="line"> <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line"> f1();</div><div class="line"> <span class="keyword">break</span>;</div><div class="line"> <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line"> f2();</div><div class="line"> <span class="keyword">break</span>;</div><div class="line"> <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line"> f3();</div><div class="line"> <span class="keyword">break</span>;</div><div class="line"> <span class="keyword">case</span> <span class="number">4</span>:</div><div class="line"> f4();</div><div class="line"> <span class="keyword">break</span>;</div><div class="line"> <span class="keyword">case</span> <span class="number">5</span>:</div><div class="line"> f5();</div><div class="line"> <span class="keyword">break</span>;</div><div class="line"> <span class="keyword">case</span> <span class="number">6</span>:</div><div class="line"> f6();</div><div class="line"> <span class="keyword">break</span>;</div><div class="line"> <span class="keyword">case</span> <span class="number">7</span>:</div><div class="line"> f7();</div><div class="line"> <span class="keyword">break</span>;</div><div class="line"> <span class="keyword">case</span> <span class="number">8</span>:</div><div class="line"> f8();</div><div class="line"> <span class="keyword">break</span>;</div><div class="line"> <span class="keyword">case</span> <span class="number">9</span>:</div><div class="line"> f9();</div><div class="line"> <span class="keyword">break</span>;</div><div class="line"> <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line"> f0();</div><div class="line"> <span class="keyword">break</span>;</div><div class="line"> &#125;</div><div class="line"> &#125; <span class="keyword">else</span> &#123;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"***********************************************************************\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"*                                                                       *\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"*                              输入错误!                                *\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"*                             请重新输入！                              *\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"*                                                                       *\n"</span>);</div><div class="line"> <span class="built_in">printf</span> (<span class="string">"***********************************************************************\n "</span>);</div><div class="line"> <span class="keyword">break</span>;</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"> start1();</div><div class="line"> <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f1</span><span class="params">()</span> </span>&#123;</div><div class="line"> system(<span class="string">"cls"</span>);</div><div class="line"> system(<span class="string">"color ce"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\t\t     ***************************************\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\t\t     ---------------------------------------\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\t\t\t          想大声说爱你\n\n\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\t\t     请输入您要告白的对象 ："</span>);</div><div class="line"> w2=fopen(<span class="string">"d://text2.txt"</span>,<span class="string">"a+"</span>);</div><div class="line"> w3=fopen(<span class="string">"d://text3.txt"</span>,<span class="string">"a+"</span>);</div><div class="line"> <span class="built_in">scanf</span>(<span class="string">"%s"</span>,love[x2].Name2);</div><div class="line"> <span class="keyword">if</span>(<span class="built_in">strlen</span>(love[x2].Name2)&lt;=<span class="number">2</span>) &#123;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\t\t      您输入的名字有误，请重新输入！\n"</span>);</div><div class="line"> &#125; <span class="keyword">else</span> &#123;</div><div class="line"> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(love[x2].Name2,love[x1].Name1)==<span class="number">0</span>) &#123;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\t\t     自己不能向自己告白。\n"</span>);</div><div class="line"> &#125; <span class="keyword">else</span> &#123;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\t\t     请输入您的告白信息 ："</span>);</div><div class="line"> <span class="built_in">scanf</span>(<span class="string">"%s%*c"</span>,love[x2].Information);</div><div class="line"> <span class="keyword">char</span> ch;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\t\t     您确定告白吗？\n\t\t\t1.确定\n\t\t\t2.返回\n\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\t\t     请输入您的选择："</span>);</div><div class="line"> <span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;ch);</div><div class="line"> <span class="keyword">if</span>(ch==<span class="string">'1'</span>) &#123;</div><div class="line"> <span class="built_in">fprintf</span>(w2,<span class="string">"%s(%s~%s)"</span>,love[x2].Name2,love[x1].Name1,love[x2] .Information);<span class="comment">//把被告白人的名字信息 存储到w2</span></div><div class="line"> <span class="built_in">fprintf</span>(w3,<span class="string">"(%s)"</span>,love[x2].Name2);<span class="comment">//把告白人的名字单存储到w3</span></div><div class="line"> fclose(w2);</div><div class="line"> fclose(w3);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\t\t     爱神丘比特正在为您传递信息，祝您成功！"</span>);</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">if</span>(ch==<span class="string">'2'</span>) &#123;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\t\t     初见倾心，再见痴心。\n"</span>);</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">if</span>(ch!=<span class="string">'1'</span>&amp;&amp;ch!=<span class="string">'2'</span>) &#123;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\t\t      您输入有误，请您重新输入！\n"</span>);</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\n*请摁任意键返回主菜单"</span>);</div><div class="line"> getch();</div><div class="line"> start3();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f2</span> <span class="params">()</span> </span>&#123;</div><div class="line"> system(<span class="string">"cls"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</div><div class="line"> system(<span class="string">"color 0a"</span>);</div><div class="line"> w4=fopen(<span class="string">"d://text4.txt"</span>,<span class="string">"a+"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\t\t\t请输入新密码："</span>);</div><div class="line"> <span class="built_in">scanf</span>(<span class="string">"%s"</span>,love[x3].Password1);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\n\n\n\n\n\n\n\n\t\t\t确定修改密码？\n\t\t\t1.是\n\t\t\t2.否\n"</span>);</div><div class="line"> getchar();</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\t\t\t请输入您的选择："</span>);</div><div class="line"> <span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;ch);</div><div class="line"> <span class="keyword">if</span>(ch==<span class="string">'1'</span>) &#123;</div><div class="line"> <span class="built_in">fprintf</span>(w4,<span class="string">"(%s~%s)"</span>,love[x3].Name1,love[x1].Password1);<span class="comment">//修改密码人的名单</span></div><div class="line"> <span class="keyword">if</span>(!fclose(w4))<span class="built_in">printf</span>(<span class="string">"\n\t\t\t修改成功！\n"</span>);</div><div class="line"> <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"\n\t\t\t密码修改失败\n"</span>);</div><div class="line"> &#125; <span class="keyword">else</span> &#123;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\t\t\t暂不修改密码！\n"</span>);</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">if</span>(ch==<span class="string">'1'</span>) &#123;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\n\t\t   *请摁任意键重新登录 "</span>);</div><div class="line"> getch();</div><div class="line"> start2();</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">if</span>(ch==<span class="string">'2'</span>) &#123;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\n\t\t\t*请摁任意键返回主菜单"</span>);</div><div class="line"> getch();</div><div class="line"> start3();</div><div class="line"> &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f3</span><span class="params">()</span> </span>&#123;</div><div class="line"> system(<span class="string">"cls"</span>);</div><div class="line"> system(<span class="string">"color 1c"</span>);</div><div class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">80</span>; i++) &#123;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"%c"</span>,<span class="number">3</span>);</div><div class="line"> &#125;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</div><div class="line"> FILE *fp;</div><div class="line"> fp=fopen(<span class="string">"d://text5.txt"</span>,<span class="string">"r+"</span>);</div><div class="line"> <span class="keyword">char</span> ch;</div><div class="line"> ch=fgetc(fp);</div><div class="line"> <span class="keyword">char</span> s[maxn],p[maxn][maxn];</div><div class="line"> rewind(fp);</div><div class="line"> <span class="built_in">fscanf</span>(fp,<span class="string">"%s"</span>,s);</div><div class="line"> <span class="keyword">if</span>(ch==EOF) &#123;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"      理查 致 朱丽叶：“如果我不向你求婚，我会后悔一辈子，因为你是我的惟一。” \n\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"      你的朱丽叶在哪里呢？去寻她吧!\n"</span>);</div><div class="line"> &#125; <span class="keyword">else</span> &#123;</div><div class="line"> <span class="keyword">int</span> r,t,i;</div><div class="line"> r=t=<span class="number">0</span>;</div><div class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="built_in">strlen</span>(s); i++) &#123;</div><div class="line"> <span class="keyword">if</span>(s[i]==<span class="string">'('</span>) &#123;</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;<span class="built_in">strlen</span>(s)&amp;&amp;s[j]!=<span class="string">'~'</span>; j++) &#123;</div><div class="line"> p[r][t]=s[j];</div><div class="line"> t++;</div><div class="line"> &#125;</div><div class="line"> r++;</div><div class="line"> t=<span class="number">0</span>;</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">if</span>(s[i]==<span class="string">'~'</span>) &#123;</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;<span class="built_in">strlen</span>(s)&amp;&amp;s[j]!=<span class="string">')'</span>; j++) &#123;</div><div class="line"> p[r][t]=s[j];</div><div class="line"> t++;</div><div class="line"> &#125;</div><div class="line"> r++;</div><div class="line"> t=<span class="number">0</span>;</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">if</span>(s[i]==<span class="string">')'</span>) &#123;</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;<span class="built_in">strlen</span>(s)&amp;&amp;s[j]!=<span class="string">']'</span>; j++) &#123;</div><div class="line"> p[r][t]=s[j];</div><div class="line"> t++;</div><div class="line"> &#125;</div><div class="line"> r++;</div><div class="line"> t=<span class="number">0</span>;</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">int</span> y=<span class="number">0</span>;</div><div class="line"> <span class="keyword">bool</span> o=<span class="number">1</span>;</div><div class="line"> <span class="keyword">char</span> v[maxn][maxn];</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;r; i+=<span class="number">3</span>,o=<span class="number">1</span>) &#123;</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">0</span>; l&lt;i; l+=<span class="number">3</span>) &#123;</div><div class="line"> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(p[i],p[l])==<span class="number">0</span>) &#123;</div><div class="line"> o=<span class="number">0</span>;</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">if</span>(o) &#123;</div><div class="line"> <span class="built_in">strcpy</span>(v[y],p[i]);</div><div class="line"> <span class="built_in">strcpy</span>(v[y+<span class="number">1</span>],p[i+<span class="number">1</span>]);</div><div class="line"> <span class="built_in">strcpy</span>(v[y+<span class="number">2</span>],p[i+<span class="number">2</span>]);</div><div class="line"> y+=<span class="number">3</span>;</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">int</span> k=<span class="number">1</span>;</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;y; i+=<span class="number">3</span>,k++) &#123;</div><div class="line"> <span class="keyword">if</span>(k%<span class="number">2</span>==<span class="number">0</span>) &#123;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\t\t\t%s与%s正在热恋，他们的爱情宣言是：%s\n\n"</span>,p[i],p[i+<span class="number">1</span>],p[i +<span class="number">2</span>]);</div><div class="line"> &#125; <span class="keyword">else</span> &#123;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\t\t\t%s与%s爱意浓浓，他们的爱情宣言是：%s\n\n"</span>,p[i],p[i+<span class="number">1</span>],p[i +<span class="number">2</span>]);</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\t\t\t让我们祝他们幸福！\n"</span>);</div><div class="line"> &#125;</div><div class="line"> fclose(fp);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\n\n\n\n\n\n\n\n\n *请摁任意键返回主菜单"</span>);</div><div class="line"> getch();</div><div class="line"> start3();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f4</span><span class="params">()</span> </span>&#123;</div><div class="line"> system(<span class="string">"cls"</span>);</div><div class="line"> system(<span class="string">"color 5C"</span>);</div><div class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">80</span>; i++) &#123;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"%c"</span>,<span class="number">3</span>);</div><div class="line"> &#125;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\t\t                                        \n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\t\t          \\   女神VS男神榜   /         \n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\t\t           \\----------------/          \n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</div><div class="line"> w3=fopen(<span class="string">"d://text3.txt"</span>,<span class="string">"r+"</span>);</div><div class="line"> <span class="keyword">char</span> ch;</div><div class="line"> ch=getc(w3);</div><div class="line"> <span class="keyword">int</span> r,t;</div><div class="line"> r=t=<span class="number">0</span>;</div><div class="line"> rewind(w3);</div><div class="line"> <span class="keyword">char</span> s[maxn],f[maxn][maxn];</div><div class="line"> <span class="built_in">fscanf</span>(w3,<span class="string">"%s"</span>,s);</div><div class="line"> <span class="keyword">if</span>(ch==EOF) &#123;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\t\t     暂无人表白，快去让你女神或男神上榜吧！\n\n"</span>);</div><div class="line"> &#125; <span class="keyword">else</span> &#123;</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">strlen</span>(s); i++) &#123;</div><div class="line"> <span class="keyword">if</span>(s[i]==<span class="string">'('</span>) &#123;</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;<span class="built_in">strlen</span>(s)&amp;&amp;s[j]!=<span class="string">')'</span>; j++) &#123;</div><div class="line"> f[r][t]=s[j];</div><div class="line"> t++;</div><div class="line"> &#125;</div><div class="line"> r++;</div><div class="line"> t=<span class="number">0</span>;</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">int</span> num,o,e;</div><div class="line"> o=num=<span class="number">1</span>;</div><div class="line"> e=<span class="number">0</span>;</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;r; i++,o=<span class="number">1</span>) &#123; <span class="comment">//有问题:二维字符串 包含名字，判断每个名字的重复次数</span></div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">0</span>; l&lt;i; l++) &#123;</div><div class="line"> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(f[l],f[i])==<span class="number">0</span>) &#123;</div><div class="line"> o=<span class="number">0</span>;</div><div class="line"> <span class="keyword">break</span>;</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">if</span>(o) &#123;</div><div class="line"> num=<span class="number">1</span>;</div><div class="line"> <span class="built_in">strcpy</span>(stu[e].Name3,f[i]);</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;r; j++) &#123;</div><div class="line"> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(f[i],f[j])==<span class="number">0</span>) &#123;</div><div class="line"> num++;</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> stu[e].num=num;</div><div class="line"> e++;</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> sort(stu,stu+e,cmp);</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;e; i++) &#123;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\t\tNo.%d\t  姓名:%s    被告白次数：%d\n"</span>,i+<span class="number">1</span>,stu[i].Name3,stu[i] .num);</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> fclose(w3);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n *请摁任意键返回主菜单"</span>);</div><div class="line"> getch();</div><div class="line"> start3();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f5</span><span class="params">()</span> </span>&#123;</div><div class="line"> system(<span class="string">"cls"</span>);<span class="comment">//为什么告白邮箱没有筛选重复名字，因为很可能有这种情况，一个人疯狂追求一个 人，一直给他发...</span></div><div class="line"> system(<span class="string">"color E0"</span>);</div><div class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">80</span>; i++) &#123;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"%c"</span>,<span class="number">4</span>);</div><div class="line"> &#125;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</div><div class="line"> FILE *fp,*fg;</div><div class="line"> <span class="keyword">int</span> i,j,l=<span class="number">0</span>,num=<span class="number">0</span>;</div><div class="line"> <span class="keyword">bool</span> flag=<span class="number">0</span>;</div><div class="line"> <span class="keyword">char</span> s[maxn],h[maxn],f[maxn*<span class="number">2</span>],say[maxn];</div><div class="line"> fp=fopen(<span class="string">"d://text3.txt"</span>,<span class="string">"r+"</span>);</div><div class="line"> fg=fopen(<span class="string">"d://text2.txt"</span>,<span class="string">"r+"</span>);</div><div class="line"> w5=fopen(<span class="string">"d://text5.txt"</span>,<span class="string">"a+"</span>);</div><div class="line"> <span class="built_in">fscanf</span>(fp,<span class="string">"%s"</span>,s);</div><div class="line"> <span class="built_in">fscanf</span>(fg,<span class="string">"%s"</span>,f);</div><div class="line"> <span class="built_in">strcpy</span>(h,love[x1].Name1);</div><div class="line"> <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;<span class="built_in">strlen</span>(s); j++) &#123;</div><div class="line"> <span class="keyword">if</span>(s[j]==h[l]) &#123;</div><div class="line"> l++;</div><div class="line"> <span class="keyword">if</span>(l==<span class="built_in">strlen</span>(h)&amp;&amp;s[j+<span class="number">1</span>]==<span class="string">')'</span>) &#123;</div><div class="line"> num++;</div><div class="line"> l=<span class="number">0</span>;</div><div class="line"> &#125;</div><div class="line"> &#125; <span class="keyword">else</span> &#123;</div><div class="line"> l=<span class="number">0</span>;</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">int</span> r,t,len;</div><div class="line"> <span class="keyword">char</span> p[maxn][maxn];</div><div class="line"> r=t=<span class="number">0</span>;</div><div class="line"> len=<span class="built_in">strlen</span>(h);</div><div class="line"> <span class="keyword">bool</span> o=<span class="number">0</span>;</div><div class="line"> <span class="keyword">if</span>(num!=<span class="number">0</span>) &#123;</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">strlen</span>(f); i++) &#123;</div><div class="line"> <span class="keyword">if</span>(f[i]==h[len<span class="number">-1</span>] &amp;&amp; f[i+<span class="number">1</span>]==<span class="string">'('</span> &amp;&amp; f[i+<span class="number">2</span>]!=<span class="string">')'</span>&amp;&amp;f[i<span class="number">-2</span>]==h[len<span class="number">-3</span>]) &#123;</div><div class="line"> o=<span class="number">1</span>;</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">2</span>; j&lt;<span class="built_in">strlen</span>(f)&amp;&amp;f[j]!=<span class="string">'~'</span>; j++) &#123;</div><div class="line"> p[r][t]=f[j];<span class="comment">//p[0]存入第一个姓名</span></div><div class="line"> t++;</div><div class="line"> &#125;</div><div class="line"> r++;</div><div class="line"> t=<span class="number">0</span>;</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">if</span>(f[i]==<span class="string">'~'</span>&amp;&amp;r!=<span class="number">0</span>&amp;&amp;o) &#123;</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;<span class="built_in">strlen</span>(f)&amp;&amp;f[j]!=<span class="string">')'</span>; j++) &#123;</div><div class="line"> p[r][t]=f[j];<span class="comment">//p[1]存入第一个信息</span></div><div class="line"> t++;</div><div class="line"> &#125;</div><div class="line"> r++;</div><div class="line"> t=<span class="number">0</span>;</div><div class="line"> o=<span class="number">0</span>;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> &#125;</div><div class="line"> <span class="keyword">int</span> g=<span class="number">1</span>,v=<span class="number">1</span>;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\t\t\t您收到%d条告白信息！\n\n"</span>,num);</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;r; i+=<span class="number">2</span>,g++) &#123;</div><div class="line"> <span class="keyword">if</span>(r!=<span class="number">0</span>) &#123;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\t\t\tNo.%d :来自：%s的真诚爱意\n\n"</span>,g,p[i]);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\t\t\t告白宣言是：%s\n\n"</span>,p[i+<span class="number">1</span>]);</div><div class="line"> &#125; <span class="keyword">else</span> &#123;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\t\t\t但不知为何，其中向您告白的人撤回了消息\n\n"</span>);</div><div class="line"> v=<span class="number">0</span>;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> &#125;</div><div class="line"> g--;</div><div class="line"> <span class="keyword">if</span>(g!=num) &#123;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\t\t\t但不知为何，其中向您告白的%d人撤回了消息\n\n"</span>,num-g);<span class="comment">//这个是多人 向女神告白，有一人撤回</span></div><div class="line"> <span class="keyword">if</span>(g==<span class="number">0</span>) &#123;</div><div class="line"> v=<span class="number">0</span>;</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">if</span>(v) &#123;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\t\t\t请选择您要交往的人（以序号为准）：\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\t\t\t请输入您的选择（1~%d，0为全部拒绝）:"</span>,g);</div><div class="line"> <span class="keyword">int</span> j;</div><div class="line"> <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;j);</div><div class="line"> <span class="keyword">if</span>(j!=<span class="number">0</span>) &#123;</div><div class="line"> end1();</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\t\t\t您要公开恋爱消息吗？\n\t\t\t1.公开\n\t\t\t2.不公开"</span>);</div><div class="line"> <span class="keyword">char</span> ch,Lovesay[maxn];</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\t\t\t请输入您的选择："</span>);</div><div class="line"> <span class="built_in">scanf</span>(<span class="string">"%*c%c"</span>,&amp;ch);</div><div class="line"> <span class="keyword">if</span>(ch==<span class="string">'1'</span>) &#123;</div><div class="line"> system(<span class="string">"cls"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\n\n\t\t\t那么请输入您的恋爱宣言："</span>);</div><div class="line"> <span class="built_in">scanf</span>(<span class="string">"%s%*c"</span>,Lovesay);</div><div class="line"> <span class="built_in">fprintf</span>(w5,<span class="string">"(%s~%s)%s]"</span>,p[<span class="number">2</span>*(j<span class="number">-1</span>)],love[x1].Name1,Lovesay);<span class="comment">//1-&gt;0, 2-&gt;2,3-&gt;4,4-&gt;6</span></div><div class="line"> &#125;</div><div class="line"> system(<span class="string">"cls"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\n\t\t\t既然您答应了这位追求者，请对人家说点什么吧!"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\t\t\t请输入您的话语："</span>);</div><div class="line"> <span class="built_in">scanf</span>(<span class="string">"%s%*c"</span>,say);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\t\t\t我会帮您转告的！要幸福呦！\n"</span>);</div><div class="line"> FILE *k,*l;<span class="comment">//K是接收人加上对他的消息，l是不接受人</span></div><div class="line"> k=fopen(<span class="string">"d://texta.txt"</span>,<span class="string">"a"</span>);</div><div class="line"> l=fopen(<span class="string">"d://textb.txt"</span>,<span class="string">"a"</span>);</div><div class="line"> <span class="built_in">fprintf</span>(k,<span class="string">"(%s~%s)"</span>,p[<span class="number">2</span>*(j<span class="number">-1</span>)],say);<span class="comment">//(接受人，转告信息)</span></div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;r; i+=<span class="number">2</span>) &#123;</div><div class="line"> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(p[i],p[<span class="number">2</span>*(j<span class="number">-1</span>)])!=<span class="number">0</span>) &#123;</div><div class="line"> <span class="built_in">fprintf</span>(l,<span class="string">"%s"</span>,p[i]);<span class="comment">//拒绝人员的名单</span></div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> fclose(k);</div><div class="line">  fclose(l);</div><div class="line">  &#125;</div><div class="line">  &#125;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"\t\t\t您的告白邮箱暂时为空！\n"</span>);</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"\t\t\t何不先主动一步呢？别让现在成为过去！\n"</span>);</div><div class="line">  &#125;</div><div class="line">  fclose(w5);</div><div class="line"> fclose(fg);</div><div class="line"> fclose(fp);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\n\n\n\n\n\n\n\n\n\n\n*请摁任意键返回主菜单"</span>);</div><div class="line"> getch();</div><div class="line"> start3();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f6</span><span class="params">()</span> </span>&#123;</div><div class="line"> system(<span class="string">"cls"</span>);</div><div class="line"> system(<span class="string">"color 2e"</span>);<span class="comment">//先判断号主是否告白过别人，然后再判断是否存在接收人名单，然后相应的话 语就开说，</span></div><div class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">80</span>; i++) &#123;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"%c"</span>,<span class="number">5</span>);</div><div class="line"> &#125;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</div><div class="line"> <span class="keyword">char</span> w[maxn],f[maxn],c[maxn];</div><div class="line"> FILE *a,*b;</div><div class="line"> <span class="keyword">bool</span> o,p;</div><div class="line"> o=p=<span class="number">0</span>;</div><div class="line"> w2=fopen(<span class="string">"d://text2.txt"</span>,<span class="string">"r+"</span>);</div><div class="line"> a=fopen(<span class="string">"d://texta.txt"</span>,<span class="string">"r+"</span>);</div><div class="line"> b=fopen(<span class="string">"d://textb.txt"</span>,<span class="string">"r+"</span>);</div><div class="line"> <span class="built_in">fscanf</span>(w2,<span class="string">"%s"</span>,w);</div><div class="line"> <span class="built_in">strcpy</span>(c,love[x1].Name1);</div><div class="line"> <span class="keyword">char</span> namee[maxn],xinxi[maxn];</div><div class="line"> <span class="keyword">char</span> v[maxn];<span class="comment">//找到女神名字</span></div><div class="line"> <span class="keyword">int</span> u,k,y;</div><div class="line"> y=u=k=<span class="number">0</span>;</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">strlen</span>(w); i++) &#123;</div><div class="line">  <span class="keyword">if</span>(w[i]==<span class="string">'('</span>&amp;&amp;w[i+<span class="number">1</span>]==c[<span class="number">0</span>]&amp;&amp;w[i+<span class="number">2</span>]==c[<span class="number">1</span>]) &#123;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j=i<span class="number">-1</span>; j&gt;=<span class="number">0</span>&amp;&amp;w[j]!=<span class="string">')'</span>; j--) &#123;</div><div class="line">  v[u++]=w[j];</div><div class="line">  &#125;</div><div class="line">  &#125;</div><div class="line">  &#125;</div><div class="line">  v[u]=<span class="string">'\0'</span>;</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> j=u<span class="number">-1</span>; j&gt;=<span class="number">0</span>; j--) &#123;</div><div class="line"> namee[k++]=v[j];</div><div class="line"> &#125;</div><div class="line"> namee[k]=<span class="string">'\0'</span>;</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">strlen</span>(w); i++) &#123;</div><div class="line"> <span class="keyword">if</span>(w[i]==<span class="string">'('</span>&amp;&amp;w[i+<span class="number">1</span>]==c[<span class="number">0</span>]&amp;&amp;w[i+<span class="number">2</span>]==c[<span class="number">1</span>])</div><div class="line"> o=<span class="number">1</span>;</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">if</span>(o) &#123;</div><div class="line"> <span class="keyword">int</span> e=<span class="number">0</span>;</div><div class="line"> <span class="built_in">fscanf</span>(a,<span class="string">"%s"</span>,f);</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">strlen</span>(f); i++) &#123;</div><div class="line"> <span class="keyword">if</span>(f[i]==c[e]) &#123;</div><div class="line"> e++;</div><div class="line"> <span class="keyword">if</span>(e==<span class="built_in">strlen</span>(c)) &#123;</div><div class="line"> p=<span class="number">1</span>;</div><div class="line"> &#125;</div><div class="line"> &#125; <span class="keyword">else</span> &#123;</div><div class="line"> e=<span class="number">0</span>;</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">if</span>(p) &#123;</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">strlen</span>(f); i++) &#123;</div><div class="line"> <span class="keyword">if</span>(f[i]==<span class="string">'~'</span>) &#123;</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;<span class="built_in">strlen</span>(w)&amp;&amp;f[j]!=<span class="string">')'</span>; j++) &#123;</div><div class="line"> xinxi[y++]=f[j];</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> xinxi[y]=<span class="string">'\0'</span>;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\t\t\t恭喜您已经被%s接受！\n"</span>,namee);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\t\t\t%s还转告您说：%s\n"</span>,namee,xinxi);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\t\t\t祝您幸福久久呦！\n"</span>);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="keyword">bool</span> e=<span class="number">0</span>;</div><div class="line">  <span class="keyword">char</span> g[maxn];</div><div class="line">  <span class="built_in">fscanf</span>(b,<span class="string">"%s"</span>,g);</div><div class="line">  <span class="keyword">int</span> z=<span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">strlen</span>(g); i++) &#123;</div><div class="line">  <span class="keyword">if</span>(g[i]==c[z]) &#123;</div><div class="line">  z++;</div><div class="line">  <span class="keyword">if</span>(z=<span class="built_in">strlen</span>(c)) &#123;</div><div class="line">  e=<span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">  z=<span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span>(e) &#123;</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"\n\n\t\t\t很抱歉，您被%s拒绝。"</span>,namee);</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"\n\n\t\t\t天涯何处无芳草，您不要太难过，一切都会好起来的！\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\t\t\t您可以查看脱单秘籍，让自己找到恋爱诀窍！\n"</span>);</div><div class="line"> &#125; <span class="keyword">else</span> &#123;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\t\t\t啊哦，%s正在考虑，您有机会哦！"</span>,namee);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\t\t\t加油！祝您成功！\n"</span>);</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> &#125; <span class="keyword">else</span> &#123;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\t\t\t马上告白，让告白动态不再沉默！\n"</span>);</div><div class="line"> &#125;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\n\n\n\n\n\n\n\n\n\n\n *请摁任意键返回主菜单"</span>);</div><div class="line"> getch();</div><div class="line"> start3();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f7</span><span class="params">()</span> </span>&#123;</div><div class="line"> system(<span class="string">"cls"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</div><div class="line"> system(<span class="string">"color 70"</span>);</div><div class="line"> <span class="keyword">char</span> s[maxn],h[maxn],f[maxn];</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\t\t\t请输入您的选择:\n\n\t\t\t1.修改告白信息\n\n\t\t\t2.修改爱情宣言"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\t\t\t您的选择是："</span>);</div><div class="line"> <span class="keyword">int</span> o;</div><div class="line"> <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;o);</div><div class="line"> <span class="keyword">if</span>(o==<span class="number">1</span>) &#123;</div><div class="line"> FILE *fp,*fg,*fk;</div><div class="line"> fp=fopen(<span class="string">"d://text00.txt"</span>,<span class="string">"w"</span>);</div><div class="line"> fk=fopen(<span class="string">"d://text000.txt"</span>,<span class="string">"w"</span>);</div><div class="line"> fg=fopen(<span class="string">"d://text3.txt"</span>,<span class="string">"a+"</span>);</div><div class="line"> w2=fopen(<span class="string">"d://text2.txt"</span>,<span class="string">"a+"</span>);</div><div class="line"> <span class="keyword">char</span> k[maxn],v[maxn];</div><div class="line"> <span class="keyword">char</span> Newname[maxn],NewInformation[maxn];</div><div class="line"> <span class="built_in">fscanf</span>(w2,<span class="string">"%s"</span>,s);</div><div class="line"> <span class="built_in">fscanf</span>(fg,<span class="string">"%s"</span>,k);</div><div class="line"> <span class="built_in">strcpy</span>(f,s);</div><div class="line"> <span class="built_in">strcpy</span>(h,love[x1].Name1);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\t 请输入您上次输入的告白对象姓名："</span>);</div><div class="line"> <span class="built_in">scanf</span>(<span class="string">"%s"</span>,v);</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">strlen</span>(s); i++) &#123; <span class="comment">//信息长度与姓名长度都要小于原来的长度，这就很尴尬 了</span></div><div class="line"> <span class="keyword">if</span>(s[i]==<span class="string">'('</span>&amp;&amp;s[i+<span class="number">1</span>]==h[<span class="number">0</span>]&amp;&amp;s[i+<span class="number">2</span>]==h[<span class="number">1</span>]) &#123; <span class="comment">//定位号主名字</span></div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> j=i<span class="number">-1</span>; j&gt;=<span class="number">0</span>||s[j]!=<span class="string">')'</span>; j--) &#123; <span class="comment">//beigaobai(haozhu,xinxi)</span></div><div class="line"> f[j]=<span class="string">'*'</span>;</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> l=i; l&lt;<span class="built_in">strlen</span>(s); l++) &#123;</div><div class="line"> <span class="keyword">if</span>(s[l<span class="number">-1</span>]==<span class="string">')'</span>) &#123;</div><div class="line"> <span class="keyword">break</span>;</div><div class="line"> &#125;</div><div class="line"> f[l]=<span class="string">'*'</span>;</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">int</span> len,u,j;</div><div class="line"> u=<span class="number">0</span>;</div><div class="line"> len=<span class="built_in">strlen</span>(v);</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">strlen</span>(k); i++) &#123; <span class="comment">//关于排序，只能不退出系统才可以改啊！</span></div><div class="line"> <span class="keyword">if</span>(k[i]==v[u]) &#123;</div><div class="line"> u++;</div><div class="line"> <span class="keyword">if</span>(u==len) &#123;</div><div class="line"> k[i+<span class="number">1</span>]=<span class="string">'*'</span>;</div><div class="line"> <span class="keyword">for</span>(j=i; j&gt;=i-u; j--) &#123; <span class="comment">//(7894)(123)(45)删除（123） 反复推敲出来所得</span></div><div class="line"> k[j]=<span class="string">'*'</span>;</div><div class="line"> &#125;</div><div class="line"> k[j]=<span class="string">'*'</span>;</div><div class="line"> <span class="keyword">break</span>;</div><div class="line"> &#125;</div><div class="line"> &#125; <span class="keyword">else</span> &#123;</div><div class="line"> u=<span class="number">0</span>;</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">if</span>(u==<span class="number">0</span>) &#123;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\t您输入的告白对象姓名不存在!\n"</span>);</div><div class="line"> &#125; <span class="keyword">else</span> &#123;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\t 请输入您要修改的告白对象的姓名："</span>);</div><div class="line"> <span class="built_in">scanf</span>(<span class="string">"%s"</span>,Newname);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\t 请输入您要修改的告白信息："</span>);</div><div class="line"> <span class="built_in">scanf</span>(<span class="string">"%s"</span>,NewInformation);</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">strlen</span>(f); i++) &#123;</div><div class="line"> <span class="keyword">if</span>(f[i]!=<span class="string">'*'</span>) &#123;</div><div class="line"> fputc(f[i],fp);</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">strlen</span>(k); i++) &#123;</div><div class="line"> <span class="keyword">if</span>(k[i]!=<span class="string">'*'</span>) &#123;</div><div class="line"> fputc(k[i],fk);</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="built_in">fprintf</span>(fk,<span class="string">"(%s)"</span>,Newname);</div><div class="line"> <span class="built_in">fprintf</span>(fp,<span class="string">"%s(%s~%s)"</span>,Newname,love[x1].Name1,NewInformation);</div><div class="line"> <span class="keyword">if</span>(!fclose(fp))<span class="built_in">printf</span>(<span class="string">"\n\n\t修改成功！祝您告白成功！\n"</span>);</div><div class="line"> <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"\n修改失败\n"</span>);</div><div class="line"> fclose(w2);</div><div class="line"> fclose(fg);</div><div class="line"> fclose(fk);</div><div class="line"> remove(<span class="string">"d://text3.txt"</span>);</div><div class="line"> remove(<span class="string">"d://text2.txt"</span>);</div><div class="line"> rename(<span class="string">"d://text000.txt"</span>,<span class="string">"d://text3.txt"</span>);</div><div class="line"> rename(<span class="string">"d://text00.txt"</span>,<span class="string">"d://text2.txt"</span>);</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">if</span>(o==<span class="number">2</span>) &#123;</div><div class="line"> FILE *fp,*fg;</div><div class="line"> <span class="keyword">int</span> t,r,u,b,q;</div><div class="line"> q=b=t=r=u=<span class="number">0</span>;</div><div class="line"> <span class="keyword">char</span> Newlove[maxn],v[maxn],c[maxn];</div><div class="line"> fp=fopen(<span class="string">"d://text5.txt"</span>,<span class="string">"r"</span>);</div><div class="line"> fg=fopen(<span class="string">"d://text7.txt"</span>,<span class="string">"w"</span>);</div><div class="line"> <span class="built_in">fscanf</span>(fp,<span class="string">"%s"</span>,s);</div><div class="line"> <span class="built_in">strcpy</span>(h,love[x1].Name1);</div><div class="line"> <span class="built_in">strcpy</span>(f,s);</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">strlen</span>(s); i++) &#123;</div><div class="line"> <span class="keyword">if</span>(s[i]==h[b]) &#123;</div><div class="line"> b++;</div><div class="line"> <span class="keyword">if</span>(b==<span class="built_in">strlen</span>(h)) &#123;</div><div class="line"> q=<span class="number">1</span>;</div><div class="line"> &#125;</div><div class="line"> &#125; <span class="keyword">else</span> &#123;</div><div class="line"> b=<span class="number">0</span>;</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">if</span>(q) &#123;</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">strlen</span>(s); i++) &#123;</div><div class="line"> <span class="keyword">if</span>(s[i]==<span class="string">'('</span>&amp;&amp;s[i+<span class="number">1</span>]==h[<span class="number">0</span>]&amp;&amp;s[i+<span class="number">2</span>]==h[<span class="number">1</span>]) &#123; <span class="comment">//定位号主名字</span></div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> j=i; j&lt;<span class="built_in">strlen</span>(s); j++) &#123;</div><div class="line"> f[j]=<span class="string">'*'</span>;</div><div class="line"> <span class="keyword">if</span>(s[j]==<span class="string">']'</span>)</div><div class="line"> <span class="keyword">break</span>;</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> j=i; j&lt;<span class="built_in">strlen</span>(s); j++) &#123;</div><div class="line"> v[r++]=s[j];</div><div class="line"> <span class="keyword">if</span>(s[j]==<span class="string">')'</span>)</div><div class="line"> <span class="keyword">break</span>;</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">if</span>(s[i]==<span class="string">'~'</span>&amp;&amp;s[i+<span class="number">1</span>]==h[<span class="number">0</span>]&amp;&amp;s[i+<span class="number">2</span>]==h[<span class="number">1</span>]) &#123;</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> j=i; j&gt;=<span class="number">0</span>; j--) &#123;</div><div class="line"> c[u++]=s[j];</div><div class="line"> f[j]=<span class="string">'*'</span>;</div><div class="line"> <span class="keyword">if</span>(s[j]==<span class="string">']'</span>)</div><div class="line"> <span class="keyword">break</span>;</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> w=u<span class="number">-1</span>; w&gt;=<span class="number">0</span>; w--) &#123;</div><div class="line"> v[t++]=c[w];</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;<span class="built_in">strlen</span>(s); j++) &#123;</div><div class="line"> v[t++]=s[j];</div><div class="line"> <span class="keyword">if</span>(s[j]==<span class="string">')'</span>)</div><div class="line"> <span class="keyword">break</span>;</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;<span class="built_in">strlen</span>(s); j++) &#123;</div><div class="line"> f[j]=<span class="string">'*'</span>;</div><div class="line"> <span class="keyword">if</span>(s[j]==<span class="string">']'</span>)</div><div class="line"> <span class="keyword">break</span>;</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">strlen</span>(f); i++) &#123;</div><div class="line"> <span class="keyword">if</span>(f[i]!=<span class="string">'*'</span>) &#123;</div><div class="line"> fputc(f[i],fg);</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\t\t\t请输入您的新的爱情宣言: "</span>);</div><div class="line"> <span class="built_in">scanf</span>(<span class="string">"%s%*c"</span>,Newlove);</div><div class="line"> <span class="built_in">fprintf</span>(fg,<span class="string">"%s%s]"</span>,v,Newlove);</div><div class="line"> <span class="keyword">if</span>(!fclose(fg))<span class="built_in">printf</span>(<span class="string">"\n\n\n\t\t\t修改成功!\n"</span>);</div><div class="line"> <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"\n修改失败!\n"</span>);</div><div class="line"> fclose(fp);</div><div class="line"> remove(<span class="string">"d://text5.txt"</span>);</div><div class="line"> rename(<span class="string">"d://text7.txt"</span>,<span class="string">"d://text5.txt"</span>);</div><div class="line"> &#125; <span class="keyword">else</span> &#123;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\t\t\t抱歉，您还没有进行相应活动，没有权限修改！\n"</span>);</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">if</span>(o!=<span class="number">1</span>&amp;&amp;o!=<span class="number">2</span>) &#123;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\t\t\t您的输入有误，请重新返回输入！\n"</span>);</div><div class="line"> &#125;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\n\n\n\n  *请摁任意键返回主菜单"</span>);</div><div class="line"> getch();</div><div class="line"> start3();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f8</span><span class="params">()</span> </span>&#123;</div><div class="line"> system(<span class="string">"cls"</span>);<span class="comment">//为什么撤回功能，只撤回消息，而男神女神榜没有实时更新呢，因为我认为，这会 让被告白人更能显出她的魅力</span></div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</div><div class="line"> system(<span class="string">"color 3f"</span>);</div><div class="line"> FILE *fp;</div><div class="line"> fp=fopen(<span class="string">"d://text0.txt"</span>,<span class="string">"w"</span>);</div><div class="line"> w2=fopen(<span class="string">"d://text2.txt"</span>,<span class="string">"r+"</span>);</div><div class="line"> <span class="keyword">bool</span> o=<span class="number">0</span>;</div><div class="line"> <span class="keyword">char</span> s[maxn],h[maxn],f[maxn];</div><div class="line"> <span class="keyword">char</span> Oldname[maxn],ch;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\t\t\t请输入您刚才告白的对象名字："</span>);</div><div class="line"> <span class="built_in">scanf</span>(<span class="string">"%s%*c"</span>,Oldname);</div><div class="line"> <span class="built_in">fscanf</span>(w2,<span class="string">"%s"</span>,s);</div><div class="line"> <span class="built_in">strcpy</span>(f,s);</div><div class="line"> <span class="built_in">strcpy</span>(h,love[x1].Name1);</div><div class="line"> <span class="keyword">int</span> u=<span class="number">0</span>;</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">strlen</span>(s); i++) &#123;</div><div class="line"> <span class="keyword">if</span>(s[i]==Oldname[u]) &#123; <span class="comment">//如果输入的名字 存在</span></div><div class="line"> u++;</div><div class="line"> <span class="keyword">if</span>(u==<span class="built_in">strlen</span>(Oldname)) &#123;</div><div class="line"> o=<span class="number">1</span>;</div><div class="line"> &#125;</div><div class="line"> &#125; <span class="keyword">else</span> &#123;</div><div class="line"> u=<span class="number">0</span>;</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">if</span>(o) &#123;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\t\t\t您确定要撤回吗？\n\n\t\t\t1.继续撤回\n\n\t\t\t2.大胆去爱"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\t\t\t请输入您的选择："</span>);</div><div class="line"> <span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;ch);</div><div class="line"> <span class="keyword">if</span>(ch==<span class="string">'1'</span>) &#123;</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">strlen</span>(s); i++) &#123;</div><div class="line"> <span class="keyword">if</span>(s[i]==<span class="string">'('</span>&amp;&amp;s[i+<span class="number">1</span>]==h[<span class="number">0</span>]&amp;&amp;s[i+<span class="number">2</span>]==h[<span class="number">1</span>]) &#123;</div><div class="line"> <span class="keyword">for</span>(j=i+<span class="number">1</span>; j&lt;<span class="built_in">strlen</span>(s)&amp;&amp;s[j]!=<span class="string">')'</span>; j++) &#123;</div><div class="line"> f[j]=<span class="string">'*'</span>;</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">strlen</span>(f); i++) &#123;</div><div class="line"> <span class="keyword">if</span>(f[i]!=<span class="string">'*'</span>) &#123;</div><div class="line"> fputc(f[i],fp);</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\n\t\t\t"</span>);</div><div class="line"> <span class="keyword">if</span>(!fclose(fp))<span class="built_in">printf</span>(<span class="string">"  撤回成功！\n"</span>);</div><div class="line"> <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"\n撤回失败\n"</span>);</div><div class="line"> fclose(w2);</div><div class="line"> remove(<span class="string">"d://text2.txt"</span>);</div><div class="line"> rename(<span class="string">"d://text0.txt"</span>,<span class="string">"d://text2.txt"</span>);</div><div class="line"> &#125; <span class="keyword">else</span> &#123;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\t\t\t相信自己终有回报，祝您告白成功！\n\n"</span>);</div><div class="line"> &#125;</div><div class="line"> &#125; <span class="keyword">else</span> &#123;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\t\t\t抱歉，您还没有进行相应活动，没有权限修改！\n"</span>);</div><div class="line"> &#125;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\n\n\n\n\n\n*请摁任意键返回主菜单"</span>);</div><div class="line"> getch();</div><div class="line"> start3();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f9</span><span class="params">()</span> </span>&#123;</div><div class="line"> system(<span class="string">"cls"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\t\t\t     脱单秘籍\n\n"</span>);</div><div class="line"> system(<span class="string">"color 1e"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"1、和异性朋友不要搞暧昧\n\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"       单身的男女最好不要和异性搞暧昧，你们一起看电影吃饭拉手逛街，几乎做了全天下恋人都做的事情，别人会因为误以为你已经有了另一半而放弃对你的追求。所以，即使自己有不少玩的比较好的异性朋友，你最好保持合适的距离，这样被人才会知道你是单身，才会主动对你追求示好。\n\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"2、广泛发动身边的朋友、同学、同事介绍对象\n\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"       不要感觉发动身边的人给自己介绍对象是很丢脸的事情，单身并不丢脸，丢脸的是连告诉别人自己是单身的勇气都没有，连追求自己幸福的勇气都没有。从现在开始主动和自己的老朋友联系，不要回避恋爱问题，只有让他们知道你是单身的，知道你有被介绍朋友的需要，别人才会给你主动介绍。\n\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"3、努力上进地工作\n\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"       事实证明，努力地工作j就是一个很好的一个方法，在事业上小有成就可以大大增加你的魅力指数。\n\n"</span>);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"4、在告白墙自谋对象\n\n"</span>);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"      也许你自始至终都对告白墙存在排斥心理，上面的人也都是骗子，那你就太OUT了。告白墙只是提供了一个认识交流的平台，不少告白墙也是可以考虑注册的，上面有不少像你一样还没有找到对象的朋友，说不定就可以碰到自己的另一半,在周围人给介绍的不是太多的话，告白墙也不失是一个好的方法。\n\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"5、调整自己的心态\n\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"有些人可能是在以前的生活中和异性接触的不是太多，面对异性总有一种天然的不自信，紧张兮兮，畏畏缩缩，甚至连话都知道怎么说。纵然你长得帅如梁朝伟，美如张柏芝，你没有一个好的心态，对自己不够自信，你照样单身。存在这种心态说明你对自己认识不够，对他人认识不够。每个人都是这个世界上独一无二的个体，都会有自己的长处优点，你要会发掘自己的有点，而不是老是拿着自己的短处和别人的长处比，如果这样张柏芝梁朝伟也不会自信。你要发掘自己的优点，发自内心的爱上自己，只有你爱让自己，别人才会爱上你自己。所以说，想恋爱，先调整一下自己的心态吧。\n\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"6、学习恋爱技巧，让自己变得更有魅力\n\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"       要知道，恋爱是有技巧的。男人要多在豁达、幽默、风趣方面下功夫，女人则要在外表和内在气质方面努力，这些百度上有很多，我就不赘述了。\n\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"7、多参加各种活动，扩大自己的交际面\n\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"       很多单身男女之所以没有找到对象，很多情况就是因为交际面比较狭窄，所以扩大自己的交际面，尽快从宅男宅女的行列里走出来，主动去接触外界的人和事，也可以助你脱单。\n\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"8、尽显你的细心\n\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"       胆大心细，怎么会没有伴侣！\n\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"9、开口去说\n\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"       人只有主动去表达自己，才会吸引他人去了解你。如果你长的不是天仙下凡或是气度不凡便不要指望别人主动搭讪你，假如你长相平平有人陌生异性去搭讪你，这反而不是好事开口去说，主动和异性打招呼，主动嘘寒问暖或是礼貌交流都能够加深彼此的了解，让你们有深交的基础条件。\n\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"PS:1、你有多勇敢，你就会多幸福!\n\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"   2、向一切束缚住你的东西开战!\n\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"加油，CCUT小墙祝您成功！\n\n"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\n\n\n\n*请摁任意键返回主菜单"</span>);</div><div class="line"> getch();</div><div class="line"> start3();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f0</span><span class="params">()</span> </span>&#123;</div><div class="line"> system(<span class="string">"cls"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</div><div class="line"> system(<span class="string">"color 0b"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\t\t\t您确定要退出吗？\n\n\t\t\t1.注销账号\n\t\t\t2.退出系统\n\t\t\t3.返回 主菜单"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\n\t\t\t请输入您的选择："</span>);</div><div class="line"> <span class="built_in">scanf</span>(<span class="string">"%*c%c"</span>,&amp;ch);</div><div class="line"> <span class="keyword">if</span>(ch==<span class="string">'1'</span>) &#123;</div><div class="line"> x1++;</div><div class="line"> x2++;</div><div class="line"> x3++;</div><div class="line"> x4++;</div><div class="line"> x5++;</div><div class="line"> start1();</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">if</span>(ch==<span class="string">'2'</span>) &#123;</div><div class="line"> <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">if</span>(ch==<span class="string">'3'</span>) &#123;</div><div class="line"> start3();</div><div class="line"> &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">end1</span><span class="params">()</span> </span>&#123;</div><div class="line"> system(<span class="string">"cls"</span>);</div><div class="line"> system(<span class="string">"color 4c"</span>);</div><div class="line"> <span class="keyword">int</span> i,j,e;</div><div class="line"> <span class="keyword">int</span> a;</div><div class="line"> <span class="keyword">int</span> t1;</div><div class="line"> <span class="keyword">for</span>(i=<span class="number">1</span>,a=I; i&lt;=I/<span class="number">2</span>; i++,a--) &#123;</div><div class="line"> t1=<span class="number">6</span>;</div><div class="line">  <span class="keyword">while</span>(t1--)<span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line">  </div><div class="line">  <span class="keyword">for</span>(j=(<span class="keyword">int</span>) (I-<span class="built_in">sqrt</span>(I*I-(a-i)*(a-i))); j&gt;<span class="number">0</span>; j--)</div><div class="line">  <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line">  <span class="keyword">for</span>(e=<span class="number">1</span>; e&lt;=<span class="number">2</span>*<span class="built_in">sqrt</span>(I*I-(a-i)*(a-i)); e++)</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"*"</span>);</div><div class="line"> <span class="keyword">for</span>(j=(<span class="keyword">int</span>) (<span class="number">2</span>*( I-<span class="built_in">sqrt</span>(I*I-(a-i)*(a-i)))); j&gt;<span class="number">0</span>; j--)</div><div class="line"> <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line"> <span class="keyword">for</span>(e=<span class="number">1</span>; e&lt;=<span class="number">2</span>*<span class="built_in">sqrt</span>(I*I-(a-i)*(a-i)); e++)</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"*"</span>);</div><div class="line"> <span class="keyword">for</span>(j=(<span class="keyword">int</span>)(I-<span class="built_in">sqrt</span>(I*I-(a-i)*(a-i))); j&gt;<span class="number">0</span>; j--)</div><div class="line"> <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line"> </div><div class="line"> t1= (<span class="keyword">int</span>)(I-<span class="built_in">sqrt</span>(I*I-(a-i)*(a-i))) ;</div><div class="line"> t1= <span class="number">2</span>*t1;</div><div class="line"> t1+=(<span class="keyword">int</span>)(<span class="number">2</span>*<span class="built_in">sqrt</span>(I*I-(a-i)*(a-i)));</div><div class="line"> t1=<span class="number">20</span>-t1;</div><div class="line"> </div><div class="line"> <span class="keyword">while</span>(t1--) <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line"> </div><div class="line"> <span class="keyword">for</span>(j=(<span class="keyword">int</span>)(I-<span class="built_in">sqrt</span>(I*I-(a-i)*(a-i))); j&gt;<span class="number">0</span>; j--)</div><div class="line"> <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line"> <span class="keyword">for</span>(e=<span class="number">1</span>; e&lt;=<span class="number">2</span>*<span class="built_in">sqrt</span>(I*I-(a-i)*(a-i)); e++)</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"*"</span>);</div><div class="line"> <span class="keyword">for</span>(j=(<span class="keyword">int</span>)(<span class="number">2</span>*(I-<span class="built_in">sqrt</span>(I*I-(a-i)*(a-i)))); j&gt;<span class="number">0</span>; j--)</div><div class="line"> <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line"> <span class="keyword">for</span>(e=<span class="number">1</span>; e&lt;=<span class="number">2</span>*<span class="built_in">sqrt</span>(I*I-(a-i)*(a-i)); e++)</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"*"</span>);</div><div class="line"> <span class="keyword">for</span>(j=(<span class="keyword">int</span>) (I-<span class="built_in">sqrt</span>(I*I-(a-i)*(a-i))); j&gt;<span class="number">0</span>; j--)</div><div class="line"> <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line"> </div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=R/<span class="number">2</span>; i++) &#123;</div><div class="line"> </div><div class="line"> <span class="keyword">if</span>(i%<span class="number">2</span>||i%<span class="number">3</span>)<span class="keyword">continue</span>;</div><div class="line"> </div><div class="line"> t1=<span class="number">6</span>;</div><div class="line"> <span class="keyword">if</span>(i==<span class="number">6</span>)<span class="built_in">printf</span>(<span class="string">"&gt;&gt;----"</span>);</div><div class="line"> <span class="keyword">else</span> <span class="keyword">while</span>(t1--)<span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line"> </div><div class="line"> <span class="keyword">for</span>(j=(<span class="keyword">int</span>) (R-<span class="built_in">sqrt</span>(R*R-i*i)); j&gt;<span class="number">0</span>; j--)</div><div class="line"> <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line"> <span class="keyword">for</span>(e=<span class="number">1</span>; e&lt;=<span class="number">2</span>*(<span class="built_in">sqrt</span>(R*R-i*i) - (R<span class="number">-2</span>*I)); e++)</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"*"</span>);</div><div class="line"> <span class="keyword">for</span>(j=(<span class="keyword">int</span>) (R-<span class="built_in">sqrt</span>(R*R-i*i)); j&gt;<span class="number">0</span>; j--)</div><div class="line"> <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line"> </div><div class="line"> t1= (<span class="keyword">int</span>)(R-<span class="built_in">sqrt</span>(R*R-i*i));</div><div class="line"> t1=<span class="number">2</span>*t1;</div><div class="line"> t1+= (<span class="keyword">int</span>)(<span class="number">2</span>*(<span class="built_in">sqrt</span>(R*R-i*i) - (R<span class="number">-2</span>*I)));</div><div class="line"> t1=<span class="number">35</span>-t1;</div><div class="line"> </div><div class="line"> <span class="keyword">if</span>(i==<span class="number">6</span>) &#123;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"LOVE"</span>);</div><div class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">48</span>) &#123;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\b\b\b我爱你!"</span>);</div><div class="line"> &#125; <span class="keyword">else</span></div><div class="line"> <span class="keyword">while</span>(t1--) <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line"> <span class="keyword">for</span>(j=(<span class="keyword">int</span>) (R-<span class="built_in">sqrt</span>(R*R-i*i)); j&gt;<span class="number">0</span>; j--)</div><div class="line"> <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line"> <span class="keyword">for</span>(e=<span class="number">1</span>; e&lt;=<span class="number">2</span>*(<span class="built_in">sqrt</span>(R*R-i*i) - (R<span class="number">-2</span>*I)); e++)</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"*"</span>);</div><div class="line"> <span class="keyword">for</span>(j=(<span class="keyword">int</span>) (R-<span class="built_in">sqrt</span>(R*R-i*i)); j&gt;<span class="number">0</span>; j--)</div><div class="line"> <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line"> </div><div class="line"> <span class="keyword">if</span>(i==<span class="number">6</span>)<span class="built_in">printf</span>(<span class="string">"-----&gt;"</span>);</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line"> &#125;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\t\t\t祝您交友愉快，幸福久久"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></div></p><p></p><p><style> .button {color: #666; background-color: #EEE; border-color: #EEE; text-decoration: none; text-align: center; line-height: 40px; height: 40px; padding: 0 40px; margin: 0; display: inline-block; border: none; -webkit-box-sizing: border-box; box-sizing: border-box; -webkit-transition-property: all; transition-property: all; -webkit-transition-duration: .3s; transition-duration: .3s; font-size: 18px; font-weight: bold; font-family: @font-custom; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; letter-spacing: 3px; } .button:visited {color: #666; } .button:hover, .button:focus {background-color: #f6f6f6; text-decoration: none; outline: none; } .button:active, .button.active, .button.is-active {text-shadow: 0 1px 0 rgba(255, 255, 255, 0.3); text-decoration: none; background-color: #eeeeee; border-color: #cfcfcf; color: #d4d4d4; -webkit-transition-duration: 0s; transition-duration: 0s; -webkit-box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.2); box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.2); } .button.disabled, .button.is-disabled, .button:disabled {top: 0 !important; background: #EEE !important; border: 1px solid #DDD !important; text-shadow: 0 1px 1px white !important; color: #CCC !important; -webkit-box-shadow: none !important; box-shadow: none !important; opacity: .8 !important; } .button-primary {background-color: #1B9AF7; border-color: #1B9AF7; color: #FFF; } .button-primary:visited {color: #FFF; } .button-primary:hover, .button-primary:focus {background-color: #4cb0f9; border-color: #4cb0f9; color: #FFF; } .button-primary:active, .button-primary.active, .button-primary.is-active {background-color: #2798eb; border-color: #2798eb; color: #0880d7; } .button-rounded {border-radius: 4px; } .button-border.button-primary, .button-primary.button-border-thin, .button-primary.button-border-thick, .button-border-thin.button-primary, .button-border-thick.button-primary {color: #1B9AF7; } .button-border.button-primary:hover, .button-primary.button-border-thin:hover, .button-primary.button-border-thick:hover, .button-border.button-primary:focus, .button-primary.button-border-thin:focus, .button-primary.button-border-thick:focus, .button-border-thin.button-primary:hover, .button-border-thin.button-primary:focus, .button-border-thick.button-primary:hover, .button-border-thick.button-primary:focus {background-color: rgba(76, 176, 249, 0.9); color: rgba(255, 255, 255, 0.9); } .button-border.button-primary:active, .button-primary.button-border-thin:active, .button-primary.button-border-thick:active, .button-border.button-primary.active, .button-primary.active.button-border-thin, .button-primary.active.button-border-thick, .button-border.button-primary.is-active, .button-primary.is-active.button-border-thin, .button-primary.is-active.button-border-thick, .button-border-thin.button-primary:active, .button-border-thin.button-primary.active, .button-border-thin.button-primary.is-active, .button-border-thick.button-primary:active, .button-border-thick.button-primary.active, .button-border-thick.button-primary.is-active {background-color: rgba(39, 152, 235, 0.7); color: rgba(255, 255, 255, 0.5); opacity: .3; } .button-3d {position: relative; top: 0; -webkit-box-shadow: 0 7px 0 #bbbbbb, 0 8px 3px rgba(0, 0, 0, 0.2); box-shadow: 0 7px 0 #bbbbbb, 0 8px 3px rgba(0, 0, 0, 0.2); } .button-3d:hover, .button-3d:focus {-webkit-box-shadow: 0 7px 0 #bbbbbb, 0 8px 3px rgba(0, 0, 0, 0.2); box-shadow: 0 7px 0 #bbbbbb, 0 8px 3px rgba(0, 0, 0, 0.2); } .button-3d:active, .button-3d.active, .button-3d.is-active {top: 5px; -webkit-transition-property: all; transition-property: all; -webkit-transition-duration: .15s; transition-duration: .15s; -webkit-box-shadow: 0 2px 0 #bbbbbb, 0 3px 3px rgba(0, 0, 0, 0.2); box-shadow: 0 2px 0 #bbbbbb, 0 3px 3px rgba(0, 0, 0, 0.2); } .button-3d.button-primary {-webkit-box-shadow: 0 7px 0 #0880d7, 0 8px 3px rgba(0, 0, 0, 0.3); box-shadow: 0 7px 0 #0880d7, 0 8px 3px rgba(0, 0, 0, 0.3); } .button-3d.button-primary:hover, .button-3d.button-primary:focus {-webkit-box-shadow: 0 7px 0 #077ace, 0 8px 3px rgba(0, 0, 0, 0.3); box-shadow: 0 7px 0 #077ace, 0 8px 3px rgba(0, 0, 0, 0.3); } .button-3d.button-primary:active, .button-3d.button-primary.active, .button-3d.button-primary.is-active {-webkit-box-shadow: 0 2px 0 #0662a6, 0 3px 3px rgba(0, 0, 0, 0.2); box-shadow: 0 2px 0 #0662a6, 0 3px 3px rgba(0, 0, 0, 0.2); }</style></p><script>codeHide.addEventListener("click",function(){$("#sourceCode").slideToggle("slow")});</script>]]></content>
    
    <summary type="html">
    
      C语言,实训项目
    
    </summary>
    
      <category term="底端" scheme="http://tomotoes.com/blog/categories/%E5%BA%95%E7%AB%AF/"/>
    
    
      <category term="C" scheme="http://tomotoes.com/blog/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>让你的Capslock键变废为宝</title>
    <link href="http://tomotoes.com/blog//posts/74e12e24/"/>
    <id>http://tomotoes.com/blog//posts/74e12e24/</id>
    <published>2018-01-18T02:31:08.000Z</published>
    <updated>2018-01-25T09:43:56.933Z</updated>
    
    <content type="html"><![CDATA[<p>很多时候我们是用不到 Capslock 键的。<br><a id="more"></a></p><h3 id="Capslock-键的劣性"><a href="#Capslock-键的劣性" class="headerlink" title="Capslock 键的劣性"></a>Capslock 键的劣性</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;如果你是 Windows 系统用户，就会发现，很多时候我们是用不到 Capslock 键的。Capslock 键是切换大小写的锁定，而在平常工作中，只要摁住 Shift 键一样可完成该功能。并且 在键盘的布局上来看 ，Capslock 键 的地理位置 非常便捷，这可不是我们想要的。<br>&nbsp;&nbsp;&nbsp;&nbsp;下文将告诉你 如何把 作用微小的 Capslock键 变成你的得力助手。</p><h3 id="修改前奏"><a href="#修改前奏" class="headerlink" title="修改前奏"></a>修改前奏</h3><p>本文使用的修改键的脚本语言 是使用的 AutoHotKey ，一门超级强大的脚本语言。</p><ol><li>点击<a href="https://www.autohotkey.com/download/1.1/AutoHotkey_1.1.27.06.zip" target="_blank" rel="noopener">AutoHotKey官网下载链接</a>下载AutoHotKey 安装包 并安装。</li><li>新建文本文件，文件名格式为 <code>文件名.ahk</code> , 并用编辑器打开，建议 使用下载 AutoHotKey 插件后的 VSCode。</li><li>新建完成后的 ahk 文件，你可以双击运行，<br>或者 右键点击文件，然后单击 <code>Compile Script</code> 转换成 可执行文件再执行。</li></ol><h3 id="修改进行曲"><a href="#修改进行曲" class="headerlink" title="修改进行曲"></a>修改进行曲</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;俗话说：“授人以鱼不如授人以渔”，所以，我先教你三个简单的例子，以便你能快速掌握 所需的 AHK 脚本知识。</p><h4 id="模拟发送命令"><a href="#模拟发送命令" class="headerlink" title="模拟发送命令"></a>模拟发送命令</h4><p><img class="iimg" src="http://oz707qszw.bkt.clouddn.com/AHKExample.png" alt="AHK文件"></p><h4 id="模拟键盘事件"><a href="#模拟键盘事件" class="headerlink" title="模拟键盘事件"></a>模拟键盘事件</h4><p><img class="iimg" src="http://oz707qszw.bkt.clouddn.com/AHKExample1.png" alt="AHK文件"></p><h4 id="模拟光标行为"><a href="#模拟光标行为" class="headerlink" title="模拟光标行为"></a>模拟光标行为</h4><p><img class="iimg" src="http://oz707qszw.bkt.clouddn.com/AHKExample2.png" alt="AHK文件"></p><h4 id="一些-AHK-小常识"><a href="#一些-AHK-小常识" class="headerlink" title="一些 AHK 小常识"></a>一些 AHK 小常识</h4><p>其中还有一些必备的小知识<br><img class="iimg" src="http://oz707qszw.bkt.clouddn.com/images/AHKKey.png" alt="AHK文件"></p><h3 id="修改成果"><a href="#修改成果" class="headerlink" title="修改成果"></a>修改成果</h3><p><img class="iimg" src="http://oz707qszw.bkt.clouddn.com/images/AHKResult.png" alt="AHK文件"></p><h4 id="源文件"><a href="#源文件" class="headerlink" title="源文件"></a>源文件</h4><p>我调试了很长时间的 Capslock 快捷配置，希望能对你有所帮助。</p><p><a id="codeHide" class="alone button button-3d button-primary button-rounded">点击显/隐源文件</a> </p><div id="sourceCode" style="display:none"><br><figure class="highlight autohotkey"><table><tr><td class="code"><pre><div class="line"><span class="comment">;管理员运行</span></div><div class="line">if <span class="literal">not</span> <span class="built_in">A_IsAdmin</span></div><div class="line">&#123;</div><div class="line">   Run *RunAs <span class="string">"%A_ScriptFullPath%"</span> </div><div class="line">   <span class="keyword">ExitApp</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">;无环境变量</span></div><div class="line">#NoEnv</div><div class="line"></div><div class="line"><span class="comment">;高进程</span></div><div class="line">Process Priority,,High</div><div class="line"></div><div class="line"><span class="comment">;一直关闭 Capslock</span></div><div class="line"><span class="built_in">SetCapsLockState,</span> AlwaysOff  </div><div class="line"></div><div class="line"><span class="comment">; CapsLock -&gt; Esc</span></div><div class="line"><span class="symbol">CapsLock::</span></div><div class="line">Send &#123;Esc&#125;</div><div class="line"><span class="keyword">return</span></div><div class="line"></div><div class="line"><span class="comment">; CapsLock &amp; alt -&gt; Enter</span></div><div class="line"><span class="symbol">CapsLock &amp; alt::</span></div><div class="line">Send &#123;Enter&#125;</div><div class="line"><span class="keyword">return</span></div><div class="line"></div><div class="line"><span class="comment">; CapsLock &amp; Space -&gt; Shift</span></div><div class="line"><span class="symbol">CapsLock &amp; Space::</span></div><div class="line">    Send &#123;Shift Down&#125;</div><div class="line"><span class="keyword">return</span></div><div class="line"><span class="symbol">CapsLock &amp; Space up::</span></div><div class="line">    Send &#123;Shift up&#125;</div><div class="line"><span class="keyword">return</span></div><div class="line"></div><div class="line"><span class="comment">; 光标移动</span></div><div class="line"><span class="symbol">CapsLock &amp; j::</span></div><div class="line"><span class="built_in">MouseMove,</span> -<span class="number">15</span>, <span class="number">0</span>, <span class="number">0</span>, R                                               </div><div class="line"><span class="keyword">return</span>  </div><div class="line"><span class="symbol">CapsLock &amp; k::</span>                                                       </div><div class="line"><span class="built_in">MouseMove,</span> <span class="number">0</span>, <span class="number">15</span>, <span class="number">0</span>, R                                                </div><div class="line"><span class="keyword">return</span>                                                               </div><div class="line"><span class="symbol">CapsLock &amp; i::</span>                                                       </div><div class="line"><span class="built_in">MouseMove,</span> <span class="number">0</span>, -<span class="number">15</span>, <span class="number">0</span>, R                                                  </div><div class="line"><span class="keyword">return</span>                                                               </div><div class="line"><span class="symbol">CapsLock &amp; l::</span>                                                       </div><div class="line"><span class="built_in">MouseMove,</span> <span class="number">15</span>, <span class="number">0</span>, <span class="number">0</span>, R                                              </div><div class="line"><span class="keyword">return</span> </div><div class="line"></div><div class="line"><span class="comment">; 左键单击 </span></div><div class="line"><span class="symbol">CapsLock &amp; u::</span>                                                       </div><div class="line">SendEvent &#123;Blind&#125;&#123;LButton down&#125;                                      </div><div class="line">KeyWait Enter                                                        </div><div class="line">SendEvent &#123;Blind&#125;&#123;LButton up&#125;                                                </div><div class="line"><span class="keyword">return</span> </div><div class="line"></div><div class="line"><span class="comment">; 右键单击 </span></div><div class="line"><span class="symbol">CapsLock &amp; o::</span>                                                       </div><div class="line">SendEvent &#123;Blind&#125;&#123;RButton down&#125;                                      </div><div class="line">KeyWait Enter                                                        </div><div class="line">SendEvent &#123;Blind&#125;&#123;RButton up&#125;                                                </div><div class="line"><span class="keyword">return</span></div><div class="line"></div><div class="line"><span class="comment">; h 向上滚动</span></div><div class="line"><span class="symbol">CapsLock &amp; h::</span> </div><div class="line">SendEvent &#123;Blind&#125;&#123;WheelUp&#125;</div><div class="line"><span class="keyword">return</span>  </div><div class="line"></div><div class="line"><span class="comment">; 分号 向下滚动</span></div><div class="line">CapsLock &amp; `;::</div><div class="line">SendEvent &#123;Blind&#125;&#123;WheelDown&#125;</div><div class="line"><span class="keyword">return</span> </div><div class="line"><span class="symbol">CapsLock &amp; 3::</span> </div><div class="line">SendEvent &#123;Blind&#125;&#123;WheelUp&#125;</div><div class="line"><span class="keyword">return</span>        </div><div class="line"><span class="symbol">CapsLock &amp; 4::</span></div><div class="line">SendEvent &#123;Blind&#125;&#123;WheelDown&#125;</div><div class="line"><span class="keyword">return</span> </div><div class="line"></div><div class="line"><span class="symbol">CapsLock &amp; F5::</span></div><div class="line">Reload</div><div class="line"><span class="keyword">return</span></div><div class="line"></div><div class="line"><span class="comment">; 指针移动</span></div><div class="line"><span class="symbol">CapsLock &amp; e::</span></div><div class="line">Send &#123;Up&#125;</div><div class="line"><span class="keyword">return</span></div><div class="line"><span class="symbol">CapsLock &amp; d::</span></div><div class="line">Send &#123;Down&#125;</div><div class="line"><span class="keyword">return</span></div><div class="line"><span class="symbol">CapsLock &amp; s::</span></div><div class="line">Send &#123;Left&#125;</div><div class="line"><span class="keyword">return</span></div><div class="line"><span class="symbol">CapsLock &amp; f::</span></div><div class="line">    Send &#123;right&#125;</div><div class="line"><span class="keyword">return</span></div><div class="line"></div><div class="line"><span class="comment">; 行首行尾</span></div><div class="line"><span class="symbol">CapsLock &amp; a::</span></div><div class="line">Send &#123;home&#125;</div><div class="line"><span class="keyword">return</span></div><div class="line"><span class="symbol">CapsLock &amp; g::</span></div><div class="line">Send &#123;end&#125;</div><div class="line"><span class="keyword">return</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">; 左右删除</span></div><div class="line"><span class="symbol">CapsLock &amp; w::</span></div><div class="line">Send &#123;BS&#125;</div><div class="line"><span class="keyword">return</span></div><div class="line"><span class="symbol">CapsLock &amp; r::</span></div><div class="line">Send &#123;Delete&#125;</div><div class="line"><span class="keyword">return</span></div><div class="line"></div><div class="line"><span class="comment">; 撤销重做</span></div><div class="line"><span class="symbol">CapsLock &amp; t::</span></div><div class="line">Send ^&#123;z&#125;</div><div class="line"><span class="keyword">return</span></div></pre></td></tr></table></figure><br><br></div><h3 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h3><hr><p>本文会同步更新在以下地方(已链接本人主页),欢迎你在常逛的网站中关注我。 </p><ul><li><a href="https://juejin.im/user/599b6d255188252447222dfd" target="_blank" rel="external nofollow">掘金</a></li><li><a href="http://www.jianshu.com/users/2fb2fd6fda89/timeline" target="_blank" rel="external nofollow">简书</a></li><li><a href="http://www.cnblogs.com/jinma" target="_blank" rel="external nofollow">博客园</a>  </li><li><a href="http://blog.csdn.net/Acceptee" target="_blank" rel="external nofollow">CSDN</a></li><li><a href="https://segmentfault.com/u/majin" target="_blank" rel="external nofollow">segmentfault</a></li></ul><p>转载本站文章请注明作者和出处  <a href="http://tomotoes.com">tomotoes.com</a>，请勿用于任何商业用途。<br>深入Web全栈各项技术，坚持原创，文章更新虽不定，但只为质量而生。<br>建议收藏这个坏掉的番茄  <a href="http://tomotoes.com">tomotoes.com</a> ，愿陪你一起在全栈的道路上努力前行！</p><p><style>.iimg{transform:scale(0.8);margin:-30px 0px -40px -50px;}.button {color: #666; background-color: #EEE; border-color: #EEE; text-decoration: none; text-align: center; line-height: 40px; height: 40px; padding: 0 40px; margin: 0; display: inline-block; border: none; -webkit-box-sizing: border-box; box-sizing: border-box; -webkit-transition-property: all; transition-property: all; -webkit-transition-duration: .3s; transition-duration: .3s; font-size: 18px; font-weight: bold; font-family: @font-custom; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; letter-spacing: 3px; } .button:visited {color: #666; } .button:hover, .button:focus {background-color: #f6f6f6; text-decoration: none; outline: none; } .button:active, .button.active, .button.is-active {text-shadow: 0 1px 0 rgba(255, 255, 255, 0.3); text-decoration: none; background-color: #eeeeee; border-color: #cfcfcf; color: #d4d4d4; -webkit-transition-duration: 0s; transition-duration: 0s; -webkit-box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.2); box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.2); } .button.disabled, .button.is-disabled, .button:disabled {top: 0 !important; background: #EEE !important; border: 1px solid #DDD !important; text-shadow: 0 1px 1px white !important; color: #CCC !important; -webkit-box-shadow: none !important; box-shadow: none !important; opacity: .8 !important; } .button-primary {background-color: #1B9AF7; border-color: #1B9AF7; color: #FFF; } .button-primary:visited {color: #FFF; } .button-primary:hover, .button-primary:focus {background-color: #4cb0f9; border-color: #4cb0f9; color: #FFF; } .button-primary:active, .button-primary.active, .button-primary.is-active {background-color: #2798eb; border-color: #2798eb; color: #0880d7; } .button-rounded {border-radius: 4px; } .button-border.button-primary, .button-primary.button-border-thin, .button-primary.button-border-thick, .button-border-thin.button-primary, .button-border-thick.button-primary {color: #1B9AF7; } .button-border.button-primary:hover, .button-primary.button-border-thin:hover, .button-primary.button-border-thick:hover, .button-border.button-primary:focus, .button-primary.button-border-thin:focus, .button-primary.button-border-thick:focus, .button-border-thin.button-primary:hover, .button-border-thin.button-primary:focus, .button-border-thick.button-primary:hover, .button-border-thick.button-primary:focus {background-color: rgba(76, 176, 249, 0.9); color: rgba(255, 255, 255, 0.9); } .button-border.button-primary:active, .button-primary.button-border-thin:active, .button-primary.button-border-thick:active, .button-border.button-primary.active, .button-primary.active.button-border-thin, .button-primary.active.button-border-thick, .button-border.button-primary.is-active, .button-primary.is-active.button-border-thin, .button-primary.is-active.button-border-thick, .button-border-thin.button-primary:active, .button-border-thin.button-primary.active, .button-border-thin.button-primary.is-active, .button-border-thick.button-primary:active, .button-border-thick.button-primary.active, .button-border-thick.button-primary.is-active {background-color: rgba(39, 152, 235, 0.7); color: rgba(255, 255, 255, 0.5); opacity: .3; } .button-3d {position: relative; top: 0; -webkit-box-shadow: 0 7px 0 #bbbbbb, 0 8px 3px rgba(0, 0, 0, 0.2); box-shadow: 0 7px 0 #bbbbbb, 0 8px 3px rgba(0, 0, 0, 0.2); } .button-3d:hover, .button-3d:focus {-webkit-box-shadow: 0 7px 0 #bbbbbb, 0 8px 3px rgba(0, 0, 0, 0.2); box-shadow: 0 7px 0 #bbbbbb, 0 8px 3px rgba(0, 0, 0, 0.2); } .button-3d:active, .button-3d.active, .button-3d.is-active {top: 5px; -webkit-transition-property: all; transition-property: all; -webkit-transition-duration: .15s; transition-duration: .15s; -webkit-box-shadow: 0 2px 0 #bbbbbb, 0 3px 3px rgba(0, 0, 0, 0.2); box-shadow: 0 2px 0 #bbbbbb, 0 3px 3px rgba(0, 0, 0, 0.2); } .button-3d.button-primary {-webkit-box-shadow: 0 7px 0 #0880d7, 0 8px 3px rgba(0, 0, 0, 0.3); box-shadow: 0 7px 0 #0880d7, 0 8px 3px rgba(0, 0, 0, 0.3); } .button-3d.button-primary:hover, .button-3d.button-primary:focus {-webkit-box-shadow: 0 7px 0 #077ace, 0 8px 3px rgba(0, 0, 0, 0.3); box-shadow: 0 7px 0 #077ace, 0 8px 3px rgba(0, 0, 0, 0.3); } .button-3d.button-primary:active, .button-3d.button-primary.active, .button-3d.button-primary.is-active {-webkit-box-shadow: 0 2px 0 #0662a6, 0 3px 3px rgba(0, 0, 0, 0.2); box-shadow: 0 2px 0 #0662a6, 0 3px 3px rgba(0, 0, 0, 0.2); }@media screen and (max-width:800px) {.iimg{margin:0px;}}</style></p><script>codeHide.addEventListener("click",function(){$("#sourceCode").slideToggle("slow")});</script>]]></content>
    
    <summary type="html">
    
      Capslock,AutoHotKey
    
    </summary>
    
      <category term="工具" scheme="http://tomotoes.com/blog/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="AHK" scheme="http://tomotoes.com/blog/tags/AHK/"/>
    
  </entry>
  
  <entry>
    <title>学习Less-看这篇就够了</title>
    <link href="http://tomotoes.com/blog//posts/11b92833/"/>
    <id>http://tomotoes.com/blog//posts/11b92833/</id>
    <published>2017-12-08T02:52:11.000Z</published>
    <updated>2018-01-18T04:20:02.958Z</updated>
    
    <content type="html"><![CDATA[<p>Less 一门简单而又优雅的预处理语言。<a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="CSS的短板"><a href="#CSS的短板" class="headerlink" title="CSS的短板"></a>CSS的短板</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;作为前端学习者的我们 或多或少都要学些 CSS ，它作为前端开发的三大基石之一，时刻引领着 Web 的发展潮向。 而 CSS 作为一门标记性语言，可能 给初学者第一印象 就是简单易懂，毫无逻辑，不像编程该有的样子。在语法更新时，每当新属性提出，浏览器的兼容又会马上变成绊脚石，可以说 CSS 短板不容忽视。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;问题的诞生往往伴随着技术的兴起， 在 Web 发展的这几年， 为了让 CSS 富有逻辑性，短板不那么严重，涌现出了 一些神奇的预处理语言。 它们让 CSS 彻底变成一门 可以使用 变量 、循环 、继承 、自定义方法等多种特性的标记语言，逻辑性得以大大增强。</p><h3 id="预处理语言的诞生"><a href="#预处理语言的诞生" class="headerlink" title="预处理语言的诞生"></a>预处理语言的诞生</h3><p>其中 就我所知的有三门语言：Sass、Less 、Stylus 。</p><ol><li>Sass 诞生于 2007 年，Ruby 编写，其语法功能都十分全面，可以说 它完全把 CSS 变成了一门编程语言。另外 在国内外都很受欢迎，并且它的项目团队很是强大 ，是一款十分优秀的预处理语言。</li><li>Stylus 诞生于 2010 年，来自 Node.js 社区，语法功能也和 Sass 不相伯仲，是一门十分独特的创新型语言。</li><li>Less 诞生于 2009 年，受Sass的影响创建的一个开源项目。 它扩充了 CSS 语言，增加了诸如变量、混合（mixin）、函数等功能，让 CSS 更易维护、方便制作主题、扩充（<em>引用于官网</em>）。</li></ol><h3 id="选择预处理语言"><a href="#选择预处理语言" class="headerlink" title="选择预处理语言"></a>选择预处理语言</h3><p>这是一个十分纠结的问题。</p><ul><li><p>在我看来，这就好比 找女朋友，有人喜欢 贤惠安静的，就有人喜欢 活泼爱闹的，各有各的爱好，可晚上闭灯后 其实都差不多，所以你不用太过纠结。当然了 ，首先 你要有女朋友。</p></li><li><p>在网上讨论看来，Sass 与 Stylus 相比于 Less 功能更为丰富，但对于学习成本以及适应时间 ，Less 稍胜一筹，这也是我选择 Less 的原因。</p></li><li><p>Less 没有去掉任何 CSS 的功能，而是在现有的语法上，增添了许多额外的功能特性，所以学习 Less 是一件非常舒服的事情。</p></li></ul><p>如果你之前没有接触过预处理语言，纠结应该学哪一个，不如先看看 下面 Less 的介绍，我相信你会爱上它的。</p><h3 id="使用-Less-的前奏"><a href="#使用-Less-的前奏" class="headerlink" title="使用 Less 的前奏"></a>使用 Less 的前奏</h3><p>使用 Less 有两种方式</p><ol><li><p>在页面中 引入 Less.js </p><ul><li>可在<a href="http://lesscss.org/" target="_blank" rel="noopener">官网</a>下载</li><li><p>或使用CDN</p><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdnjs.cloudflare.com/ajax/libs/less.js/2.7.2/less.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>需要注意的是，link 标签一定要在 Less.js 之前引入，并且 link 标签的 rel 属性要设置为stylesheet/less。</p><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet/less"</span> <span class="attr">href</span>=<span class="string">"style.less"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"less.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></li></ul></li><li><p>在命令行 使用npm安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm install -g less</div></pre></td></tr></table></figure><p>具体使用命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ lessc styles.less &gt; styles.css</div></pre></td></tr></table></figure><p>假如还有问题，<a href="http://less.bootcss.com/" target="_blank" rel="noopener">官网</a>已经有了明确的步骤。</p><p>如果你也是 Webpack 的使用者，还需要配合 less-loader 进行处理，具体可见我的这篇文章：<a href="https://tomotoes.com/posts/4d6f8cc5/">Webpack飞行手册</a>，里面详细说明了 less 的处理方式。</p><p>如果你在本地环境，可以使用第一种方式，非常简单；但在生产环境中，性能非常重要，最好使用第二种方式。</p></li></ol><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>下面我将简介 Less 的功能特性。</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>我们常常在 CSS 中 看到同一个值重复多次，这样难易于代码维护。<br>理想状态，应是下面这样：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> bgColor=<span class="string">"skyblue"</span>;</div><div class="line">$(<span class="string">".post-content"</span>).css(<span class="string">"background-color"</span>,bgColor);</div><div class="line">$(<span class="string">"#wrap"</span>).css(<span class="string">"background-color"</span>,bgColor);</div><div class="line">$(<span class="string">".arctive"</span>).css(<span class="string">"background-color"</span>,bgColor);</div></pre></td></tr></table></figure></p><p>只要我们修改 <code>bgColor</code>这一个变量， 整个页面的背景颜色都会随之改变。</p><p>而 Less 中的变量十分强大，可化万物，值得一提的是，其变量是常量 ，所以只能定义一次，不能重复使用。</p><ol><li><p>值变量</p><figure class="highlight less"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* Less */</span></div><div class="line"><span class="variable">@color:</span> <span class="number">#999</span>;</div><div class="line"><span class="variable">@bgColor:</span> skyblue;<span class="comment">//不要添加引号</span></div><div class="line"><span class="variable">@width:</span> <span class="number">50%</span>;</div><div class="line"><span class="selector-id">#wrap</span> &#123;</div><div class="line">  <span class="attribute">color</span>: <span class="variable">@color</span>;</div><div class="line">  <span class="attribute">background</span>: <span class="variable">@bgColor</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="variable">@width</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 生成后的 CSS */</span></div><div class="line"><span class="selector-id">#wrap</span> &#123;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#999</span>;</div><div class="line">  <span class="attribute">background</span>: skyblue;</div><div class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>以 <code>@</code> 开头 定义变量，并且使用时 直接 键入 <code>@</code>名称。</p><p>在平时工作中，我们就可以把 常用的变量 封装到一个文件中，这样利于代码组织维护。</p><figure class="highlight less"><table><tr><td class="code"><pre><div class="line"><span class="variable">@lightPrimaryColor:</span> <span class="number">#c5cae9</span>;</div><div class="line"><span class="variable">@textPrimaryColor:</span> <span class="number">#fff</span>;</div><div class="line"><span class="variable">@accentColor:</span> rgb(<span class="number">99</span>, <span class="number">137</span>, <span class="number">185</span>);</div><div class="line"><span class="variable">@primaryTextColor:</span> <span class="number">#646464</span>;</div><div class="line"><span class="variable">@secondaryTextColor:</span> <span class="number">#000</span>;</div><div class="line"><span class="variable">@dividerColor:</span> <span class="number">#b6b6b6</span>;</div><div class="line"><span class="variable">@borderColor:</span> <span class="number">#dadada</span>;</div></pre></td></tr></table></figure></li><li><p>选择器变量</p><p>让 选择器 变成 动态</p><figure class="highlight less"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* Less */</span></div><div class="line"><span class="variable">@mySelector:</span> #wrap;</div><div class="line"><span class="variable">@Wrap:</span> wrap;</div><div class="line"><span class="variable">@&#123;mySelector&#125;</span>&#123; <span class="comment">//变量名 必须使用大括号包裹</span></div><div class="line">  <span class="attribute">color</span>: <span class="number">#999</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.@&#123;Wrap&#125;</span>&#123;</div><div class="line">  <span class="attribute">color</span>:<span class="number">#ccc</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#@&#123;Wrap&#125;</span>&#123;</div><div class="line">  <span class="attribute">color</span>:<span class="number">#666</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 生成的 CSS */</span></div><div class="line"><span class="selector-id">#wrap</span>&#123;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#999</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.wrap</span>&#123;</div><div class="line">  <span class="attribute">color</span>:<span class="number">#ccc</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#wrap</span>&#123;</div><div class="line">  <span class="attribute">color</span>:<span class="number">#666</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>属性变量</p><p>可减少代码书写量</p><figure class="highlight less"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* Less */</span></div><div class="line"><span class="variable">@borderStyle:</span> border-style;</div><div class="line"><span class="variable">@Soild:</span>solid;</div><div class="line"><span class="selector-id">#wrap</span>&#123;</div><div class="line">  <span class="attribute">@&#123;borderStyle&#125;</span>: <span class="variable">@Soild</span>;<span class="comment">//变量名 必须使用大括号包裹</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 生成的 CSS */</span></div><div class="line"><span class="selector-id">#wrap</span>&#123;</div><div class="line">  <span class="attribute">border-style</span>:solid;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>url 变量</p><p>项目结构改变时，修改其变量即可。</p><figure class="highlight less"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* Less */</span></div><div class="line"><span class="variable">@images:</span> <span class="string">"../img"</span>;<span class="comment">//需要加引号</span></div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">background</span>: url(<span class="string">"@&#123;images&#125;/dog.png"</span>);<span class="comment">//变量名 必须使用大括号包裹</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 生成的 CSS */</span></div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">background</span>: url(<span class="string">"../img/dog.png"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>声明变量</p><p>有点类似于 下面的 混合方法</p><ul><li>结构: @name: { 属性: 值 ;};</li><li>使用：@name();</li></ul><figure class="highlight less"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* Less */</span></div><div class="line"><span class="variable">@background:</span> &#123;<span class="attribute">background</span>:red;&#125;;</div><div class="line"><span class="selector-id">#main</span>&#123;</div><div class="line">    <span class="variable">@background</span>();</div><div class="line">&#125;</div><div class="line"><span class="variable">@Rules:</span>&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">border</span>: solid <span class="number">1px</span> red;</div><div class="line">&#125;;</div><div class="line"><span class="selector-id">#con</span>&#123;</div><div class="line">  <span class="variable">@Rules</span>();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 生成的 CSS */</span></div><div class="line"><span class="selector-id">#main</span>&#123;</div><div class="line">  <span class="attribute">background</span>:red;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#con</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">border</span>: solid <span class="number">1px</span> red;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>变量运算</p><p>不得不提的是，Less 的变量运算完全超出我的期望，十分强大。</p><ul><li>加减法时 以第一个数据的单位为基准</li><li>乘除法时 注意单位一定要统一</li></ul><figure class="highlight less"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* Less */</span></div><div class="line"><span class="variable">@width:</span><span class="number">300px</span>;</div><div class="line"><span class="variable">@color:</span><span class="number">#222</span>;</div><div class="line"><span class="selector-id">#wrap</span>&#123;</div><div class="line">  <span class="attribute">width</span>:<span class="variable">@width-20</span>;</div><div class="line">  <span class="attribute">height</span>:<span class="variable">@width-20</span>*<span class="number">5</span>;</div><div class="line">  <span class="attribute">margin</span>:(<span class="variable">@width-20</span>)*<span class="number">5</span>;</div><div class="line">  <span class="attribute">color</span>:<span class="variable">@color</span>*<span class="number">2</span>;</div><div class="line">  <span class="attribute">background-color</span>:<span class="variable">@color</span> + <span class="number">#111</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 生成的 CSS */</span></div><div class="line"><span class="selector-id">#wrap</span>&#123;</div><div class="line">  <span class="attribute">width</span>:<span class="number">280px</span>;</div><div class="line">  <span class="attribute">height</span>:<span class="number">200px</span>;</div><div class="line">  <span class="attribute">margin</span>:<span class="number">1400px</span>;</div><div class="line">  <span class="attribute">color</span>:<span class="number">#444</span>;</div><div class="line">  <span class="attribute">background-color</span>:<span class="number">#333</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>变量作用域</p><p>一句话理解就是：<strong>就近原则</strong>，不要跟我提闭包。</p><p><em>借助官网的Demo</em></p><figure class="highlight less"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* Less */</span></div><div class="line"><span class="variable">@var:</span> <span class="variable">@a</span>;</div><div class="line"><span class="variable">@a:</span> <span class="number">100%</span>;</div><div class="line"><span class="selector-id">#wrap</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="variable">@var</span>;</div><div class="line">  <span class="variable">@a:</span> <span class="number">9%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 生成的 CSS */</span></div><div class="line"><span class="selector-id">#wrap</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">9%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>用变量去定义变量</p><figure class="highlight less"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* Less */</span></div><div class="line"><span class="variable">@fnord:</span>  <span class="string">"I am fnord."</span>;</div><div class="line"><span class="variable">@var:</span>    <span class="string">"fnord"</span>;</div><div class="line"><span class="selector-id">#wrap</span><span class="selector-pseudo">::after</span>&#123;</div><div class="line">  <span class="attribute">content</span>: <span class="variable">@@var</span>; <span class="comment">//将@var替换为其值 content:@fnord;</span></div><div class="line">&#125;</div><div class="line"><span class="comment">/* 生成的 CSS */</span></div><div class="line"><span class="selector-id">#wrap</span><span class="selector-pseudo">::after</span>&#123;</div><div class="line">  <span class="attribute">content</span>: <span class="string">"I am fnord."</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><ol><li><p>&amp; 的妙用</p><p>&amp; ：代表的上一层选择器的名字，此例便是<code>header</code>。</p><figure class="highlight less"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* Less */</span></div><div class="line"><span class="selector-id">#header</span>&#123;</div><div class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span>&#123;</div><div class="line">    <span class="attribute">content</span>:<span class="string">"Less is more!"</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.title</span>&#123;</div><div class="line">    <span class="attribute">font-weight</span>:bold;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-tag">&amp;</span><span class="selector-tag">_content</span>&#123;<span class="comment">//理解方式：直接把 &amp; 替换成 #header</span></div><div class="line">    <span class="attribute">margin</span>:<span class="number">20px</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* 生成的 CSS */</span></div><div class="line"><span class="selector-id">#header</span><span class="selector-pseudo">::after</span>&#123;</div><div class="line">  <span class="attribute">content</span>:<span class="string">"Less is more!"</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#header</span> <span class="selector-class">.title</span>&#123; <span class="comment">//嵌套了</span></div><div class="line">  <span class="attribute">font-weight</span>:bold;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#header_content</span>&#123;<span class="comment">//没有嵌套！</span></div><div class="line">    <span class="attribute">margin</span>:<span class="number">20px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>媒体查询</p><p>在以往的工作中，我们使用 媒体查询，都要把一个元素 分开写</p><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-id">#wrap</span>&#123;</div><div class="line">  <span class="attribute">width</span>:<span class="number">500px</span>;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> screen and (max-width:<span class="number">768px</span>)&#123;</div><div class="line">  <span class="selector-id">#wrap</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Less 提供了一个十分便捷的方式</p><figure class="highlight less"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* Less */</span></div><div class="line"><span class="selector-id">#main</span>&#123;</div><div class="line">    <span class="comment">//something...</span></div><div class="line"></div><div class="line">    <span class="keyword">@media</span> screen&#123;</div><div class="line">        <span class="keyword">@media</span> (<span class="attribute">max-width</span>:<span class="number">768px</span>)&#123;</div><div class="line">          <span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">@media</span> tv &#123;</div><div class="line">      <span class="attribute">width</span>:<span class="number">2000px</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* 生成的 CSS */</span></div><div class="line"><span class="keyword">@media</span> screen and (<span class="attribute">maxwidth</span>:<span class="number">768px</span>)&#123;</div><div class="line">  <span class="selector-id">#main</span>&#123;</div><div class="line">      <span class="attribute">width</span>:<span class="number">100px</span>; </div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@media</span> tv&#123;</div><div class="line">  <span class="selector-id">#main</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">2000px</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>唯一的缺点就是 每一个元素都会编译出自己 <code>@media</code> 声明，并不会合并。</p></li><li><p>实战技巧</p><p>可以借助 Less 在元素中，去定义自己的私有样式。</p><figure class="highlight less"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* Less */</span></div><div class="line"><span class="selector-id">#main</span>&#123;</div><div class="line">  <span class="comment">// something..</span></div><div class="line">  <span class="selector-tag">&amp;</span><span class="selector-class">.show</span>&#123;</div><div class="line">    <span class="attribute">display</span>:block;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.show</span>&#123;</div><div class="line">  <span class="attribute">display</span>:none;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> main = <span class="built_in">document</span>.getElementById(<span class="string">"main"</span>);</div><div class="line">main.classList.add(<span class="string">"show"</span>);</div></pre></td></tr></table></figure><p>结果：</p><figure class="highlight less"><table><tr><td class="code"><pre><div class="line"><span class="selector-id">#main</span><span class="selector-class">.show</span>&#123;</div><div class="line">  <span class="attribute">display</span>:block;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.show</span>&#123;</div><div class="line">  <span class="attribute">display</span>:none; <span class="comment">//会被覆盖。</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><h3 id="混合方法"><a href="#混合方法" class="headerlink" title="混合方法"></a>混合方法</h3><ol><li><p>无参数方法</p><p>方法犹如 声明的集合，使用时 直接键入名称即可。</p><figure class="highlight less"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* Less */</span></div><div class="line"><span class="selector-class">.card</span> &#123; <span class="comment">// 等价于 .card()</span></div><div class="line">    <span class="attribute">background</span>: <span class="number">#f6f6f6</span>;</div><div class="line">    <span class="attribute">-webkit-box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> rgba(<span class="number">151</span>, <span class="number">151</span>, <span class="number">151</span>, .<span class="number">58</span>);</div><div class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> rgba(<span class="number">151</span>, <span class="number">151</span>, <span class="number">151</span>, .<span class="number">58</span>);</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#wrap</span>&#123;</div><div class="line">  <span class="selector-class">.card</span>;<span class="comment">//等价于.card();</span></div><div class="line">&#125;</div><div class="line"><span class="comment">/* 生成的 CSS */</span></div><div class="line"><span class="selector-id">#wrap</span>&#123;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#f6f6f6</span>;</div><div class="line">  <span class="attribute">-webkit-box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> rgba(<span class="number">151</span>, <span class="number">151</span>, <span class="number">151</span>, .<span class="number">58</span>);</div><div class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> rgba(<span class="number">151</span>, <span class="number">151</span>, <span class="number">151</span>, .<span class="number">58</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>其中 <code>.card</code> 与 <code>.card()</code> 是等价的。<br>个人建议，为了避免 代码混淆，应写成 :</p><figure class="highlight less"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.card</span>()&#123;</div><div class="line">  <span class="comment">//something...</span></div><div class="line">&#125;</div><div class="line"><span class="selector-id">#wrap</span>&#123;</div><div class="line">  <span class="selector-class">.card</span>();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>要点：</p><ul><li><code>.</code> 与 <code>#</code> 皆可作为 方法前缀。</li><li>方法后写不写 <code>()</code> 看个人习惯。</li></ul></li><li><p>默认参数方法</p><ul><li>Less 可以使用默认参数，如果 没有传参数，那么将使用默认参数。</li><li><code>@arguments</code> 犹如 JS 中的 <code>arguments</code> 指代的是 全部参数。</li><li>传的参数中 必须带着单位。</li></ul><figure class="highlight less"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* Less */</span></div><div class="line"><span class="selector-class">.border</span>(<span class="variable">@a</span>:<span class="number">10px</span>,<span class="variable">@b</span>:<span class="number">50px</span>,<span class="variable">@c</span>:<span class="number">30px</span>,<span class="variable">@color</span>:<span class="number">#000</span>)&#123;</div><div class="line">    <span class="attribute">border</span>:solid <span class="number">1px</span> <span class="variable">@color</span>;</div><div class="line">    <span class="attribute">box-shadow</span>: <span class="variable">@arguments</span>;<span class="comment">//指代的是 全部参数</span></div><div class="line">&#125;</div><div class="line"><span class="selector-id">#main</span>&#123;</div><div class="line">    <span class="selector-class">.border</span>(<span class="number">0px</span>,<span class="number">5px</span>,<span class="number">30px</span>,red);<span class="comment">//必须带着单位</span></div><div class="line">&#125;</div><div class="line"><span class="selector-id">#wrap</span>&#123;</div><div class="line">    <span class="selector-class">.border</span>(<span class="number">0px</span>);</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#content</span>&#123;</div><div class="line">  <span class="selector-class">.border</span>;<span class="comment">//等价于 .border()</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 生成的 CSS */</span></div><div class="line"><span class="selector-id">#main</span>&#123;</div><div class="line">    <span class="attribute">border</span>:solid <span class="number">1px</span> red;</div><div class="line">    <span class="attribute">box-shadow</span>:<span class="number">0px</span>,<span class="number">5px</span>,<span class="number">30px</span>,red;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#wrap</span>&#123;</div><div class="line">    <span class="attribute">border</span>:solid <span class="number">1px</span> <span class="number">#000</span>;</div><div class="line">    <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">50px</span> <span class="number">30px</span> <span class="number">#000</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#content</span>&#123;</div><div class="line">    <span class="attribute">border</span>:solid <span class="number">1px</span> <span class="number">#000</span>;</div><div class="line">    <span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">50px</span> <span class="number">30px</span> <span class="number">#000</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>方法的匹配模式</p><p>与 面向对象中的多态 很相似</p><figure class="highlight less"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* Less */</span></div><div class="line"><span class="selector-class">.triangle</span>(top,<span class="variable">@width</span>:<span class="number">20px</span>,<span class="variable">@color</span>:<span class="number">#000</span>)&#123;</div><div class="line">    <span class="attribute">border-color</span>:transparent  transparent <span class="variable">@color</span> transparent ;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.triangle</span>(right,<span class="variable">@width</span>:<span class="number">20px</span>,<span class="variable">@color</span>:<span class="number">#000</span>)&#123;</div><div class="line">    <span class="attribute">border-color</span>:transparent <span class="variable">@color</span> transparent  transparent ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.triangle</span>(bottom,<span class="variable">@width</span>:<span class="number">20px</span>,<span class="variable">@color</span>:<span class="number">#000</span>)&#123;</div><div class="line">    <span class="attribute">border-color</span>:<span class="variable">@color</span> transparent  transparent  transparent ;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.triangle</span>(left,<span class="variable">@width</span>:<span class="number">20px</span>,<span class="variable">@color</span>:<span class="number">#000</span>)&#123;</div><div class="line">    <span class="attribute">border-color</span>:transparent  transparent  transparent <span class="variable">@color</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.triangle</span>(<span class="variable">@_</span>,<span class="variable">@width</span>:<span class="number">20px</span>,<span class="variable">@color</span>:<span class="number">#000</span>)&#123;</div><div class="line">    <span class="attribute">border-style</span>: solid;</div><div class="line">    <span class="attribute">border-width</span>: <span class="variable">@width</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#main</span>&#123;</div><div class="line">    <span class="selector-class">.triangle</span>(left, <span class="number">50px</span>, <span class="number">#999</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">/* 生成的 CSS */</span></div><div class="line"><span class="selector-id">#main</span>&#123;</div><div class="line">  <span class="attribute">border-color</span>:transparent  transparent  transparent <span class="number">#999</span>;</div><div class="line">  <span class="attribute">border-style</span>: solid;</div><div class="line">  <span class="attribute">border-width</span>: <span class="number">50px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>要点</p><ul><li>第一个参数 <code>left</code> 要会找到方法中匹配程度最高的，如果匹配程度相同，将全部选择，并存在着样式覆盖替换。</li><li>如果匹配的参数 是变量，则将会匹配，如 <code>@_</code> 。</li></ul></li><li><p>方法的命名空间</p><p>让方法更加规范</p><figure class="highlight less"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* Less */</span></div><div class="line"><span class="selector-id">#card</span>()&#123;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#723232</span>;</div><div class="line">    <span class="selector-class">.d</span>(<span class="variable">@w</span>:<span class="number">300px</span>)&#123;</div><div class="line">        <span class="attribute">width</span>: <span class="variable">@w</span>;</div><div class="line">        </div><div class="line">        <span class="selector-id">#a</span>(<span class="variable">@h</span>:<span class="number">300px</span>)&#123;</div><div class="line">            <span class="attribute">height</span>: <span class="variable">@h</span>;<span class="comment">//可以使用上一层传进来的方法</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#wrap</span>&#123;</div><div class="line">    <span class="selector-id">#card</span> &gt; <span class="selector-class">.d</span> &gt; <span class="selector-id">#a</span>(<span class="number">100px</span>); <span class="comment">// 父元素不能加 括号</span></div><div class="line">&#125;</div><div class="line"><span class="selector-id">#main</span>&#123;</div><div class="line">    <span class="selector-id">#card</span> <span class="selector-class">.d</span>();</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#con</span>&#123;</div><div class="line">    <span class="comment">//不得单独使用命名空间的方法</span></div><div class="line">    <span class="comment">//.d() 如果前面没有引入命名空间 #card ，将会报错</span></div><div class="line">    </div><div class="line">    <span class="selector-id">#card</span>; <span class="comment">// 等价于 #card();</span></div><div class="line">    <span class="selector-class">.d</span>(<span class="number">20px</span>); <span class="comment">//必须先引入 #card</span></div><div class="line">&#125;</div><div class="line"><span class="comment">/* 生成的 CSS */</span></div><div class="line"><span class="selector-id">#wrap</span>&#123;</div><div class="line">  <span class="attribute">height</span>:<span class="number">100px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#main</span>&#123;</div><div class="line">  <span class="attribute">width</span>:<span class="number">300px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#con</span>&#123;</div><div class="line">  <span class="attribute">width</span>:<span class="number">20px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>要点</p><ul><li>在 CSS 中<code>&gt;</code> 选择器，选择的是 儿子元素，就是 必须与父元素 有直接血源的元素。</li><li>在引入命令空间时，如使用 <code>&gt;</code> 选择器，父元素不能加 括号。</li><li>不得单独使用命名空间的方法 必须先引入命名空间，才能使用 其中方法。</li><li>子方法 可以使用上一层传进来的方法</li></ul></li><li><p>方法的条件筛选</p><p>Less 没有 if else，可是它有 <code>when</code></p><figure class="highlight less"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* Less */</span></div><div class="line"><span class="selector-id">#card</span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">// and 运算符 ，相当于 与运算 &amp;&amp;，必须条件全部符合才会执行</span></div><div class="line">    <span class="selector-class">.border</span>(<span class="variable">@width</span>,<span class="variable">@color</span>,<span class="variable">@style</span>) <span class="keyword">when</span> (<span class="variable">@width</span>&gt;<span class="number">100px</span>) <span class="keyword">and</span>(<span class="variable">@color</span>=<span class="number">#999</span>)&#123;</div><div class="line">        <span class="attribute">border</span>:<span class="variable">@style</span> <span class="variable">@color</span> <span class="variable">@width</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// not 运算符，相当于 非运算 !，条件为 不符合才会执行</span></div><div class="line">    <span class="selector-class">.background</span>(<span class="variable">@color</span>) <span class="keyword">when</span> <span class="keyword">not</span> (<span class="variable">@color</span>&gt;=<span class="number">#222</span>)&#123;</div><div class="line">        <span class="attribute">background</span>:<span class="variable">@color</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// , 逗号分隔符：相当于 或运算 ||，只要有一个符合条件就会执行</span></div><div class="line">    <span class="selector-class">.font</span>(<span class="variable">@size</span>:<span class="number">20px</span>) <span class="keyword">when</span> (<span class="variable">@size</span>&gt;<span class="number">50px</span>) , (<span class="variable">@size</span>&lt;<span class="number">100px</span>)&#123;</div><div class="line">        <span class="attribute">font-size</span>: <span class="variable">@size</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#main</span>&#123;</div><div class="line">    <span class="selector-id">#card</span>&gt;<span class="selector-class">.border</span>(<span class="number">200px</span>,<span class="number">#999</span>,solid);</div><div class="line">    <span class="selector-id">#card</span> <span class="selector-class">.background</span>(<span class="number">#111</span>);</div><div class="line">    <span class="selector-id">#card</span> &gt; <span class="selector-class">.font</span>(<span class="number">40px</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">/* 生成后的 CSS */</span></div><div class="line"><span class="selector-id">#main</span>&#123;</div><div class="line">  <span class="attribute">border</span>:solid <span class="number">#999</span> <span class="number">200px</span>;</div><div class="line">  <span class="attribute">background</span>:<span class="number">#111</span>;</div><div class="line">  <span class="attribute">font-size</span>:<span class="number">40px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>要点</p><ul><li>比较运算有： &gt; &gt;= = =&lt; &lt;。</li><li>= 代表的是等于</li><li>除去关键字 true 以外的值都被视为 false：</li></ul></li><li><p>数量不定的参数</p><p>如果你希望你的方法接受数量不定的参数，你可以使用… ，犹如 ES6 的扩展运算符。</p><figure class="highlight less"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* Less */</span></div><div class="line"><span class="selector-class">.boxShadow</span>(...)&#123;</div><div class="line">    <span class="attribute">box-shadow</span>: <span class="variable">@arguments</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.textShadow</span>(<span class="variable">@a</span>,...)&#123;</div><div class="line">    <span class="attribute">text-shadow</span>: <span class="variable">@arguments</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#main</span>&#123;</div><div class="line">    <span class="selector-class">.boxShadow</span>(<span class="number">1px</span>,<span class="number">4px</span>,<span class="number">30px</span>,red);</div><div class="line">    <span class="selector-class">.textShadow</span>(<span class="number">1px</span>,<span class="number">4px</span>,<span class="number">30px</span>,red);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 生成后的 CSS */</span></div><div class="line"><span class="selector-id">#main</span>&#123;</div><div class="line">  <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">4px</span> <span class="number">30px</span> red;</div><div class="line">  <span class="attribute">text-shadow</span>: <span class="number">1px</span> <span class="number">4px</span> <span class="number">30px</span> red;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>方法使用important！</p><p>使用方法 非常简单，在方法名后 加上关键字即可。</p><figure class="highlight less"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* Less */</span></div><div class="line"><span class="selector-class">.border</span>&#123;</div><div class="line">    <span class="attribute">border</span>: solid <span class="number">1px</span> red;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">50px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#main</span>&#123;</div><div class="line">    <span class="selector-class">.border</span>() !important;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* 生成后的 CSS */</span></div><div class="line"><span class="selector-id">#main</span> &#123;</div><div class="line">    <span class="attribute">border</span>: solid <span class="number">1px</span> red <span class="meta">!important</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> <span class="meta">!important</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>循环方法</p><p>Less 并没有提供 for 循环功能，但这也难不倒 聪明的程序员，使用递归去实现。<br>下面是官网中的一个 Demo，模拟了生成栅格系统。</p><figure class="highlight less"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* Less */</span></div><div class="line"><span class="selector-class">.generate-columns</span>(<span class="number">4</span>);</div><div class="line"></div><div class="line"><span class="selector-class">.generate-columns</span>(<span class="variable">@n</span>, <span class="variable">@i</span>: <span class="number">1</span>) <span class="keyword">when</span> (<span class="variable">@i</span> =&lt; <span class="variable">@n</span>) &#123;</div><div class="line">  <span class="selector-class">.column-</span><span class="variable">@&#123;i&#125;</span> &#123;</div><div class="line">    <span class="attribute">width</span>: (<span class="variable">@i</span> * <span class="number">100%</span> / <span class="variable">@n</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.generate-columns</span>(<span class="variable">@n</span>, (<span class="variable">@i</span> + <span class="number">1</span>));</div><div class="line">&#125;</div><div class="line"><span class="comment">/* 生成后的 CSS */</span></div><div class="line"><span class="selector-class">.column-1</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">25%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.column-2</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.column-3</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">75%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.column-4</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>属性拼接方法</p><p><code>+_</code> 代表的是 空格；<code>+</code> 代表的是 逗号。</p><ul><li><p>逗号</p><figure class="highlight less"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* Less */</span></div><div class="line"><span class="selector-class">.boxShadow</span>() &#123;</div><div class="line">    <span class="selector-tag">box-shadow</span>+: <span class="selector-tag">inset</span> <span class="selector-tag">0</span> <span class="selector-tag">0</span> <span class="selector-tag">10px</span> <span class="selector-id">#555</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.main</span> &#123;</div><div class="line">  <span class="selector-class">.boxShadow</span>();</div><div class="line">  <span class="selector-tag">box-shadow</span>+: <span class="selector-tag">0</span> <span class="selector-tag">0</span> <span class="selector-tag">20px</span> <span class="selector-tag">black</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* 生成后的 CSS */</span></div><div class="line"><span class="selector-class">.main</span> &#123;</div><div class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#555</span>, <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> black;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>空格</p><figure class="highlight less"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* Less */</span></div><div class="line"><span class="selector-class">.Animation</span>() &#123;</div><div class="line">  <span class="selector-tag">transform</span>+<span class="selector-tag">_</span>: <span class="selector-tag">scale</span>(<span class="number">2</span>);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.main</span> &#123;</div><div class="line">  <span class="selector-class">.Animation</span>();</div><div class="line">  <span class="selector-tag">transform</span>+<span class="selector-tag">_</span>: <span class="selector-tag">rotate</span>(<span class="number">15deg</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 生成的 CSS */</span></div><div class="line"><span class="selector-class">.main</span> &#123;</div><div class="line">  <span class="attribute">transform</span>: scale(<span class="number">2</span>) rotate(<span class="number">15deg</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul></li><li><p>实战技巧</p><p>下面是官网中的一个非常赞的 Demo</p><figure class="highlight less"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* Less */</span></div><div class="line"><span class="selector-class">.average</span>(<span class="variable">@x</span>, <span class="variable">@y</span>) &#123;</div><div class="line">  <span class="variable">@average:</span> ((<span class="variable">@x</span> + <span class="variable">@y</span>) / <span class="number">2</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">  <span class="selector-class">.average</span>(<span class="number">16px</span>, <span class="number">50px</span>); <span class="comment">// 调用 方法</span></div><div class="line">  <span class="attribute">padding</span>: <span class="variable">@average</span>;    <span class="comment">// 使用返回值</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 生成的 CSS */</span></div><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">33px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以说 Less 是一门优雅编程语言。</p></li></ol><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>extend 是 Less 的一个伪类。它可继承 所匹配声明中的全部样式。</p><ol><li><p>extend 关键字的使用</p><figure class="highlight less"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* Less */</span></div><div class="line"><span class="selector-class">.animation</span>&#123;</div><div class="line">    <span class="attribute">transition</span>: all .<span class="number">3s</span> ease-out;</div><div class="line">    <span class="selector-class">.hide</span>&#123;</div><div class="line">      <span class="attribute">transform</span>:scale(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#main</span>&#123;</div><div class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.animation)</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#con</span>&#123;</div><div class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.animation</span> <span class="selector-class">.hide</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 生成后的 CSS */</span></div><div class="line"><span class="selector-class">.animation</span>,<span class="selector-id">#main</span>&#123;</div><div class="line">  <span class="attribute">transition</span>: all .<span class="number">3s</span> ease-out;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.animation</span> <span class="selector-class">.hide</span> , <span class="selector-id">#con</span>&#123;</div><div class="line">    <span class="attribute">transform</span>:scale(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>all 全局搜索替换</p><p>使用选择器匹配到的 全部声明。</p><figure class="highlight less"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* Less */</span></div><div class="line"><span class="selector-id">#main</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#main</span> &#123;</div><div class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">    <span class="attribute">content</span>:<span class="string">"Less is good!"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#wrap</span><span class="selector-pseudo">:extend(</span><span class="selector-id">#main</span> <span class="keyword">all</span>) &#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 生成的 CSS */</span></div><div class="line"><span class="selector-id">#main</span>,<span class="selector-id">#wrap</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#main</span><span class="selector-pseudo">:after</span>, <span class="selector-id">#wrap</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">"Less is good!"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>减少代码的重复性</p><p>从表面 看来，extend 与 方法 最大的差别，就是 extend 是同个选择器共用同一个声明，而 方法 是使用自己的声明，这无疑 增加了代码的重复性。</p><p>方法示例 与上面的 extend 进行对比：</p><figure class="highlight less"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* Less */</span></div><div class="line"><span class="selector-class">.Method</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">      <span class="attribute">content</span>:<span class="string">"Less is good!"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#main</span>&#123;</div><div class="line">  <span class="selector-class">.Method</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#wrap</span>&#123;</div><div class="line">  <span class="selector-class">.Method</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 生成的 CSS */</span></div><div class="line"><span class="selector-id">#main</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span>&#123;</div><div class="line">    <span class="attribute">content</span>:<span class="string">"Less is good!"</span>;</div><div class="line">  &#125;  </div><div class="line">&#125;</div><div class="line"><span class="selector-id">#wrap</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span>&#123;</div><div class="line">    <span class="attribute">content</span>:<span class="string">"Less is good!"</span>;</div><div class="line">  &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>要点</p><p><em>翻译官网</em></p><ul><li>选择器和扩展之间 是允许有空格的：pre:hover :extend(div pre).</li><li>可以有多个扩展: pre:hover:extend(div pre):extend(.bucket tr) - 注意这与 pre:hover:extend(div pre, .bucket tr)一样。</li><li>这是不可以的，扩展必须在最后 : pre:hover:extend(div pre).nth-child(odd)。</li><li>如果一个规则集包含多个选择器，所有选择器都可以使用extend关键字。</li></ul></li></ol><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><ol><li><p>导入 less 文件 可省略后缀</p><figure class="highlight"><table><tr><td class="code"><pre><div class="line">import "main"; </div><div class="line"><span class="comment">//等价于</span></div><div class="line">import "main.less";</div></pre></td></tr></table></figure></li><li><p><code>@import</code> 的位置可随意放置</p><figure class="highlight less"><table><tr><td class="code"><pre><div class="line"><span class="selector-id">#main</span>&#123;</div><div class="line">  <span class="attribute">font-size</span>:<span class="number">15px</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@import</span> <span class="string">"style"</span>;</div></pre></td></tr></table></figure></li><li><p>reference</p><p>Less 中 最强大的特性<br>使用 引入的 Less 文件，但不会 编译它。</p><figure class="highlight less"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* Less */</span></div><div class="line"><span class="keyword">@import</span> (reference) <span class="string">"bootstrap.less"</span>; </div><div class="line"></div><div class="line"><span class="selector-id">#wrap</span><span class="selector-pseudo">:extend(.navbar</span> <span class="keyword">all</span>)&#123;&#125;</div></pre></td></tr></table></figure><p> 翻译官网：</p><blockquote><p>使用@import (reference)导入外部文件，但不会添加 把导入的文件 编译到最终输出中，只引用。</p></blockquote></li><li><p>once</p><blockquote><p>@import语句的默认行为。这表明相同的文件只会被导入一次，而随后的导入文件的重复代码都不会解析。</p></blockquote> <figure class="highlight less"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@import</span> (once) <span class="string">"foo.less"</span>;</div><div class="line"><span class="keyword">@import</span> (once) <span class="string">"foo.less"</span>; <span class="comment">// this statement will be ignored</span></div></pre></td></tr></table></figure></li><li><p>multiple</p><blockquote><p>使用@import (multiple)允许导入多个同名文件。</p></blockquote><figure class="highlight less"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* Less */</span></div><div class="line"></div><div class="line"><span class="comment">// file: foo.less</span></div><div class="line"><span class="selector-class">.a</span> &#123;</div><div class="line">  <span class="attribute">color</span>: green;</div><div class="line">&#125;</div><div class="line"><span class="comment">// file: main.less</span></div><div class="line"><span class="keyword">@import</span> (multiple) <span class="string">"foo.less"</span>;</div><div class="line"><span class="keyword">@import</span> (multiple) <span class="string">"foo.less"</span>;</div><div class="line"></div><div class="line"><span class="comment">/* 生成后的 CSS */</span></div><div class="line"><span class="selector-class">.a</span> &#123;</div><div class="line">  <span class="attribute">color</span>: green;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.a</span> &#123;</div><div class="line">  <span class="attribute">color</span>: green;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ol><li><p>判断类型</p><ul><li>isnumber<blockquote><p>判断给定的值 是否 是一个数字。</p></blockquote></li></ul><figure class="highlight less"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">isnumber</span>(<span class="number">#ff0</span>);     <span class="comment">// false</span></div><div class="line"><span class="selector-tag">isnumber</span>(blue);     <span class="comment">// false</span></div><div class="line"><span class="selector-tag">isnumber</span>(<span class="string">"string"</span>); <span class="comment">// false</span></div><div class="line"><span class="selector-tag">isnumber</span>(<span class="number">1234</span>);     <span class="comment">// true</span></div><div class="line"><span class="selector-tag">isnumber</span>(<span class="number">56px</span>);     <span class="comment">// true</span></div><div class="line"><span class="selector-tag">isnumber</span>(<span class="number">7.8%</span>);     <span class="comment">// true</span></div><div class="line"><span class="selector-tag">isnumber</span>(keyword);  <span class="comment">// false</span></div><div class="line"><span class="selector-tag">isnumber</span>(url(<span class="string">...</span>)); <span class="comment">// false</span></div></pre></td></tr></table></figure><ul><li><p>iscolor</p><blockquote><p>判断给定的值 是否 是一个颜色。</p></blockquote></li><li><p>isurl</p><blockquote><p>判断给定的值 是否 是一个 url 。</p></blockquote></li></ul></li><li><p>颜色操作</p><ul><li><p>saturate</p><blockquote><p>增加一定数值的颜色饱和度。</p></blockquote></li><li><p>lighten</p><blockquote><p>增加一定数值的颜色亮度。</p></blockquote></li><li><p>darken</p><blockquote><p>降低一定数值的颜色亮度。</p></blockquote></li><li><p>fade</p><blockquote><p>给颜色设定一定数值的透明度。</p></blockquote></li><li><p>mix</p><blockquote><p>根据比例混合两种颜色。</p></blockquote></li></ul></li><li><p>数学函数</p><ul><li><p>ceil</p><blockquote><p>向上取整。</p></blockquote></li><li><p>floor</p><blockquote><p>向下取整。</p></blockquote></li><li><p>percentage</p><blockquote><p>将浮点数转换为百分比字符串。</p></blockquote></li><li><p>round</p><blockquote><p>四舍五入。</p></blockquote></li><li><p>sqrt</p><blockquote><p>计算一个数的平方根。</p></blockquote></li><li><p>abs</p><blockquote><p>计算数字的绝对值，原样保持单位。</p></blockquote></li><li><p>pow</p><blockquote><p>计算一个数的乘方。</p></blockquote></li></ul></li></ol><p>由于 文章 篇幅有限，所以 只能介绍一些 使用效率高的函数。<br>如果你想了解更多，可以去官网的<a href="http://lesscss.cn/functions/" target="_blank" rel="noopener">函数链接</a></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol><li><p>注释</p><ul><li>/* */ CSS原生注释，会被编译在 CSS 文件中。</li><li>/&nbsp;&nbsp;&nbsp;/ Less提供的一种注释，不会被编译在 CSS 文件中。</li></ul></li><li><p>避免编译</p><figure class="highlight less"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* Less */</span></div><div class="line"><span class="selector-id">#main</span>&#123;</div><div class="line">  <span class="attribute">width</span>:<span class="string">~'calc(300px-30px)'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 生成后的 CSS */</span></div><div class="line"><span class="selector-id">#main</span>&#123;</div><div class="line">  <span class="attribute">width</span>:calc(<span class="number">300px</span>-<span class="number">30px</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>结构： <code>~&#39; 值 &#39;</code></p></li><li><p>变量拼串</p><p>在平时工作中，这种需求 太常见了。<br>在下面例子中， 实现了不同的 transtion-delay、animation、@keyframes</p><figure class="highlight less"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.judge</span>(<span class="variable">@i</span>) <span class="keyword">when</span>(<span class="variable">@i</span>=<span class="number">1</span>)&#123;</div><div class="line">  <span class="variable">@size:</span><span class="number">15px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.judge</span>(<span class="variable">@i</span>) <span class="keyword">when</span>(<span class="variable">@i</span>&gt;<span class="number">1</span>)&#123;</div><div class="line">  <span class="variable">@size:</span><span class="number">16px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.loopAnimation</span>(<span class="variable">@i</span>) <span class="keyword">when</span> (<span class="variable">@i</span>&lt;<span class="number">16</span>) &#123;</div><div class="line">  </div><div class="line">  <span class="selector-class">.circle</span><span class="selector-pseudo">:nth-child(</span><span class="variable">@&#123;i&#125;</span>)&#123;</div><div class="line">      <span class="selector-class">.judeg</span>(<span class="variable">@i</span>);</div><div class="line">      <span class="attribute">border-radius</span>:<span class="variable">@size</span> <span class="variable">@size</span> <span class="number">0</span> <span class="number">0</span>;</div><div class="line">      <span class="attribute">animation</span>: <span class="string">~"circle-@&#123;i&#125;"</span> <span class="variable">@duration</span> infinite <span class="variable">@ease</span>;</div><div class="line">      <span class="attribute">transition-delay</span>:<span class="string">~"@&#123;i&#125;ms"</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">@keyframes</span> <span class="string">~"circle-@&#123;i&#125;"</span> &#123;</div><div class="line">      <span class="comment">// do something...</span></div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.loopAnimation</span>(<span class="variable">@i</span> + <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>结构： <code>~&quot;字符@{变量}字符&quot;</code>;</p></li><li><p>使用 JS</p><p>因为 Less 是由 JS 编写，所以 Less 有一得天独厚的特性：代码中使用 Javascript 。</p><figure class="highlight less"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* Less */</span></div><div class="line"><span class="variable">@content:</span><span class="built_in">`"aaa".toUpperCase()`</span>;</div><div class="line"><span class="selector-id">#randomColor</span>&#123;</div><div class="line">  <span class="variable">@randomColor:</span> <span class="string">~"rgb(`Math.round(Math.random() * 256)`,`Math.round(Math.random() * 256)`,`Math.round(Math.random() * 256)`)"</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#wrap</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="string">~"`Math.round(Math.random() * 100)`px"</span>;</div><div class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span>&#123;</div><div class="line">      <span class="attribute">content</span>:<span class="variable">@content</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="attribute">height</span>: <span class="string">~"`window.innerHeight`px"</span>;</div><div class="line">  <span class="attribute">alert</span>:<span class="string">~"`alert(1)`"</span>;</div><div class="line">  <span class="selector-id">#randomColor</span>();</div><div class="line">  <span class="attribute">background-color</span>: <span class="variable">@randomColor</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* 生成后的 CSS */</span></div><div class="line"></div><div class="line"><span class="comment">// 弹出 1</span></div><div class="line"><span class="selector-id">#wrap</span>&#123;</div><div class="line">  <span class="attribute">width</span>: 随机值（<span class="number">0</span>~<span class="number">100</span>）px;</div><div class="line">  <span class="attribute">height</span>: <span class="number">743px</span>;<span class="comment">//由电脑而异</span></div><div class="line">  <span class="attribute">background</span>: 随机颜色;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#wrap</span><span class="selector-pseudo">::after</span>&#123;</div><div class="line">  <span class="attribute">content</span>:<span class="string">"AAA"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;前几个月 ， 有个 <code>CSS in JS</code> 的概念非常火，现在 看来 <code>JS in CSS</code> 也未曾不可。<br>我觉得完全可以根据 Less 这个特性来造个轮子，JS来控制 CSS ，形成 动态属性，如果成功 很可能会改变 现在前端的打开姿势。</p></li></ol><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;从我学习 Web 以来，无数前辈告诉我，Web 有三大基石，JS 控制行为，HTML 控制结构，CSS 控制样式。我一直再想 为什么要分为 3 个语言？为什么不能合成一个语言？或者说 就没有更合适的吗？在这几年的 Web 发展中，页面从 MVC  到 现在的 MVVC，结构正在发生着改变，但 其根本 不过是造了一个又一个 完美的轮子。我们为什么就不能打破传统呢？让 前端的 三大基石 变成一座大山呢 ？<br>&nbsp;&nbsp;&nbsp;&nbsp;请试想一下，那该是个怎样的世界。</p><hr><p>以上便是 Less 的特性总结，希望本文能对你有所帮助。<br>本文会同步更新在以下地方(已链接本人主页),欢迎你在常逛的网站中关注我。 </p><ul><li><a href="https://juejin.im/user/599b6d255188252447222dfd" target="_blank" rel="external nofollow">掘金</a></li><li><a href="http://www.jianshu.com/users/2fb2fd6fda89/timeline" target="_blank" rel="external nofollow">简书</a></li><li><a href="http://www.cnblogs.com/jinma" target="_blank" rel="external nofollow">博客园</a>  </li><li><a href="http://blog.csdn.net/Acceptee" target="_blank" rel="external nofollow">CSDN</a></li><li><a href="https://segmentfault.com/u/majin" target="_blank" rel="external nofollow">segmentfault</a></li></ul><p>转载本站文章请注明作者和出处  <a href="http://tomotoes.com">tomotoes.com</a>，请勿用于任何商业用途。<br>深入Web全栈各项技术，坚持原创，文章更新虽不定，但只为质量而生。<br>建议收藏这个坏掉的番茄  <a href="http://tomotoes.com">tomotoes.com</a> ，愿陪你一起在全栈的道路上努力前行！</p><style>.post-content ol li > p:nth-child(1){font-weight:bold;color:#555;text-shadow: rgb(207, 207, 207) 0 0 1px;}</style>]]></content>
    
    <summary type="html">
    
      Less,CSS,预处理器,前端
    
    </summary>
    
      <category term="Web" scheme="http://tomotoes.com/blog/categories/Web/"/>
    
    
      <category term="Less" scheme="http://tomotoes.com/blog/tags/Less/"/>
    
  </entry>
  
  <entry>
    <title>VSCode之高效快捷键</title>
    <link href="http://tomotoes.com/blog//posts/8c0be06/"/>
    <id>http://tomotoes.com/blog//posts/8c0be06/</id>
    <published>2017-12-05T08:40:11.000Z</published>
    <updated>2018-01-21T04:08:49.794Z</updated>
    
    <content type="html"><![CDATA[<!-- head --><p>绝对福利,不容错过！<a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>常言道：“工欲善其事必先利其器”，而我的器便是 <a href="https://code.visualstudio.com/" target="_blank" rel="noopener">VSCode</a> ，这是一款高颜值的编辑器。<br>不过在经过长时间的使用后，发现总有些一些快捷键令人难以接受。<br>遂花了一天的时间，将快捷键全部调整了一遍，总结如下：</p><blockquote><p><img class="github-emoji" title="no_mouth" alt="no_mouth" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f636.png?v7" height="20" width="20"> 底部有源文件,可供你替换 </p></blockquote><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h3><ol><li>Alt + Enter<br> <span class="Key">跳转到下一个编辑点</span></li><li>Ctrl + A<br> <span class="Key">全选</span></li><li>Ctrl + Shift + A<br> <span class="Key">Autoprefixer/Eslint</span></li><li>Ctrl + Shift + Z<br> <span class="Key">重做</span></li><li>Ctrl + R<br> <span class="Key">注释当前行</span></li><li>Ctrl + T<br><span class="Key">格式化</span></li><li>Ctrl + Y<br><span class="Key">选择下一个匹配</span></li><li>Ctrl + Shift + Y<br><span class="Key">选择所有匹配项</span></li><li>Ctrl + /<br><span class="Key">增加注释</span></li><li>Ctrl + J<br><span class="Key">连接下一行</span></li><li>Ctrl + Shift + J<br><span class="Key">将标签内的内容全部缩成一行</span></li><li>Ctrl + P<br><span class="Key">交换字符位置</span></li><li>Ctrl + G <ul><li><span class="Key">浏览markdown</span></li><li><span class="Key">开启LiveServer</span></li><li><span class="Key">Alt + G 关闭LiveServer</span></li></ul></li><li>Alt + .<br><span class="Key">Emmet 命令列表</span></li><li>Alt + z<br><span class="Key">自动换行</span></li><li>Ctrl + L<br><span class="Key">选中一行</span></li><li>Ctrl + Shift + L<br><span class="Key">跳转行</span></li><li>Ctrl + D<br><span class="Key">删除行</span></li><li>Ctrl + F<br><span class="Key">搜索</span></li><li>Ctrl + H<br><span class="Key">替换</span></li><li>Ctrl + Shift + C<br><span class="Key">向下复制一行 </span></li><li>Ctrl + Shift + V<br><span class="Key">打开Ditto</span></li><li>Ctrl + Enter<br><span class="Key">在当前行下边插入一行 </span></li><li>Shift + Enter<br><span class="Key">在当前行上方插入一行</span></li><li>Alt + Up/Down<br><span class="Key">移动行</span></li><li>Ctrl + Alt + down<br><span class="Key">列编辑 </span></li><li>Ctrl + Shift + []<br><span class="Key">折叠代码</span> </li><li>Alt + X<br><span class="Key">光标撤销</span></li><li>Ctrl + F5<br><span class="Key">Code Run</span></li><li>Ctrl + Shift + Space<br><span class="Key">显示参数</span></li><li>Ctrl  + 左键<br><span class="Key">多处编辑</span></li><li>Ctrl  + Shift + 左键<br><span class="Key">块选择</span></li><li>Ctrl + Alt + Up/Down<br><span class="Key">指针上移/下移</span></li><li>Alt + Shift + Right<br><span class="Key">选中标签内中的内容</span></li><li>Alt + Shift + Left<br><span class="Key">选中标签中的第一个子标签</span></li><li>Alt + Left<br><span class="Key">移除包裹标签</span></li><li>Alt + Right<br><span class="Key">键入标签名 包围所在标签 与 多光标一起使用 威力无穷</span></li><li>Alt + Shift +Enter<br><span class="Key">将当前标签替换成键入的标签</span></li><li>Ctrl + Shift + J<br><span class="Key">将标签内的内容全部缩成一行</span></li><li>Alt + Enter<br><span class="Key">跳转到下一个编辑点</span></li><li>F12<br><span class="Key">移动到定义处</span></li><li>Alt+F12<br><span class="Key">定义处缩略图,可更改</span></li><li>Shift+F12<br><span class="Key">列出所有的引用</span></li></ol><h3 id="命令窗口"><a href="#命令窗口" class="headerlink" title="命令窗口"></a>命令窗口</h3><ol><li>F1</li><li>Ctrl + Shift + P</li><li>Ctrl + E 输入 &gt;</li><li>Ctrl + P 输入 &gt;</li></ol><p>其中在 Ctrl + E / P 窗口中还可以这么玩 :</p><ul><li>直接输入文件名，跳转到文件</li><li>? 列出当前可执行的动作</li><li>! 显示 Errors或 Warnings，也可以 Ctrl+Shift+M</li><li>: 跳转到行数</li><li>@ 跳转到 symbol（搜索变量或者函数），也可以 Ctrl+Shift+O 直接进入</li><li>@ 根据分类跳转 symbol，查找属性或函数，也可以 Ctrl+Shift+O 后输入:进入</li><li># 根据名字查找 symbol</li></ul><h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><ol><li>Ctrl + O<br> <span class="Key">打开文件</span></li><li>Ctrl + Shift + O<br> <span class="Key">打开文件夹</span></li><li>Ctrl + Alt + O<br> <span class="Key">打开本地Git项目</span></li><li>Ctrl + B<br> <span class="Key">打开最近项目</span></li><li>Alt + R (需先Ctrl + Shift + E)<br> <span class="Key">打开聚焦文件的路径</span></li></ol><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><ol><li>Ctrl + Shift + T<br> <span class="Key">打开关闭后的标签</span></li><li>Ctrl + Num<br> <span class="Key">聚焦到某个标签</span></li><li>Ctrl + W<br> <span class="Key">关闭当前标签</span></li></ol><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><ol><li>F5<br> <span class="Key">调试</span></li><li>Shift + F5<br> <span class="Key">运行 不调试</span></li><li>F10<br> <span class="Key">单步执行</span></li></ol><p><strong>注意事项</strong></p><ul><li>先关掉所有的Chrome</li><li>启动调试 Launch to Chrome</li><li>可以使用断点，单独调试</li><li>还可以像Chrome调试台那样 去使用调试<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$(&quot;#header&quot;).style.background</div><div class="line">获取 header的背景颜色</div><div class="line"></div><div class="line">$ </div><div class="line">document.querySelector 。  </div><div class="line"></div><div class="line">$$</div><div class="line">相当于 document.querySelectorAll 。  </div><div class="line"></div><div class="line">$_ </div><div class="line">返回上一个表达式的值  </div><div class="line"></div><div class="line">dir</div><div class="line">console.dir  </div><div class="line"></div><div class="line">keys</div><div class="line">取对象的键名, 返回键名组成的数组 </div><div class="line"></div><div class="line">values(object)</div><div class="line">返回一个数组，该数组包含属于指定对象的所有属性值。</div><div class="line"></div><div class="line">dirxml(object)</div><div class="line"></div><div class="line">$(&quot;#header&quot;).css(&quot;color&quot;,&quot;red&quot;);</div><div class="line">使用页面中的框架,记录jQuery</div><div class="line"></div><div class="line">1 + 2</div><div class="line">普通输入 </div><div class="line"></div><div class="line">function()&#123;alert(1);&#125;</div><div class="line">函数</div></pre></td></tr></table></figure></li></ul><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><ol><li>Ctrl + ,<br> <span class="Key">设置</span></li><li>Ctrl + Shift + ,<br> <span class="Key">快捷键</span></li><li>Ctrl + Alt + ,<br> <span class="Key">代码片段</span></li><li>Alt + F2<br> <span class="Key">选择主题</span></li><li><span class="Key">Alt + F1</span><br> 改变语言</li><li><span class="Key">设置</span><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">如果想快速找到插件的设置 只要打开设置 看看分类就好了</div><div class="line">然后右键 前面的复制到设置！</div><div class="line">然后在自己的设置前面 也可以选择编辑</div></pre></td></tr></table></figure></li></ol><h3 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h3><ol><li>Ctrl + M<br> <span class="Key">打开新窗口</span></li><li>Ctrl + Shift +M<br> <span class="Key">重新载入</span></li><li>Ctrl + \<br> <span class="Key">多栏编辑</span></li><li>Ctrl + Shift + \<br> <span class="Key">切换多栏布局</span></li><li>Alt + W<br> <span class="Key">只保留当前栏</span></li><li>Alt + A<br> <span class="Key">当前栏增大视图</span></li><li>Alt + Num<br> <span class="Key">聚焦到第Num个栏</span></li></ol><h3 id="Booksmarks"><a href="#Booksmarks" class="headerlink" title="Booksmarks"></a>Booksmarks</h3><ol><li>Ctrl + Q<br> <span class="Key">切换书签</span></li><li>Ctrl + Shift + Q<br><span class="Key"> 跳转到下一个书签</span></li><li>Ctrl + Alt + Q<br><span class="Key">跳转到上一个书签</span></li><li>Ctrl + Shift + Alt + Q<br> <span class="Key">书签列表</span></li><li>F1 + Clear remove all bookmarks in the current file<br><span class="Key">清除当前文件的所有标签</span></li><li>F1 + Clear from All Files remove all bookmarks from all files<br><span class="Key"> 清除所有标签</span></li></ol><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><ol><li>Ctrl + S<br> <span class="Key">保存当前文件</span></li><li>Ctrl + Shift +S<br> <span class="Key">保存所有文件</span></li><li>Ctrl + Alt + S<br> <span class="Key">另存为</span></li><li>Ctrl + N<br><span class="Key"> 新建文件</span></li><li>Ctrl + Shift + N<br><span class="Key"> 新建文件夹</span></li></ol><h3 id="侧边栏"><a href="#侧边栏" class="headerlink" title="侧边栏"></a>侧边栏</h3><ol><li>Ctrl + Shift + E<br> <span class="Key">聚焦到资源管理器 </span></li><li>Ctrl + Shift + F<br> <span class="Key">全局搜索 </span></li><li>Ctrl + Shift + D<br><span class="Key"> 调试代码  </span> </li><li>Ctrl + Shift + G<br><span class="Key"> Git版本库  </span></li><li>Ctrl + Shift + X<br><span class="Key"> 插件商场  </span></li><li>Ctrl + Shift + B<br> <span class="Key">切换侧边栏</span></li><li>Ctrl + Shift + H<br><span class="Key"> 全局替换</span></li></ol><h3 id="底栏"><a href="#底栏" class="headerlink" title="底栏"></a>底栏</h3><ol><li>Ctrl + Shift + W<br> <span class="Key">问题</span><ul><li>F8<br><span class="Key">下一个错误/警告</span></li><li>Shift + F8<br><span class="Key">上一个错误/警告</span></li></ul></li><li>Ctrl + Shift + R<br> <span class="Key">调试控制台</span></li><li>Ctrl + Shift + U<br><span class="Key"> 输出</span></li><li>Alt + Q<br> <span class="Key">终端</span><ul><li>Ctrl+↑ / ↓<br><span class="Key">上下滚动</span></li></ul></li></ol><h3 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h3><ol><li>Alt + B<br> <span class="Key">粗体</span></li><li>Ctrl + i<br> <span class="Key">斜体</span></li><li>Ctrl + Shift + [/]<br> <span class="Key">增加标题等级</span></li><li>Ctrl + G<br> <span class="Key">浏览视图</span></li><li>右键Markdown视图<br> <span class="Key">保存多种类型</span></li></ol><h3 id="其他特性"><a href="#其他特性" class="headerlink" title="其他特性"></a>其他特性</h3><ol><li>悬停提示</li><li>文件拖拽移动</li><li>双击变量 高亮匹配相同词</li><li>code ./ 使用VSCode打开当前文件</li><li>F11 全屏 </li><li>文件右键<br><strong>打开资源管理栏 Ctrl+ Shift +E 右键</strong> <ul><li>在资源管理器中打开</li><li>在终端打开</li><li>选择以比较 然后在选择一个文件 即可进行比较</li><li>复制路径 Alt + Shift+C</li><li>Git 查看该文件的历史</li></ul></li><li>Git<ol><li>F1<ul><li>View Git History (git log) (git.viewHistory)</li><li>View File History (git.viewFileHistory)</li><li>View Line History (git.viewLineHistory)</li></ul></li><li>Alt + F3<br><span class="Key">查看文件更改</span></li></ol></li><li>NPM &amp;&amp; Task<ol><li>Ctrl + I<br><span class="Key">导入模块 </span></li><li>Alt + F5<br><span class="Key">运行脚本</span></li><li>Ctrl+u<br><span class="Key">运行任务</span></li></ol></li></ol><h3 id="源文件"><a href="#源文件" class="headerlink" title="源文件"></a>源文件</h3><p><a id="codeHide" class="alone button button-3d button-primary button-rounded">点击显/隐源文件</a> </p><div id="sourceCode" style="display:none"><br><figure class="highlight json"><table><tr><td class="code"><pre><div class="line">[</div><div class="line">  &#123;</div><div class="line">      <span class="attr">"key"</span>: <span class="string">"ctrl+l"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"expandLineSelection"</span>,</div><div class="line">      <span class="attr">"when"</span>: <span class="string">"editorTextFocus"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">      <span class="attr">"key"</span>: <span class="string">"alt+x"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"cursorUndo"</span>,</div><div class="line">      <span class="attr">"when"</span>: <span class="string">"editorTextFocus"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">      <span class="attr">"key"</span>: <span class="string">"ctrl+shift+f"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"workbench.view.search"</span>,</div><div class="line">      <span class="attr">"when"</span>: <span class="string">"!searchViewletVisible"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">      <span class="attr">"key"</span>: <span class="string">"ctrl+r"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"editor.action.commentLine"</span>,</div><div class="line">      <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; !editorReadonly"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">      <span class="attr">"key"</span>: <span class="string">"ctrl+d"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"editor.action.deleteLines"</span>,</div><div class="line">      <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; !editorReadonly"</span></div><div class="line">  &#125;,</div><div class="line">  </div><div class="line">  &#123;</div><div class="line">      <span class="attr">"key"</span>: <span class="string">"alt+f1"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"workbench.action.editor.changeLanguageMode"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">      <span class="attr">"key"</span>: <span class="string">"shift+enter"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"editor.action.insertLineBefore"</span>,</div><div class="line">      <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; !editorReadonly"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">      <span class="attr">"key"</span>: <span class="string">"ctrl+shift+c"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"editor.action.copyLinesDownAction"</span>,</div><div class="line">      <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; !editorReadonly"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">      <span class="attr">"key"</span>: <span class="string">"alt+r"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"revealFileInOS"</span>,</div><div class="line">      <span class="attr">"when"</span>: <span class="string">"explorerViewletFocus &amp;&amp; explorerViewletVisible"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">      <span class="attr">"key"</span>: <span class="string">"ctrl+g"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"extension.liveServer.goOnline"</span>,</div><div class="line">      <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; editorLangId != 'markdown'"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">      <span class="attr">"key"</span>: <span class="string">"alt+g"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"extension.liveServer.goOffline"</span>,</div><div class="line">      <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; editorLangId != 'markdown'"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">      <span class="attr">"key"</span>: <span class="string">"ctrl+q"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"bookmarks.toggle"</span>,</div><div class="line">      <span class="attr">"when"</span>: <span class="string">"editorTextFocus"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">      <span class="attr">"key"</span>: <span class="string">"ctrl+shift+q"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"bookmarks.jumpToNext"</span>,</div><div class="line">      <span class="attr">"when"</span>: <span class="string">"editorTextFocus"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">      <span class="attr">"key"</span>: <span class="string">"ctrl+alt+q"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"bookmarks.jumpToPrevious"</span>,</div><div class="line">      <span class="attr">"when"</span>: <span class="string">"editorTextFocus"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">      <span class="attr">"key"</span>: <span class="string">"ctrl+shift+alt+q"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"bookmarks.listFromAllFiles"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">      <span class="attr">"key"</span>: <span class="string">"ctrl+y"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"editor.action.addSelectionToNextFindMatch"</span>,</div><div class="line">      <span class="attr">"when"</span>: <span class="string">"editorFocus"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">      <span class="attr">"key"</span>: <span class="string">"ctrl+shift+o"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"workbench.action.files.openFolder"</span></div><div class="line">  &#125;,</div><div class="line">  &#123; <span class="attr">"key"</span>: <span class="string">"ctrl+/"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"editor.action.blockComment"</span>,</div><div class="line">      <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; !editorReadonly"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">      <span class="attr">"key"</span>: <span class="string">"ctrl+shift+s"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"workbench.action.files.saveAll"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">      <span class="attr">"key"</span>: <span class="string">"ctrl+alt+s"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"workbench.action.files.saveAs"</span></div><div class="line">  &#125;,</div><div class="line">  &#123; </div><div class="line">      <span class="attr">"key"</span>: <span class="string">"ctrl+shift+y"</span>,               </div><div class="line">      <span class="attr">"command"</span>: <span class="string">"editor.action.changeAll"</span>,</div><div class="line">      <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; !editorReadonly"</span> </div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">      <span class="attr">"key"</span>: <span class="string">"ctrl+t"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"HookyQR.beautify"</span>,</div><div class="line">      <span class="attr">"when"</span>: <span class="string">"editorFocus"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">      <span class="attr">"key"</span>: <span class="string">"ctrl+j"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"editor.action.joinLines"</span>,</div><div class="line">      <span class="attr">"when"</span>: <span class="string">"editorFocus"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">      <span class="attr">"key"</span>: <span class="string">"ctrl+m"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"editor.action.insertSnippet"</span>,</div><div class="line">      <span class="attr">"when"</span>: <span class="string">"editorFocus"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">      <span class="attr">"key"</span>: <span class="string">"alt+enter"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"editor.action.inspectTMScopes"</span>,</div><div class="line">      <span class="attr">"when"</span>: <span class="string">"editorFocus"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">      <span class="attr">"key"</span>: <span class="string">"ctrl+p"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"editor.action.transposeLetters"</span>,</div><div class="line">      <span class="attr">"when"</span>: <span class="string">"editorFocus"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">      <span class="attr">"key"</span>: <span class="string">"ctrl+shift+a"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"eslint.executeAutofix"</span>,</div><div class="line">      <span class="attr">"when"</span>: <span class="string">"editorFocus"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">      <span class="attr">"key"</span>: <span class="string">"ctrl+n"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"explorer.newFile"</span>,</div><div class="line">      <span class="attr">"when"</span>: <span class="string">"editorFocus"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">      <span class="attr">"key"</span>: <span class="string">"ctrl+shift+n"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"explorer.newFolder"</span>,</div><div class="line">      <span class="attr">"when"</span>: <span class="string">"editorFocus"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">      <span class="attr">"key"</span>: <span class="string">"ctrl+alt+,"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"workbench.action.openSnippets"</span>,</div><div class="line">      <span class="attr">"when"</span>: <span class="string">"editorFocus"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">      <span class="attr">"key"</span>: <span class="string">"alt+f2"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"workbench.action.selectTheme"</span>,</div><div class="line">      <span class="attr">"when"</span>: <span class="string">"editorFocus"</span></div><div class="line">  &#125;,</div><div class="line">  &#123; </div><div class="line">      <span class="attr">"key"</span>: <span class="string">"ctrl+m"</span>,          </div><div class="line">      <span class="attr">"command"</span>: <span class="string">"workbench.action.newWindow"</span> </div><div class="line">  &#125;,</div><div class="line">  &#123; </div><div class="line">      <span class="attr">"key"</span>: <span class="string">"ctrl+shift+,"</span>,         </div><div class="line">      <span class="attr">"command"</span>: <span class="string">"workbench.action.openGlobalKeybindings"</span> </div><div class="line">  &#125;,</div><div class="line">  &#123; </div><div class="line">      <span class="attr">"key"</span>: <span class="string">"ctrl+u"</span>,         </div><div class="line">      <span class="attr">"command"</span>: <span class="string">"workbench.action.tasks.runTask"</span> </div><div class="line">  &#125;,</div><div class="line">  &#123; </div><div class="line">      <span class="attr">"key"</span>: <span class="string">"f11"</span>,              </div><div class="line">      <span class="attr">"command"</span>: <span class="string">"workbench.action.toggleZenMode"</span> </div><div class="line">  &#125;,</div><div class="line">  &#123;   </div><div class="line">      <span class="attr">"key"</span>: <span class="string">"ctrl+f5"</span>,           </div><div class="line">      <span class="attr">"command"</span>: <span class="string">"code-runner.run"</span> </div><div class="line">  &#125;,</div><div class="line">  &#123;   </div><div class="line">      <span class="attr">"key"</span>: <span class="string">"ctrl+i"</span>,           </div><div class="line">      <span class="attr">"command"</span>: <span class="string">"npm-intellisense.import"</span> ,</div><div class="line">      <span class="attr">"when"</span>: <span class="string">"editorLangId != 'markdown'"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;   </div><div class="line">      <span class="attr">"key"</span>: <span class="string">"alt+f5"</span>,           </div><div class="line">      <span class="attr">"command"</span>: <span class="string">"npm-script.run"</span> </div><div class="line">  &#125;,</div><div class="line">  &#123; </div><div class="line">      <span class="attr">"key"</span>: <span class="string">"shift+f5"</span>,              </div><div class="line">      <span class="attr">"command"</span>: <span class="string">"workbench.action.debug.run"</span>,</div><div class="line">      <span class="attr">"when"</span>: <span class="string">"!inDebugMode"</span> </div><div class="line">  &#125;,</div><div class="line">  &#123; </div><div class="line">      <span class="attr">"key"</span>: <span class="string">"ctrl+shift+\\"</span>,           </div><div class="line">      <span class="attr">"command"</span>: <span class="string">"workbench.action.toggleEditorGroupLayout"</span> </div><div class="line">  &#125;,</div><div class="line">  &#123; </div><div class="line">      <span class="attr">"key"</span>: <span class="string">"ctrl+shift+b"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"workbench.action.toggleSidebarVisibility"</span> </div><div class="line">  &#125;,</div><div class="line">  &#123; </div><div class="line">      <span class="attr">"key"</span>: <span class="string">"ctrl+g"</span>,              </div><div class="line">      <span class="attr">"command"</span>: <span class="string">"markdown-preview-enhanced.openPreview"</span>,</div><div class="line">      <span class="attr">"when"</span>: <span class="string">"editorLangId == 'markdown'"</span> </div><div class="line">  &#125;,</div><div class="line">  &#123; </div><div class="line">      <span class="attr">"key"</span>: <span class="string">"ctrl+shift+l"</span>,                </div><div class="line">      <span class="attr">"command"</span>: <span class="string">"workbench.action.gotoLine"</span> </div><div class="line">  &#125;,</div><div class="line">  &#123; </div><div class="line">      <span class="attr">"key"</span>: <span class="string">"alt+a"</span>,              </div><div class="line">      <span class="attr">"command"</span>: <span class="string">"workbench.action.increaseViewSize"</span> ,</div><div class="line">      <span class="attr">"when"</span>: <span class="string">"editorLangId != 'markdown'&amp;&amp;editorFocus"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">      <span class="attr">"key"</span>: <span class="string">"alt+w"</span>,              </div><div class="line">      <span class="attr">"command"</span>: <span class="string">"workbench.action.joinTwoGroups"</span> ,</div><div class="line">      <span class="attr">"when"</span>: <span class="string">"editorFocus"</span></div><div class="line">  &#125;,</div><div class="line">  &#123; <span class="attr">"key"</span>: <span class="string">"ctrl+1"</span>,                 <span class="attr">"command"</span>: <span class="string">"workbench.action.openEditorAtIndex1"</span> &#125;,</div><div class="line">  &#123; <span class="attr">"key"</span>: <span class="string">"ctrl+2"</span>,                 <span class="attr">"command"</span>: <span class="string">"workbench.action.openEditorAtIndex2"</span> &#125;,</div><div class="line">  &#123; <span class="attr">"key"</span>: <span class="string">"ctrl+3"</span>,                 <span class="attr">"command"</span>: <span class="string">"workbench.action.openEditorAtIndex3"</span> &#125;,</div><div class="line">  &#123; <span class="attr">"key"</span>: <span class="string">"ctrl+4"</span>,                 <span class="attr">"command"</span>: <span class="string">"workbench.action.openEditorAtIndex4"</span> &#125;,</div><div class="line">  &#123; <span class="attr">"key"</span>: <span class="string">"ctrl+5"</span>,                 <span class="attr">"command"</span>: <span class="string">"workbench.action.openEditorAtIndex5"</span> &#125;,</div><div class="line">  &#123; <span class="attr">"key"</span>: <span class="string">"ctrl+6"</span>,                 <span class="attr">"command"</span>: <span class="string">"workbench.action.openEditorAtIndex6"</span> &#125;,</div><div class="line">  &#123; <span class="attr">"key"</span>: <span class="string">"ctrl+7"</span>,                 <span class="attr">"command"</span>: <span class="string">"workbench.action.openEditorAtIndex7"</span> &#125;,</div><div class="line">  &#123; <span class="attr">"key"</span>: <span class="string">"ctrl+8"</span>,                 <span class="attr">"command"</span>: <span class="string">"workbench.action.openEditorAtIndex8"</span> &#125;,</div><div class="line">  &#123; <span class="attr">"key"</span>: <span class="string">"ctrl+9"</span>,                 <span class="attr">"command"</span>: <span class="string">"workbench.action.openEditorAtIndex9"</span> &#125;,</div><div class="line">  &#123; <span class="attr">"key"</span>: <span class="string">"alt+1"</span>,                <span class="attr">"command"</span>: <span class="string">"workbench.action.focusFirstEditorGroup"</span> &#125;,</div><div class="line">  &#123; <span class="attr">"key"</span>: <span class="string">"alt+2"</span>,                <span class="attr">"command"</span>: <span class="string">"workbench.action.focusSecondEditorGroup"</span> &#125;,</div><div class="line">  &#123; <span class="attr">"key"</span>: <span class="string">"alt+3"</span>,                <span class="attr">"command"</span>: <span class="string">"workbench.action.focusThirdEditorGroup"</span> &#125;,</div><div class="line">  &#123; </div><div class="line">      <span class="attr">"key"</span>: <span class="string">"ctrl+shift+m"</span>,              </div><div class="line">      <span class="attr">"command"</span>: <span class="string">"workbench.action.reloadWindow"</span> </div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">      <span class="attr">"key"</span>: <span class="string">"alt+."</span>,              </div><div class="line">      <span class="attr">"command"</span>: <span class="string">"workbench.action.showEmmetCommands"</span>,</div><div class="line">      <span class="attr">"when"</span>: <span class="string">"editorLangId != 'markdown'&amp;&amp;editorFocus"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">      <span class="attr">"key"</span>: <span class="string">"alt+enter"</span>,              </div><div class="line">      <span class="attr">"command"</span>: <span class="string">"editor.emmet.action.nextEditPoint"</span>,</div><div class="line">      <span class="attr">"when"</span>: <span class="string">"editorFocus"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">      <span class="attr">"key"</span>: <span class="string">"ctrl+shift+j"</span>,              </div><div class="line">      <span class="attr">"command"</span>: <span class="string">"editor.emmet.action.mergeLines"</span>,</div><div class="line">      <span class="attr">"when"</span>: <span class="string">"editorFocus"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">      <span class="attr">"key"</span>: <span class="string">"alt+left"</span>,              </div><div class="line">      <span class="attr">"command"</span>: <span class="string">"editor.emmet.action.removeTag"</span>,</div><div class="line">      <span class="attr">"when"</span>: <span class="string">"editorFocus"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">      <span class="attr">"key"</span>: <span class="string">"alt+right"</span>,              </div><div class="line">      <span class="attr">"command"</span>: <span class="string">"editor.emmet.action.wrapWithAbbreviation"</span>,</div><div class="line">      <span class="attr">"when"</span>: <span class="string">"editorFocus"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">      <span class="attr">"key"</span>: <span class="string">"alt+shift+right"</span>,              </div><div class="line">      <span class="attr">"command"</span>: <span class="string">"editor.emmet.action.balanceOut"</span>,</div><div class="line">      <span class="attr">"when"</span>: <span class="string">"editorFocus"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">      <span class="attr">"key"</span>: <span class="string">"alt+shift+left"</span>,              </div><div class="line">      <span class="attr">"command"</span>: <span class="string">"editor.emmet.action.balanceIn"</span>,</div><div class="line">      <span class="attr">"when"</span>: <span class="string">"editorFocus"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">      <span class="attr">"key"</span>: <span class="string">"alt+shift+enter"</span>,              </div><div class="line">      <span class="attr">"command"</span>: <span class="string">"editor.emmet.action.updateTag"</span>,</div><div class="line">      <span class="attr">"when"</span>: <span class="string">"editorFocus"</span></div><div class="line">  &#125;,</div><div class="line">  &#123; </div><div class="line">      <span class="attr">"key"</span>: <span class="string">"ctrl+shift+w"</span>,          </div><div class="line">      <span class="attr">"command"</span>: <span class="string">"workbench.actions.view.problems"</span> </div><div class="line">  &#125;,</div><div class="line">  &#123; </div><div class="line">      <span class="attr">"key"</span>: <span class="string">"alt+q"</span>,           </div><div class="line">        <span class="attr">"command"</span>: <span class="string">"workbench.action.terminal.toggleTerminal"</span> </div><div class="line">  &#125;,</div><div class="line">  &#123; </div><div class="line">      <span class="attr">"key"</span>: <span class="string">"ctrl+shift+r"</span>,          </div><div class="line">      <span class="attr">"command"</span>: <span class="string">"workbench.debug.action.toggleRepl"</span> </div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">      <span class="attr">"key"</span>: <span class="string">"ctrl+shift+a"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"autoprefixer.execute"</span>,</div><div class="line">      <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; editorLangId != 'javascript'"</span></div><div class="line">  &#125;,</div><div class="line">  &#123; </div><div class="line">      <span class="attr">"key"</span>: <span class="string">"ctrl+alt+o"</span>,            </div><div class="line">      <span class="attr">"command"</span>: <span class="string">"gitProjectManager.openProject"</span> </div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">      <span class="attr">"key"</span>: <span class="string">"ctrl+b"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"workbench.action.openRecent"</span></div><div class="line">  &#125;,</div><div class="line">  &#123; </div><div class="line">      <span class="attr">"key"</span>: <span class="string">"alt+b"</span>,                </div><div class="line">      <span class="attr">"command"</span>: <span class="string">"markdown.extension.editing.toggleBold"</span>,</div><div class="line">      <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; editorLangId == 'markdown'"</span> </div><div class="line">  &#125;,</div><div class="line">  &#123; </div><div class="line">      <span class="attr">"key"</span>: <span class="string">"alt+c"</span>,          </div><div class="line">      <span class="attr">"command"</span>: <span class="string">"markdown-preview-enhanced.syncPreview"</span>,</div><div class="line">      <span class="attr">"when"</span>: <span class="string">"editorLangId == 'markdown'"</span> </div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure><br><br></div><!-- foot --><hr><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>如果你的机器是Windows系统，同时也是VSCode重度使用者，不妨试试我的快捷键，可以让你的操作彻底飞起来~<img class="github-emoji" title="sunglasses" alt="sunglasses" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f60e.png?v7" height="20" width="20"></p><p>本文会同步更新在以下地方(已链接本人主页),欢迎你在常逛的网站中关注我。 </p><ul><li><a href="https://juejin.im/user/599b6d255188252447222dfd" target="_blank" rel="external nofollow">掘金</a></li><li><a href="http://www.jianshu.com/users/2fb2fd6fda89/timeline" target="_blank" rel="external nofollow">简书</a></li><li><a href="http://www.cnblogs.com/jinma" target="_blank" rel="external nofollow">博客园</a>  </li><li><a href="http://blog.csdn.net/Acceptee" target="_blank" rel="external nofollow">CSDN</a></li><li><a href="https://segmentfault.com/u/majin" target="_blank" rel="external nofollow">segmentfault</a></li></ul><p>转载本站文章请注明作者和出处  <a href="http://tomotoes.com">tomotoes.com</a>，请勿用于任何商业用途。<br>深入Web全栈各项技术，坚持原创，文章更新虽不定，但只为质量而生。<br>建议收藏这个坏掉的番茄  <a href="http://tomotoes.com">tomotoes.com</a> ，愿陪你一起在全栈的道路上努力前行！</p><p><style>.Key{color:#999;font-size:98%;}.button {color: #666; background-color: #EEE; border-color: #EEE; text-decoration: none; text-align: center; line-height: 40px; height: 40px; padding: 0 40px; margin: 0; display: inline-block; border: none; -webkit-box-sizing: border-box; box-sizing: border-box; -webkit-transition-property: all; transition-property: all; -webkit-transition-duration: .3s; transition-duration: .3s; font-size: 18px; font-weight: bold; font-family: @font-custom; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; letter-spacing: 3px; } .button:visited {color: #666; } .button:hover, .button:focus {background-color: #f6f6f6; text-decoration: none; outline: none; } .button:active, .button.active, .button.is-active {text-shadow: 0 1px 0 rgba(255, 255, 255, 0.3); text-decoration: none; background-color: #eeeeee; border-color: #cfcfcf; color: #d4d4d4; -webkit-transition-duration: 0s; transition-duration: 0s; -webkit-box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.2); box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.2); } .button.disabled, .button.is-disabled, .button:disabled {top: 0 !important; background: #EEE !important; border: 1px solid #DDD !important; text-shadow: 0 1px 1px white !important; color: #CCC !important; -webkit-box-shadow: none !important; box-shadow: none !important; opacity: .8 !important; } .button-primary {background-color: #1B9AF7; border-color: #1B9AF7; color: #FFF; } .button-primary:visited {color: #FFF; } .button-primary:hover, .button-primary:focus {background-color: #4cb0f9; border-color: #4cb0f9; color: #FFF; } .button-primary:active, .button-primary.active, .button-primary.is-active {background-color: #2798eb; border-color: #2798eb; color: #0880d7; } .button-rounded {border-radius: 4px; } .button-border.button-primary, .button-primary.button-border-thin, .button-primary.button-border-thick, .button-border-thin.button-primary, .button-border-thick.button-primary {color: #1B9AF7; } .button-border.button-primary:hover, .button-primary.button-border-thin:hover, .button-primary.button-border-thick:hover, .button-border.button-primary:focus, .button-primary.button-border-thin:focus, .button-primary.button-border-thick:focus, .button-border-thin.button-primary:hover, .button-border-thin.button-primary:focus, .button-border-thick.button-primary:hover, .button-border-thick.button-primary:focus {background-color: rgba(76, 176, 249, 0.9); color: rgba(255, 255, 255, 0.9); } .button-border.button-primary:active, .button-primary.button-border-thin:active, .button-primary.button-border-thick:active, .button-border.button-primary.active, .button-primary.active.button-border-thin, .button-primary.active.button-border-thick, .button-border.button-primary.is-active, .button-primary.is-active.button-border-thin, .button-primary.is-active.button-border-thick, .button-border-thin.button-primary:active, .button-border-thin.button-primary.active, .button-border-thin.button-primary.is-active, .button-border-thick.button-primary:active, .button-border-thick.button-primary.active, .button-border-thick.button-primary.is-active {background-color: rgba(39, 152, 235, 0.7); color: rgba(255, 255, 255, 0.5); opacity: .3; } .button-3d {position: relative; top: 0; -webkit-box-shadow: 0 7px 0 #bbbbbb, 0 8px 3px rgba(0, 0, 0, 0.2); box-shadow: 0 7px 0 #bbbbbb, 0 8px 3px rgba(0, 0, 0, 0.2); } .button-3d:hover, .button-3d:focus {-webkit-box-shadow: 0 7px 0 #bbbbbb, 0 8px 3px rgba(0, 0, 0, 0.2); box-shadow: 0 7px 0 #bbbbbb, 0 8px 3px rgba(0, 0, 0, 0.2); } .button-3d:active, .button-3d.active, .button-3d.is-active {top: 5px; -webkit-transition-property: all; transition-property: all; -webkit-transition-duration: .15s; transition-duration: .15s; -webkit-box-shadow: 0 2px 0 #bbbbbb, 0 3px 3px rgba(0, 0, 0, 0.2); box-shadow: 0 2px 0 #bbbbbb, 0 3px 3px rgba(0, 0, 0, 0.2); } .button-3d.button-primary {-webkit-box-shadow: 0 7px 0 #0880d7, 0 8px 3px rgba(0, 0, 0, 0.3); box-shadow: 0 7px 0 #0880d7, 0 8px 3px rgba(0, 0, 0, 0.3); } .button-3d.button-primary:hover, .button-3d.button-primary:focus {-webkit-box-shadow: 0 7px 0 #077ace, 0 8px 3px rgba(0, 0, 0, 0.3); box-shadow: 0 7px 0 #077ace, 0 8px 3px rgba(0, 0, 0, 0.3); } .button-3d.button-primary:active, .button-3d.button-primary.active, .button-3d.button-primary.is-active {-webkit-box-shadow: 0 2px 0 #0662a6, 0 3px 3px rgba(0, 0, 0, 0.2); box-shadow: 0 2px 0 #0662a6, 0 3px 3px rgba(0, 0, 0, 0.2); }</style></p><script>codeHide.addEventListener("click",function(){$("#sourceCode").slideToggle("slow")});</script>]]></content>
    
    <summary type="html">
    
      VSCode,快捷键,效率,工具
    
    </summary>
    
      <category term="工具" scheme="http://tomotoes.com/blog/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="VSCode" scheme="http://tomotoes.com/blog/tags/VSCode/"/>
    
      <category term="快捷键" scheme="http://tomotoes.com/blog/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
  </entry>
  
  <entry>
    <title>Webpack飞行手册</title>
    <link href="http://tomotoes.com/blog//posts/4d6f8cc5/"/>
    <id>http://tomotoes.com/blog//posts/4d6f8cc5/</id>
    <published>2017-11-30T11:16:57.000Z</published>
    <updated>2018-01-21T04:06:23.051Z</updated>
    
    <content type="html"><![CDATA[<!-- head --><p>现在是一个 Web 技术蓬发的时代。<a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在学习 Webpack 之前，我们需要了解一个概念：<strong>模块</strong>。</p><h3 id="何为模块？"><a href="#何为模块？" class="headerlink" title="何为模块？"></a>何为模块？</h3><p>如果你曾学过 Java , C# 之类的语言，一定会知道 Java 中的 import 或 C# 中的 using 吧？<br>比如：我想在 C# 中进行数据库操作，我只需要在代码头部加上 下面这两段代码即可。<br><figure class="highlight cs"><table><tr><td class="code"><pre><div class="line"><span class="keyword">using</span> System.Data;</div><div class="line"><span class="keyword">using</span> System.Data.SqlClient;</div></pre></td></tr></table></figure></p><p>这两段代码可以看成 两个与数据库操作相关的模块。<br>当我们需求是数据库，或者是读取 IO 等其他操作，我们便加载其他不同的模块。<br>很明显，这实现了编程中的一个非常重要的功能 <strong>按需加载</strong>。</p><p>在前端中 模块又该如何定义呢？<br>按照我个人的理解：</p><ul><li><p>在 HTML 中 模块 便是一个组件</p><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layer"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">name</span> %&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    &lt;% for(var i = 0; i &lt; People.length;++i) &#123; %&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">%=</span> <span class="attr">People</span>[<span class="attr">i</span>] %&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>在 CSS 中 模块 便是一个局部样式</p><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">header</span>&#123;</div><div class="line">    <span class="attribute">display</span>:block;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">header</span> <span class="selector-tag">h1</span>&#123;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">60px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>在 Javascript 中 模块 便是一个封装着方法或数据的脚本文件</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> People = &#123; <span class="attr">name</span>: <span class="string">"Simon"</span> &#125; ;</div><div class="line"><span class="built_in">module</span>.exports = People;</div></pre></td></tr></table></figure></li></ul><p>而我们又该怎样实现 在前端中加载模块呢？<br>下面是两个很常见的例子：</p><blockquote><p>在 Less 中  </p></blockquote><figure class="highlight css"><table><tr><td class="code"><pre><div class="line">@<span class="keyword">import</span> <span class="string">"header"</span>;</div><div class="line">@<span class="keyword">import</span> <span class="string">"layout"</span>;</div><div class="line">@<span class="keyword">import</span> <span class="string">"footer"</span>;</div></pre></td></tr></table></figure><blockquote><p>在 Javascript  </p></blockquote><figure class="highlight jsx"><table><tr><td class="code"><pre><div class="line"><span class="comment">// CommonJS</span></div><div class="line"><span class="keyword">const</span> $ = <span class="built_in">require</span>(<span class="string">"jQuery"</span>);</div><div class="line"></div><div class="line"><span class="comment">//es6</span></div><div class="line"><span class="keyword">let</span> People = &#123; <span class="attr">name</span>: <span class="string">"Simon"</span> &#125; ;</div><div class="line"><span class="built_in">module</span>.exports = People;</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"./layer.less"</span>;</div><div class="line"><span class="keyword">import</span> tpl <span class="keyword">from</span> <span class="string">"./layer.ejs"</span>;</div></pre></td></tr></table></figure><p>如果你直接运行以上代码，浏览器并不会解析，这个时候，就要依靠 Webpack 了！</p><h3 id="Webpack是什么"><a href="#Webpack是什么" class="headerlink" title="Webpack是什么"></a>Webpack是什么</h3><p>Webpack 是一款目前非常流行的前端模块打包工具，可以将项目中所加载的模块进行打包，以及将 一些浏览器不支持的语言进行转换。</p><p>Webpack 的打包原理是 先找到入口文件，递归探索出所有依赖的模块，最后 利用 Loader 进行不同文件类型的处理，打包成一个 Javascript 文件。</p><p>其中，Webpack 的两个最核心原理分别是：</p><ol><li><strong>一切皆模块</strong></li><li><strong>按需加载</strong></li></ol><p>当然 Webpack 的作用不止加载模块这么简单，前端的常用需求通常都可以实现：利用 Loader 转换 es6 、 Less 、 Typescript ，还可利用插件 开发多页面应用,等等诸多强大功能。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>下面，我将讲解 Webpack 的具体使用和配置。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>我一般在项目中使用 Webpack，都是先执行下面这四条命令进行 Webpack 的安装</p><ol><li>npm install -g webpack<br>在全局安装 Webpack，第一次使用时 执行</li><li>npm install --save-dev webpack<br>将 Webpack 安装到你的项目</li><li>npm init<br>npm初始化，会询问你的项目信息，可以回车跳过</li><li>npm install --save-dev webpack-dev-server<br> 在当前项目，安装 Webpack 服务器</li></ol><p>安装完成后，便是建立配置文件了。</p><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><p>在项目根目录下新建名为 webpack.config.js 的文件，<br>基本上 一个配置文件的大体结构就是下面这样：<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">modules.export=&#123;</div><div class="line">    entry:&#123;</div><div class="line">        <span class="comment">/* 入口文件 */</span></div><div class="line">    &#125;,</div><div class="line">    output:&#123;</div><div class="line">        <span class="comment">/* 出口文件 */</span></div><div class="line">    &#125;,</div><div class="line">    <span class="built_in">module</span>:&#123;</div><div class="line">        <span class="comment">/* Loader */</span></div><div class="line">        rules:[&#123;&#125;,&#123;&#125;,&#123;&#125;]</div><div class="line">    &#125;,</div><div class="line">    plugins:[ </div><div class="line">        <span class="comment">/* 插件 */</span> </div><div class="line">    ],</div><div class="line">    devtool: ...</div><div class="line">    devServer: &#123;...&#125;</div><div class="line">    resolve:&#123;...&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>我们下面就先分析 modules.export 各个属性</p><h3 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h3><p><strong>entry</strong><br>代表是入口文件，Webpack 工作的开始。<br>Webpack 会递归的探索出 入口文件中所依赖的模块，并按照顺序 利用 Loader 进行处理。<br>官网给出了其 3 种数据类型：</p><ol><li><p>字符串</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">entry: <span class="string">"app.js"</span>;</div></pre></td></tr></table></figure></li><li><p>数组<br>数组中的每一项都会被打包，形成互不依赖的文件</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">entry: [<span class="string">"app.js"</span>,<span class="string">"main.js"</span>];</div></pre></td></tr></table></figure></li><li><p>对象<br>对象中的每一个属性都会被打包，形成互不依赖的文件</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">entry:&#123;</div><div class="line">    app: <span class="string">"./src/js/app.js"</span>,</div><div class="line">    main: <span class="string">"./src/js/main.js"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><p>一般入口文件中多是 import 或者 require 等模块导入命令。</p><h3 id="出口"><a href="#出口" class="headerlink" title="出口"></a>出口</h3><p><strong>output</strong><br>顾名思义，Webpack打包后文件的具体配置<br>常用的属性有 4 个</p><ol><li>path: <code>${__dirname }/dist</code><br>打包后文件所在路径</li><li>filename: “js/[name].js”<br>打包后文件的名字，这里有 4 种常用的写法<ol><li>自定义</li><li>[name].js<br>代表的便是入口的文件名</li><li>[hash].js<br>此次打包后的hash值</li><li>[chunkhash]<br>该块打包后的hash值</li></ol></li></ol><ol><li>publicPath: <code>&quot;http://cdn.com/&quot;</code><br> 上线时的公共路径，主要应用于线上</li><li>chunkFilename: ‘js/[name].js’<br> 按需加载模块时输出的文件名称</li></ol><h3 id="Loader"><a href="#Loader" class="headerlink" title="Loader"></a>Loader</h3><p>Loader 是 Webpack 中最振奋人心的东西了！<br>将一切浏览器不支持的语言，处理成 浏览器可以支持。<br>针对各个文件类型，都有各种的 Loader 等你去挖掘。</p><p>Loader 的工作方式 是从右向左执行，链式地按照顺序进行编译。<br>loader 链中的第一个返回值给下一个 loader，在最后一个 loader，返回所预期的结果。</p><p>loader 可以是同步或异步函数，也可使用 options 对象去接受配置参数。</p><p>基础结构</p><figure class="highlight jsx"><table><tr><td class="code"><pre><div class="line"><span class="built_in">module</span>:&#123;</div><div class="line"> rules:[</div><div class="line">    &#123;</div><div class="line">  test:<span class="regexp">/\.xxx$/</span>,<span class="comment">//以xxx结尾的文件</span></div><div class="line">  loader: <span class="string">"xxx-loader"</span>,</div><div class="line">  exclude: &#123;排除的路径&#125;,</div><div class="line">  include: &#123;包含的路径&#125;,</div><div class="line">  options: &#123;Loader配置&#125;</div><div class="line">  &#125;</div><div class="line"> ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以很清楚的看到，Loader 利用 test 的正则 找到各个类型文件，然后使用 loader 进行处理，便可转换成浏览器支持的文件。</p><p>其中我知道的 loader 的写法有两种:</p><ol><li><p>每一个 loader 都是一个对象</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">loaders:[</div><div class="line"> &#123;<span class="attr">loader</span>:<span class="string">"style-loader"</span>&#125;,</div><div class="line"> &#123; <span class="attr">loader</span>: <span class="string">"css-loader?modules"</span>, <span class="attr">options</span>: &#123; <span class="attr">importLoaders</span>: <span class="number">1</span> &#125; &#125;,</div><div class="line"> &#123;<span class="attr">loader</span>: <span class="string">"less-loader"</span>&#125;</div><div class="line">]</div></pre></td></tr></table></figure></li><li><p>使用 ! 号拼接的写法</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">loader: <span class="string">"style-loader!css-loader?importLoaders=1!less-loader"</span></div></pre></td></tr></table></figure></li></ol><p>下面介绍三个 前端必备的 Loader 方式</p><h4 id="css"><a href="#css" class="headerlink" title="css"></a>css</h4><ol><li><p>style-loader<br>通过注入<code>&lt;style&gt;</code>标签将 CSS 添加到 DOM </p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm install style-loader --save-dev</div></pre></td></tr></table></figure></li><li><p>css-loader<br>css-loader像import / require（）一样解释@import和url（）并解析它们。</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm install css-loader --save-dev</div></pre></td></tr></table></figure></li><li><p>postcss-loader<br>补充 不兼容的css属性 的浏览器前缀</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm install post-loader --save-dev</div></pre></td></tr></table></figure></li><li><p>less-loader<br>将Less 转换成 CSS</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm install less --save-dev</div><div class="line">npm install less-loader --save-dev</div></pre></td></tr></table></figure></li></ol><h4 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h4><p>babel<br>主要用于将 es6 转换成 es2015<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm install --save-dev babel-core babel-loader babel-preset-es2015</div></pre></td></tr></table></figure></p><h4 id="图片-amp-字体"><a href="#图片-amp-字体" class="headerlink" title="图片 &amp; 字体"></a>图片 &amp; 字体</h4><ol><li><p>file-loader<br>用于压缩文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm install --save-dev file-loader</div></pre></td></tr></table></figure></li><li><p>url-loader<br>如果文件下于 规定限制，将会转换成 二进制编码</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm install --save-dev url-loader</div></pre></td></tr></table></figure></li></ol><h4 id="ejs"><a href="#ejs" class="headerlink" title="ejs"></a>ejs</h4><p>另外 我想介绍一下 自己常用的 ejs-loader</p><ol><li><p>配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm install --save-dev ejs-loader</div></pre></td></tr></table></figure> <figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">test:<span class="regexp">/\.ejs$/</span> , <span class="attr">loader</span>:<span class="string">"ejs-loader"</span>,</div></pre></td></tr></table></figure></li><li><p>使用</p></li></ol><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layer"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">name</span> %&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    &lt;% for(let i = 0; i &lt; Array.length;++i) &#123; %&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">%=</span> <span class="attr">Array</span>[<span class="attr">i</span>] %&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">//入口文件</span></div><div class="line"><span class="keyword">import</span> tpl <span class="keyword">from</span> <span class="string">"./layer.ejs"</span>;</div><div class="line"></div><div class="line"><span class="built_in">document</span>.body.innerHTML = tpl(&#123;</div><div class="line"> name:<span class="string">"Simon"</span>,</div><div class="line"> arr:[<span class="string">"Apple"</span>,<span class="string">"Xiaomi"</span>]</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>运行 生成后的页面 ，便会发现 ejs 组件已经被加进去了，<br>想象一下，我们在平时工作中是否可以把 一个轮播图，或者 排行榜 、评论 当成一个组件呢？</p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p><strong>plugins</strong><br>在日常工作中，我们使用 Loader 处理不同类型的文件，当有某种其他方面的需求时，比如 抽离 CSS 、生成多页面 HTML ，plugins 便派上了用场。</p><p>插件的使用，一般都要先 require 出来，然后在 plugins 属性中 进行初始化<br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> htmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">"html-webpack-plugin"</span>);</div><div class="line">......</div><div class="line">plugins: [ <span class="keyword">new</span> htmlWebpackPlugin(&#123;<span class="comment">/* options */</span>&#125;) ]</div></pre></td></tr></table></figure></p><p>下面将介绍 一些工作中常用的插件</p><ol><li><p>clean-webpack-plugin<br>主要用于 打包之前 先清空 打包目录下的文件，防止文件混乱。</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm install --save-dev clean-webpack-plugin</div></pre></td></tr></table></figure></li><li><p>html-webpack-plugin<br>主要用于生成HTML，可以规定 模板HTML，也可以为 模板传入参数，压缩文件等</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm install --save-dev html-webpack-plugin</div></pre></td></tr></table></figure></li></ol><p>这个插件可谓是 前端必备的，它的配置有很多<br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">new</span> htmlWebpackPlugin(&#123;</div><div class="line"> <span class="comment">//打包后的文件名</span></div><div class="line"> filename: <span class="string">"index.html"</span>,</div><div class="line"> </div><div class="line"> <span class="comment">//模板</span></div><div class="line"> template: <span class="string">"index.html"</span>,</div><div class="line"> </div><div class="line"> <span class="comment">//为true自动生成script标签添加到html中</span></div><div class="line"> <span class="comment">//或者写 body/head 标签名</span></div><div class="line"> inject: <span class="literal">false</span>,<span class="comment">//js的注入标签</span></div><div class="line"> </div><div class="line"> <span class="comment">//通过&lt;%= htmlWebpackPlugin.options.title  %&gt;引用</span></div><div class="line"> title: <span class="string">"参数title"</span>,</div><div class="line"> </div><div class="line"> <span class="comment">//通过&lt;%= htmlWebpackPlugin.options.date %&gt; 引用</span></div><div class="line"> date: <span class="keyword">new</span> <span class="built_in">Date</span>()</div><div class="line"> </div><div class="line"> <span class="comment">//网站的图标</span></div><div class="line"> favicon: <span class="string">'path/to/yourfile.ico'</span></div><div class="line"> </div><div class="line"> <span class="comment">//生成此次打包的hash</span></div><div class="line"> <span class="comment">//如果文件名中有哈希，便代表有 合理的缓冲</span></div><div class="line"> hash: <span class="literal">true</span>,</div><div class="line"> </div><div class="line">  <span class="comment">//排除的块</span></div><div class="line">  excludeChunks: [<span class="string">''</span>],</div><div class="line">  </div><div class="line"> <span class="comment">//选中的块 与入口文件相关</span></div><div class="line"> chunks: [<span class="string">'app'</span>,<span class="string">'people'</span>],</div><div class="line"> </div><div class="line"> <span class="comment">//压缩</span></div><div class="line"> minify:&#123; </div><div class="line"> removeComments: <span class="literal">true</span>,</div><div class="line"> collapseWhitespace: <span class="literal">true</span>,</div><div class="line"> removeRedundantAttributes: <span class="literal">true</span>,</div><div class="line"> useShortDoctype: <span class="literal">true</span>,</div><div class="line"> removeEmptyAttributes: <span class="literal">true</span>,</div><div class="line"> removeStyleLinkTypeAttributes: <span class="literal">true</span>,</div><div class="line"> keepClosingSlash: <span class="literal">true</span>,</div><div class="line"> minifyJS: <span class="literal">true</span>,</div><div class="line"> minifyCSS: <span class="literal">true</span>,</div><div class="line"> minifyURLs: <span class="literal">true</span>,</div><div class="line"> &#125;</div><div class="line"> </div><div class="line">&#125;),</div></pre></td></tr></table></figure></p><p>那么问题来了，我们在模板文件中 又该怎样使用参数呢？<br>直接按照 ejs 的语法写入 html 文件即可！<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">htmlWebpackPlugin.options.date</span> %&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p><p>生成后的模板文件<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">Thu Dec 07 2017 10:01:58 GMT+0800 (中国标准时间)</div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p><p>另外，如果想生成 多页面应用，只需 将上面的配置，多复制几遍即可。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">new</span> htmlWebpackPlugin(&#123; <span class="attr">filename</span>: <span class="string">"index1.html"</span>, &#125;</div><div class="line"><span class="keyword">new</span> htmlWebpackPlugin(&#123; <span class="attr">filename</span>: <span class="string">"index2.html"</span>, &#125;</div><div class="line"><span class="keyword">new</span> htmlWebpackPlugin(&#123; <span class="attr">filename</span>: <span class="string">"index3.html"</span>, &#125;</div></pre></td></tr></table></figure></p><ol><li><p>UglifyJsPlugin<br>主要用于压缩 Javascript 文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm i -D uglifyjs-webpack-plugin</div></pre></td></tr></table></figure></li><li><p>webpack.ProvidePlugin<br>自动加载模块，全局使用变量，下面借助 官网的DEMO</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">new</span> webpack.ProvidePlugin(&#123;</div><div class="line">  $: <span class="string">'jquery'</span>,</div><div class="line">  jQuery: <span class="string">'jquery'</span></div><div class="line">&#125;)</div><div class="line"><span class="comment">// in a module</span></div><div class="line">$(<span class="string">'#item'</span>); <span class="comment">// &lt;= 起作用</span></div><div class="line">jQuery(<span class="string">'#item'</span>); <span class="comment">// &lt;= 起作用</span></div><div class="line"><span class="comment">// $ 自动被设置为 "jquery" 输出的内容</span></div></pre></td></tr></table></figure></li><li><p>open-browser-webpack-plugin<br>打开服务器后 会自动打开浏览器端口，用起来 很方便</p></li><li>HotModuleReplacementPlugin<br>热更新插件</li></ol><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li><p>webpack<br>最基本的启动webpack命令。找到根目录下的webpack.config.js文件中的 entry属性，递归出所有项目中依赖的模块。</p></li><li><p>webpack -w<br>监控代码变化，实时进行打包更新</p></li><li>webpack -p<br>对打包后的文件进行压缩，利用线上发布</li><li>webpack -d<br>提供SourceMaps，方便调试代码</li><li>webpack –colors<br>输出结果带彩色，可以更详细的查看信息</li><li>webpack –profile<br>输出性能数据，可以看到每一步的耗时</li></ul><p>前两个命令使用频率会较大</p><h3 id="devtool"><a href="#devtool" class="headerlink" title="devtool"></a>devtool</h3><p>不知道你现在时候有没有一个想法？ webpack 打包后的文件就一定正确无误吗？ 如果发生错误的话，该怎么办呢？</p><p>devtool 属性 便提供了生成 sourcemap 的功能，具体有下面这些选项。</p><ol><li>source-map<br>此选项具有最完备的source map，但会减慢打包的速度；</li><li>cheap-module-source-map<br>生成一个不带列映射的map</li><li>eval-source-map<br>使用eval打包源文件模块，生成一个完整的source map。</li><li>cheap-module-eval-source-map<br>这是最快生成source map的方法，生成后的Source Map 会和打包后的 JavaScript 文件同行显示，但没有列映射，所以慎用</li></ol><h3 id="devServer"><a href="#devServer" class="headerlink" title="devServer"></a>devServer</h3><ol><li>contentBase: “./dist”,<br>本地服务器所加载的页面所在的目录</li><li>historyApiFallback: true,<br>再找不到文件的时候默认指向index.html</li><li>inline: true,<br>当源文件改变时会自动刷新页面</li><li>hot: true,<br>热加载开启</li><li>port:8080<br>设置默认监听端口</li></ol><h3 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h3><ol><li><p>extensions: [“.js”, “.html”, “.css”, “.txt”,”less”,”ejs”,”json”],<br>自动扩展文件后缀名，意味着我们require模块可以省略不写后缀名</p></li><li><p>alias: { Temp: path.resolve(__dirname, “src/templates/“) }<br>模块别名定义，直接 require(‘AppStore’) 即可,方便后续直接引用别名</p></li></ol><h3 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h3><h4 id="path"><a href="#path" class="headerlink" title="path"></a>path</h4><p>常用于字符串拼接路径。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</div></pre></td></tr></table></figure></p><p>有两个 API</p><ol><li><p>path.resolve()<br>将相对路径转换成绝对路径</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> aPath = path.resolve(<span class="string">"__dirname"</span>,<span class="string">"js"</span>,<span class="string">"main.js"</span>);</div><div class="line"><span class="comment">// aPath = 当前目录下的 js 文件夹的 main.js 文件的路径</span></div></pre></td></tr></table></figure></li><li><p>path.join()<br>对路径进行拼接</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> rPath = path.join(<span class="string">"source"</span>,<span class="string">"js"</span>,<span class="string">"main.js"</span>);</div><div class="line"><span class="comment">// aPath = //source/js/main.js</span></div></pre></td></tr></table></figure></li><li><p>__dirname<br>Node.js 中的全局变量，代表的是 项目的当前路径。常与 path 结合使用。</p></li></ol><h4 id="热更新"><a href="#热更新" class="headerlink" title="热更新"></a>热更新</h4><p>上面我们已经提过了 <code>webpack -w</code> 命令，它可以实时的监控 代码的改变，从而自动进行打包，但是 有个缺点 在于它不能及时的刷新界面。<br>在我们 开启服务器后，是无法使用 此命令的，这个时候，如果你还想进行 自动打包，又想自动刷新界面，热更新 便是不二之选，另外 Webpack 只会热更新 发生改变的模块，不会重新加载整个页面，便可加快开发速度。</p><p>开启步骤：</p><ol><li><p>修改 devServer属性</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">devServer: &#123;</div><div class="line"> hot: <span class="literal">true</span>,<span class="comment">//热加载开启</span></div><div class="line"> inline: <span class="literal">true</span>,<span class="comment">//文件改变时会自动刷新页面</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>增加热更新插件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</div><div class="line"><span class="comment">//Other property</span></div><div class="line">plugins: [</div><div class="line"> <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</div><div class="line">]</div></pre></td></tr></table></figure></li></ol><p>另外，只有修改 依赖的项目，才会进行实时更新。</p><h3 id="源文件"><a href="#源文件" class="headerlink" title="源文件"></a>源文件</h3><p>个人总结了很长时间的 Webpack 配置，希望能对你有帮助。<br><a id="codeHide" class="alone button button-3d button-primary button-rounded">点击显/隐源文件</a> </p><div id="sourceCode" style="display:none;"><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span></div><div class="line"> path = <span class="built_in">require</span>(<span class="string">"path"</span>),</div><div class="line"> </div><div class="line"> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>),</div><div class="line"> </div><div class="line"> htmlWebpackPlugin = <span class="built_in">require</span> (<span class="string">"html-webpack-plugin"</span>),</div><div class="line"> </div><div class="line"> ExtractTextPlugin = <span class="built_in">require</span> (<span class="string">"extract-text-webpack-plugin"</span>),</div><div class="line"> </div><div class="line"> marked = <span class="built_in">require</span>(<span class="string">"marked"</span>),</div><div class="line"> renderer = <span class="keyword">new</span> marked.Renderer(),</div><div class="line"> </div><div class="line"> CleanWebpackPlugin = <span class="built_in">require</span> (<span class="string">"clean-webpack-plugin"</span>),</div><div class="line"> </div><div class="line"> OpenBrowserPlugin = <span class="built_in">require</span> (<span class="string">"open-browser-webpack-plugin"</span>);</div><div class="line"> </div><div class="line"> <span class="keyword">const</span> MyConfig = &#123;</div><div class="line"> </div><div class="line"> entry: &#123;</div><div class="line"> app:<span class="string">"./src/js/app.js"</span></div><div class="line"> &#125;,</div><div class="line"> </div><div class="line"> output: &#123;</div><div class="line"> path: <span class="string">`<span class="subst">$&#123;__dirname &#125;</span>/dist`</span>,</div><div class="line"> filename: <span class="string">"js/[name].js"</span></div><div class="line"> </div><div class="line"> <span class="comment">// 上线时的公共路径</span></div><div class="line"> <span class="comment">// publicPath: "http://cdn.com/",</span></div><div class="line"> </div><div class="line"> <span class="comment">// 按需加载模块时输出的文件名称</span></div><div class="line"> <span class="comment">// chunkFilename: 'js/[name].js'</span></div><div class="line"> &#125;,</div><div class="line"> </div><div class="line"> <span class="comment">/* 生成调试用的 source-map */</span></div><div class="line"> devtool: <span class="string">"eval-source-map"</span>,</div><div class="line"> </div><div class="line"> devServer: &#123;</div><div class="line"> contentBase: <span class="string">"./dist"</span>, <span class="comment">//本地服务器所加载 的页面所在的目录</span></div><div class="line"> historyApiFallback: <span class="literal">true</span>, <span class="comment">//再找不到文件 的时候默认指向index.html,</span></div><div class="line"> inline: <span class="literal">true</span>,<span class="comment">//当源文件改变时会自动刷新页面</span></div><div class="line"> hot: <span class="literal">true</span>,<span class="comment">//热加载开启</span></div><div class="line"> port:<span class="number">8080</span><span class="comment">//设置默认监听端口</span></div><div class="line"> &#125;,</div><div class="line"> resolve:&#123;</div><div class="line"> <span class="comment">//自动扩展文件后缀名，意味着我们require模块可 以省略不写后缀名</span></div><div class="line"> extensions: [<span class="string">".js"</span>, <span class="string">".html"</span>, <span class="string">".css"</span>,  <span class="string">".txt"</span>,<span class="string">"less"</span>,<span class="string">"ejs"</span>,<span class="string">"json"</span>],</div><div class="line"> </div><div class="line"> <span class="comment">//模块别名定义，直接 require('AppStore')  即可,方便后续直接引用别名</span></div><div class="line"> alias: &#123; <span class="attr">Temp</span>: path.resolve(__dirname,  <span class="string">"src/templates/"</span>) &#125;</div><div class="line"> &#125;,</div><div class="line"> <span class="built_in">module</span>:&#123;</div><div class="line"> rules:[</div><div class="line"> &#123;</div><div class="line"> test: <span class="regexp">/\.(less|css)?$/</span> ,</div><div class="line"> use:ExtractTextPlugin.extract(&#123;</div><div class="line"> fallback: <span class="string">"style-loader"</span>,</div><div class="line"> use:[</div><div class="line"> &#123; <span class="attr">loader</span>: <span class="string">"css-loader? modules"</span>, <span class="attr">options</span>: &#123;  <span class="attr">importLoaders</span>: <span class="number">1</span> &#125; &#125;,</div><div class="line"> &#123;</div><div class="line"> loader:<span class="string">"postcss-loa der"</span>,</div><div class="line"> options:&#123;<span class="attr">plugins</span>:  <span class="function">(<span class="params">loader</span>) =&gt;</span>  [<span class="built_in">require</span> (<span class="string">"autoprefixer"</span>)()]  &#125;</div><div class="line"> &#125;,</div><div class="line"> &#123;<span class="attr">loader</span>: <span class="string">"less-loader"</span>&#125;</div><div class="line"> ]</div><div class="line"> &#125;),</div><div class="line"> exclude: path.resolve (__dirname,<span class="string">"./node_modules"</span>)</div><div class="line"> &#125;,</div><div class="line"> &#123;</div><div class="line"> test: <span class="regexp">/\.js$/</span> ,  <span class="attr">loader</span>:<span class="string">"babel-loader"</span>,</div><div class="line"> exclude: path.resolve (__dirname,<span class="string">"./node_modules"</span>),</div><div class="line"> include: path.resolve (__dirname, <span class="string">"./src"</span>),</div><div class="line"> options: &#123;<span class="string">"presets"</span>: [<span class="string">"latest"</span>]  &#125;</div><div class="line"> &#125;,</div><div class="line"> &#123;</div><div class="line"> test:<span class="regexp">/\.html$/</span> ,  <span class="attr">loader</span>:<span class="string">"html-loader"</span>,</div><div class="line"> include:path.resolve(__dirname, <span class="string">"./src/layer"</span>),</div><div class="line"> exclude: path.resolve (__dirname,<span class="string">"./node_modules"</span>)</div><div class="line"> &#125;,</div><div class="line"> &#123;</div><div class="line"> test:<span class="regexp">/\.ejs$/</span> ,  <span class="attr">loader</span>:<span class="string">"ejs-loader"</span>,</div><div class="line"> include:path.resolve(__dirname, <span class="string">"./src/layer"</span>),</div><div class="line"> exclude: path.resolve (__dirname,<span class="string">"./node_modules"</span>)</div><div class="line"> &#125;,</div><div class="line"> &#123;</div><div class="line"> test: <span class="regexp">/\.(png|jpg|jpeg|gif|svg| woff|woff2|ttf|eot|otf)$/i</span>,</div><div class="line"> loaders: [</div><div class="line"> <span class="string">"file-loader"</span>,</div><div class="line"> <span class="string">"url-loader?limit=8192"</span>,&#123;</div><div class="line"> loader:  <span class="string">"image-webpack-loader"</span>,</div><div class="line"> options: &#123;</div><div class="line"> gifsicle: &#123;  <span class="attr">interlaced</span>: <span class="literal">false</span> &#125; ,</div><div class="line"> optipng: &#123;  <span class="attr">optimizationLevel</span>:  <span class="number">7</span> &#125;,</div><div class="line"> pngquant: &#123;  <span class="attr">quality</span>: <span class="string">"65-90"</span>,  <span class="attr">speed</span>: <span class="number">4</span> &#125;,</div><div class="line"> mozjpeg: &#123;  <span class="attr">progressive</span>: <span class="literal">true</span>,  <span class="attr">quality</span>: <span class="number">65</span> &#125;,</div><div class="line"> webp: &#123; <span class="attr">quality</span>:  <span class="number">75</span> &#125; &#125;</div><div class="line"> &#125;</div><div class="line"> ],</div><div class="line"> exclude: path.resolve (__dirname,<span class="string">"./node_modules"</span>)</div><div class="line"> </div><div class="line"> &#125;</div><div class="line"> ]</div><div class="line"> &#125;,</div><div class="line"> plugins: [</div><div class="line"> </div><div class="line"> <span class="comment">//打包前 先删除dist目录下的文件</span></div><div class="line"> <span class="keyword">new</span> CleanWebpackPlugin(</div><div class="line"> [<span class="string">"dist"</span>],</div><div class="line"> &#123;</div><div class="line"> root: __dirname,<span class="comment">//指定插件根目录 位置</span></div><div class="line"> verbose: <span class="literal">true</span>, <span class="comment">//开启在控制台输出 信息</span></div><div class="line"> dry: <span class="literal">false</span> <span class="comment">//启用删除文件</span></div><div class="line"> &#125;</div><div class="line"> ),</div><div class="line"> </div><div class="line"> <span class="comment">//生成html</span></div><div class="line"> <span class="keyword">new</span> htmlWebpackPlugin(&#123;</div><div class="line"> filename: <span class="string">"index.html"</span>,<span class="comment">//文件名</span></div><div class="line"> template: <span class="string">"index.html"</span>,<span class="comment">//模板</span></div><div class="line"> inject: <span class="literal">false</span>,<span class="comment">//js的注入标签</span></div><div class="line"> <span class="comment">//这个配置项为true表示自动把打包出来的文 件通过自动生成script标签添加到html中</span></div><div class="line"> </div><div class="line"> title: <span class="string">"参数title"</span>,<span class="comment">//通过&lt;%=  htmlWebpackPlugin.options.title %&gt; 引用</span></div><div class="line"> date: <span class="keyword">new</span> <span class="built_in">Date</span>()<span class="comment">//通过&lt;%=  htmlWebpackPlugin.options.date %&gt;引 用</span></div><div class="line"> </div><div class="line"> <span class="comment">//favicon: 'path/to/yourfile.ico'</span></div><div class="line"> </div><div class="line"> <span class="comment">// excludeChunks: [''],//排除的块</span></div><div class="line"> <span class="comment">// chunks: ['app','people']//选中的 块</span></div><div class="line"> </div><div class="line"> <span class="comment">/*minify:&#123; //压缩</span></div><div class="line"><span class="comment"> removeComments: true,</span></div><div class="line"><span class="comment"> collapseWhitespace: true,</span></div><div class="line"><span class="comment"> removeRedundantAttributes:  true,</span></div><div class="line"><span class="comment"> useShortDoctype: true,</span></div><div class="line"><span class="comment"> removeEmptyAttributes: true,</span></div><div class="line"><span class="comment"> removeStyleLinkTypeAttributes:  true,</span></div><div class="line"><span class="comment"> keepClosingSlash: true,</span></div><div class="line"><span class="comment"> minifyJS: true,</span></div><div class="line"><span class="comment"> minifyCSS: true,</span></div><div class="line"><span class="comment"> minifyURLs: true,</span></div><div class="line"><span class="comment"> &#125;*/</span></div><div class="line"> </div><div class="line"> &#125;),</div><div class="line"> <span class="comment">//防止CSS文件混乱，单独生成一个css文件</span></div><div class="line"> <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"./css/[name] .min.css"</span>),</div><div class="line"> </div><div class="line"> <span class="comment">//在每个生成的 chunk 顶部添加 banner</span></div><div class="line"> <span class="keyword">new</span> webpack.BannerPlugin (<span class="string">"Anthor:Simon"</span>),<span class="comment">//添加一个显示版权声明的插 件</span></div><div class="line"> </div><div class="line"> <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</div><div class="line"> compress:&#123;<span class="comment">//额外的压缩选项</span></div><div class="line"> warnings:<span class="literal">false</span></div><div class="line"> &#125;</div><div class="line"> <span class="comment">// mangle: &#123;  排除不想要压缩的对象名称</span></div><div class="line">             <span class="comment">//      except: ['$super', '$',  'exports', 'require', 'module',  '_']</span></div><div class="line">             <span class="comment">// &#125;,</span></div><div class="line"> &#125;),<span class="comment">//压缩js</span></div><div class="line"> </div><div class="line"> <span class="comment">//定义全局变量</span></div><div class="line"> <span class="keyword">new</span> webpack.DefinePlugin(&#123;</div><div class="line"> __DEV__: <span class="built_in">JSON</span>.stringify(<span class="built_in">JSON</span>.parse (process.env.DEBUG || <span class="string">"false"</span>))</div><div class="line"> &#125;),</div><div class="line"> </div><div class="line"> <span class="comment">//使用ProvidePlugin加载的模块在使用时将不再 需要import和require进行引入</span></div><div class="line"> <span class="comment">//全局自动加载模块</span></div><div class="line"> <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</div><div class="line"> $: <span class="string">"jquery"</span>,</div><div class="line"> jQuery: <span class="string">"jquery"</span></div><div class="line"> &#125;),</div><div class="line"> </div><div class="line"> <span class="comment">//打开服务器后 会自动打开浏览器</span></div><div class="line"> <span class="keyword">new</span> OpenBrowserPlugin(&#123;<span class="attr">url</span>:  <span class="string">"http://localhost:8080"</span>&#125;),</div><div class="line"> </div><div class="line"> <span class="comment">//排序输出,为组件分配ID</span></div><div class="line"> <span class="keyword">new</span>  webpack.optimize.OccurrenceOrderPlugin (),</div><div class="line"> </div><div class="line"> <span class="comment">// 启用 HMR 热加载插件</span></div><div class="line"> <span class="keyword">new</span> webpack.HotModuleReplacementPlugin (),</div><div class="line"> </div><div class="line"> <span class="comment">// 打印日志信息时 webpack 默认使用模块的数 字 ID 指代模块，不便于 debug，</span></div><div class="line"> <span class="comment">// 这个插件可以将其替换为模块的真实路径</span></div><div class="line"> <span class="keyword">new</span> webpack.NamedModulesPlugin()</div><div class="line"> </div><div class="line"> <span class="comment">/*提取 Chunks中的公共内容</span></div><div class="line"><span class="comment"> new webpack.optimize.CommonsChunkPlugin (&#123;</span></div><div class="line"><span class="comment"> name: ["vendor", "manifest"], //  vendor libs + extracted manifest</span></div><div class="line"><span class="comment"> minChunks: Infinity,</span></div><div class="line"><span class="comment"> &#125;),*/</span></div><div class="line"> </div><div class="line"> <span class="comment">/*拷贝资源插件 适用于线上场景</span></div><div class="line"><span class="comment"> new CopyWebpackPlugin([&#123;</span></div><div class="line"><span class="comment">     from: __dirname + '/src/public'</span></div><div class="line"><span class="comment"> &#125;]),*/</span></div><div class="line"> ]</div><div class="line"> &#125;;</div><div class="line"> </div><div class="line"> <span class="built_in">module</span>.exports = MyConfig;</div></pre></td></tr></table></figure><br><br> </div><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><!-- foot --><hr><p>本文会同步更新在以下地方(已链接本人主页),欢迎你在常逛的网站中关注我。 </p><ul><li><a href="https://juejin.im/user/599b6d255188252447222dfd" target="_blank" rel="external nofollow">掘金</a></li><li><a href="http://www.jianshu.com/users/2fb2fd6fda89/timeline" target="_blank" rel="external nofollow">简书</a></li><li><a href="http://www.cnblogs.com/jinma" target="_blank" rel="external nofollow">博客园</a>  </li><li><a href="http://blog.csdn.net/Acceptee" target="_blank" rel="external nofollow">CSDN</a></li><li><a href="https://segmentfault.com/u/majin" target="_blank" rel="external nofollow">segmentfault</a></li></ul><p>转载本站文章请注明作者和出处  <a href="http://tomotoes.com">tomotoes.com</a>，请勿用于任何商业用途。<br>深入Web全栈各项技术，坚持原创，文章更新虽不定，但只为质量而生。<br>建议收藏这个坏掉的番茄  <a href="http://tomotoes.com">tomotoes.com</a> ，愿陪你一起在全栈的道路上努力前行！</p><p><style>.post-toc-link { line-height: 23px; padding: 2px 20px; } .post-content ol li:first-line { color: #999; font-weight: bold; } .button {color: #666; background-color: #EEE; border-color: #EEE; text-decoration: none; text-align: center; line-height: 40px; height: 40px; padding: 0 40px; margin: 0; display: inline-block; border: none; -webkit-box-sizing: border-box; box-sizing: border-box; -webkit-transition-property: all; transition-property: all; -webkit-transition-duration: .3s; transition-duration: .3s; font-size: 18px; font-weight: bold; font-family: @font-custom; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; letter-spacing: 3px; } .button:visited {color: #666; } .button:hover, .button:focus {background-color: #f6f6f6; text-decoration: none; outline: none; } .button:active, .button.active, .button.is-active {text-shadow: 0 1px 0 rgba(255, 255, 255, 0.3); text-decoration: none; background-color: #eeeeee; border-color: #cfcfcf; color: #d4d4d4; -webkit-transition-duration: 0s; transition-duration: 0s; -webkit-box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.2); box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.2); } .button.disabled, .button.is-disabled, .button:disabled {top: 0 !important; background: #EEE !important; border: 1px solid #DDD !important; text-shadow: 0 1px 1px white !important; color: #CCC !important; -webkit-box-shadow: none !important; box-shadow: none !important; opacity: .8 !important; } .button-primary {background-color: #1B9AF7; border-color: #1B9AF7; color: #FFF; } .button-primary:visited {color: #FFF; } .button-primary:hover, .button-primary:focus {background-color: #4cb0f9; border-color: #4cb0f9; color: #FFF; } .button-primary:active, .button-primary.active, .button-primary.is-active {background-color: #2798eb; border-color: #2798eb; color: #0880d7; } .button-rounded {border-radius: 4px; } .button-border.button-primary, .button-primary.button-border-thin, .button-primary.button-border-thick, .button-border-thin.button-primary, .button-border-thick.button-primary {color: #1B9AF7; } .button-border.button-primary:hover, .button-primary.button-border-thin:hover, .button-primary.button-border-thick:hover, .button-border.button-primary:focus, .button-primary.button-border-thin:focus, .button-primary.button-border-thick:focus, .button-border-thin.button-primary:hover, .button-border-thin.button-primary:focus, .button-border-thick.button-primary:hover, .button-border-thick.button-primary:focus {background-color: rgba(76, 176, 249, 0.9); color: rgba(255, 255, 255, 0.9); } .button-border.button-primary:active, .button-primary.button-border-thin:active, .button-primary.button-border-thick:active, .button-border.button-primary.active, .button-primary.active.button-border-thin, .button-primary.active.button-border-thick, .button-border.button-primary.is-active, .button-primary.is-active.button-border-thin, .button-primary.is-active.button-border-thick, .button-border-thin.button-primary:active, .button-border-thin.button-primary.active, .button-border-thin.button-primary.is-active, .button-border-thick.button-primary:active, .button-border-thick.button-primary.active, .button-border-thick.button-primary.is-active {background-color: rgba(39, 152, 235, 0.7); color: rgba(255, 255, 255, 0.5); opacity: .3; } .button-3d {position: relative; top: 0; -webkit-box-shadow: 0 7px 0 #bbbbbb, 0 8px 3px rgba(0, 0, 0, 0.2); box-shadow: 0 7px 0 #bbbbbb, 0 8px 3px rgba(0, 0, 0, 0.2); } .button-3d:hover, .button-3d:focus {-webkit-box-shadow: 0 7px 0 #bbbbbb, 0 8px 3px rgba(0, 0, 0, 0.2); box-shadow: 0 7px 0 #bbbbbb, 0 8px 3px rgba(0, 0, 0, 0.2); } .button-3d:active, .button-3d.active, .button-3d.is-active {top: 5px; -webkit-transition-property: all; transition-property: all; -webkit-transition-duration: .15s; transition-duration: .15s; -webkit-box-shadow: 0 2px 0 #bbbbbb, 0 3px 3px rgba(0, 0, 0, 0.2); box-shadow: 0 2px 0 #bbbbbb, 0 3px 3px rgba(0, 0, 0, 0.2); } .button-3d.button-primary {-webkit-box-shadow: 0 7px 0 #0880d7, 0 8px 3px rgba(0, 0, 0, 0.3); box-shadow: 0 7px 0 #0880d7, 0 8px 3px rgba(0, 0, 0, 0.3); } .button-3d.button-primary:hover, .button-3d.button-primary:focus {-webkit-box-shadow: 0 7px 0 #077ace, 0 8px 3px rgba(0, 0, 0, 0.3); box-shadow: 0 7px 0 #077ace, 0 8px 3px rgba(0, 0, 0, 0.3); } .button-3d.button-primary:active, .button-3d.button-primary.active, .button-3d.button-primary.is-active {-webkit-box-shadow: 0 2px 0 #0662a6, 0 3px 3px rgba(0, 0, 0, 0.2); box-shadow: 0 2px 0 #0662a6, 0 3px 3px rgba(0, 0, 0, 0.2); }</style></p><script>codeHide.addEventListener("click",function(){$("#sourceCode").slideToggle("slow");});</script>]]></content>
    
    <summary type="html">
    
      Webpack,打包工具,前端,Web
    
    </summary>
    
      <category term="Web" scheme="http://tomotoes.com/blog/categories/Web/"/>
    
    
      <category term="Webpack" scheme="http://tomotoes.com/blog/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>链式向前星</title>
    <link href="http://tomotoes.com/blog//posts/7c714001/"/>
    <id>http://tomotoes.com/blog//posts/7c714001/</id>
    <published>2017-11-22T14:24:41.000Z</published>
    <updated>2017-12-07T08:13:53.766Z</updated>
    
    <content type="html"><![CDATA[<p>这是一种神奇的数据结构。<a id="more"></a></p><h3 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h3><p>听说是某个高中Oi菊苣发明，%%%</p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>有的时候有的图可能比较稀疏而且点数较多，邻接矩阵存不下，所以就要用到邻接表。<br>邻接表用vector数组比较方便，但是vector比较慢。所以就有了链式向前星。</p><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><p>通过Head可以找到一个点的所有边,<strong>可以把Head理解为：链表的有实际含义的头节点</strong></p><p>Head[N]永远保存最后一次输入的N点数组的下标值，</p><p>Head[N]=idx; 意思是，保存N点的数组的下标值</p><p>而Next保存变化中的Head，但不保存最后一次的Head</p><p>Edge[i].Next=Head[N]; Head[N]=idx++;<br>从而Head与Next数组实现链式向前星的整个过程，</p><p>Head相当于链表的有实际含义的头节点<br>Next保存链表中的节点，但值得注意的是Next与Head都是通过保存下标值的方式实现的<br>相当于：<strong>索引式链表</strong>。</p><p>End为终点，Value为权值，先不提<br>而Next就相当于链表中的节点的位置，而没有头节点Head ,是无法提取的。<br>保存下标值的方式很有趣，虽然开始理解起来有点怪。</p><p>int i=Head[S]; 此时i为最后一次保存S点数组的下标值，也就是最后一次输入的S点数据<br>Edge[i].End 便为最后一次输入S点的终点，Value也是同理，而S作为出发点，不再多提</p><p>之后很关键，i=Edge[i].Next，要知道，每次的Edge[i].Next 都是由Head变化而来<br>意思就是，i=Edge[i].Next,此后的 i为倒数第二次输入S点数组的下标值！<br>i=Edge[Head[S]].Next;之后 i=Edge[Edge[Head[S]].Next;].Next;<br>从而反复循环，直到，下一条边为0时，便是最后一次输入的S点的数组的下标值<br>因为 最开始时，Edge[i].Next=Head[S]=0;</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> End;<span class="comment">//保存一个边的终点</span></div><div class="line">    <span class="keyword">int</span> Next;<span class="comment">//保存一个点（起点）的 除了最后一条（输入的顺序）之外的所有边的下标值</span></div><div class="line">    <span class="keyword">int</span> Value;<span class="comment">//保存一条边的权值</span></div><div class="line">    Node()&#123;&#125;</div><div class="line">    Node(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c):</div><div class="line">    End(a),Next(b),Value(c)&#123;&#125;</div><div class="line">&#125;Edge[maxn];</div><div class="line"><span class="keyword">bool</span> Vis[maxn];</div><div class="line"><span class="keyword">int</span> Head[maxn];<span class="comment">//Head数组 为边的索引</span></div><div class="line"><span class="keyword">int</span> Idx;</div><div class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;Map;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> Start,<span class="keyword">int</span> End,<span class="keyword">int</span> Value)</span></span>&#123;</div><div class="line">    Edge[Idx]=Node(End,Head[Start],Value);</div><div class="line">    Head[Start]=Idx++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>&#123;</div><div class="line">    Idx=<span class="number">1</span>;</div><div class="line">    <span class="built_in">memset</span>(Edge,<span class="number">0</span>,<span class="keyword">sizeof</span>(Edge));</div><div class="line">    <span class="built_in">memset</span>(Vis,<span class="literal">false</span>,<span class="keyword">sizeof</span>(Vis));</div><div class="line">    <span class="keyword">int</span> N,M,x,y,z;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;M);</div><div class="line">    <span class="keyword">while</span>(M--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;z);</div><div class="line">        AddEdge(x,y,z);</div><div class="line">        AddEdge(y,x,z);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> Start;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;Start);</div><div class="line">    Vis[Start]=<span class="literal">true</span>;</div><div class="line">    Map.push(Start);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Traverse</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(!Map.empty())&#123;</div><div class="line">        <span class="keyword">int</span> Start=Map.front();</div><div class="line">        Map.pop();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=Head[Start];i;i=Edge[i].Next)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d-&gt;%d=%d\n"</span>,Start,Edge[i].End,Edge[i].Value);</div><div class="line">            <span class="keyword">if</span>(!Vis[Edge[i].End])&#123;</div><div class="line">                Map.push(Edge[i].End);</div><div class="line">                Vis[Edge[i].End]=<span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    Init();</div><div class="line">    Traverse();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">输入样例</span></div><div class="line"><span class="comment">5 5</span></div><div class="line"><span class="comment">1 2 3</span></div><div class="line"><span class="comment">2 3 4</span></div><div class="line"><span class="comment">3 4 5</span></div><div class="line"><span class="comment">4 5 6</span></div><div class="line"><span class="comment">5 6 7</span></div><div class="line"><span class="comment">1</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>优点：不会浪费数据空间;<br>缺点：无法直接判断两个点是否是邻接点<br>链式向前星是一个很不错的数据结构，利用数组索引特性，加上其他权值，存储了整个图。</p></blockquote>]]></content>
    
    <summary type="html">
    
      链式向前星,数据结构,ACM
    
    </summary>
    
      <category term="算法" scheme="http://tomotoes.com/blog/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="http://tomotoes.com/blog/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-入门篇</title>
    <link href="http://tomotoes.com/blog//posts/b9fba72a/"/>
    <id>http://tomotoes.com/blog//posts/b9fba72a/</id>
    <published>2017-11-22T05:37:27.000Z</published>
    <updated>2018-01-26T09:54:08.898Z</updated>
    
    <content type="html"><![CDATA[<p>初识Hexo。<a id="more"></a></p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><ol><li>熟悉git</li><li>拥有github page仓库  </li></ol><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><ol><li>在喜欢的目录下，新建blog文件夹</li><li><p>使用命令行，进入到blog文件夹<br>比如，我把文件夹新建到C盘的hexo目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="built_in">cd</span>  c:/hexo/blog</div></pre></td></tr></table></figure></li><li><p>在blog下安装hexo</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm install -g hexo-cli</div></pre></td></tr></table></figure></li><li><p>hexo初始化</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">hexo init</div></pre></td></tr></table></figure></li><li><p>安装npm</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure><p> 如果安装很慢，或者安装失败，建议安装<a href="https://npm.taobao.org/" target="_blank" rel="noopener">淘宝镜像npm</a></p></li><li><p>安装hexo部署</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm install --save hexo-deployer-git</div></pre></td></tr></table></figure></li><li><p>选网站主题<br>假如 你选的我这款网站主题，那么恭喜你，我已经准备好了简单明了的<a href="https://github.com/Tomotoes/hexo-theme-tomotoes/wiki/%E5%AE%89%E8%A3%85" target="_blank" rel="noopener">安装步骤</a></p></li></ol><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><p>常用的hexo命令无非是6个</p><ol><li>hexo clean<br> 清空生成目录</li><li>hexo g<br> 生成网站文件</li><li>hexo s<br> 打开本地服务 localhost:4000</li><li>hexo d<br> 将文件部署到github page</li><li>hexo new xxx<br> 新建一篇文章xxx</li><li>hexo new page xxx<br> 新建一个页面xxx</li></ol><h3 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h3><p>如果你想玩明白hexo，我真心建议：</p><ol><li>了解hexo文档，至少能看懂 is_post() 这类的API</li><li>了解文件类型的使用方法，比如 我的主题是ejs+less，其他主题还有 sass stylus 之类的，<br> ejs和less的学习成本都不高，如果要折腾博客，一定要非常明白</li><li>不要盲目折腾，自己舒服就行了，要有自己网站的style，配色</li></ol><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><p>等你评论</p>]]></content>
    
    <summary type="html">
    
      Hexo,个人博客
    
    </summary>
    
      <category term="建站" scheme="http://tomotoes.com/blog/categories/%E5%BB%BA%E7%AB%99/"/>
    
    
      <category term="Hexo" scheme="http://tomotoes.com/blog/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>常用Vim命令</title>
    <link href="http://tomotoes.com/blog//posts/f85650f4/"/>
    <id>http://tomotoes.com/blog//posts/f85650f4/</id>
    <published>2017-11-22T02:20:04.000Z</published>
    <updated>2017-12-07T08:11:51.551Z</updated>
    
    <content type="html"><![CDATA[<p>总结下 Vim 常用命令以及使用技巧。<a id="more"></a></p><h3 id="移动命令"><a href="#移动命令" class="headerlink" title="移动命令"></a>移动命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">h       左</div><div class="line">j       下 </div><div class="line">k       上 </div><div class="line">l       右</div><div class="line">space   右</div><div class="line"></div><div class="line">e       后单词尾</div><div class="line">w       后单词头</div><div class="line">b       前单词头</div><div class="line"></div><div class="line">^       行首</div><div class="line">$        行尾 </div><div class="line"></div><div class="line">&#123;       上段</div><div class="line">&#125;       下段</div><div class="line"></div><div class="line">H       屏幕上面</div><div class="line">M       屏幕中间</div><div class="line">L       屏幕下面</div><div class="line"></div><div class="line">gg      文件头</div><div class="line">G       文件尾</div><div class="line"></div><div class="line">zz      定位屏幕中间</div><div class="line">zt      定位屏幕顶部</div><div class="line">zb      定位屏幕底部</div><div class="line"></div><div class="line">mk      标记</div><div class="line">`k      转到标记</div></pre></td></tr></table></figure><h3 id="插入命令"><a href="#插入命令" class="headerlink" title="插入命令"></a>插入命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">a       后字符</div><div class="line">A       行尾</div><div class="line"></div><div class="line">i       前字符</div><div class="line">I       行首</div><div class="line"></div><div class="line">s       当前字符</div><div class="line">S       当前行</div><div class="line"></div><div class="line">o       下一行</div><div class="line">O       上一行</div><div class="line"></div><div class="line">cc      当前行</div><div class="line">C       后字符至行尾</div><div class="line">c+op</div></pre></td></tr></table></figure><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/a       文章 n N</div><div class="line">?a       反向</div><div class="line"></div><div class="line">fa       当前行 ; ,</div><div class="line">Fa       反向</div><div class="line"></div><div class="line">ta       当前行的前一个字符 ; ,</div><div class="line">Ta       反向</div><div class="line"></div><div class="line">\*       文章 n N</div><div class="line">\#        反向</div></pre></td></tr></table></figure><h3 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">%       括号匹配</div><div class="line"></div><div class="line">&lt;&lt;      缩进</div><div class="line"></div><div class="line">u       撤回</div><div class="line"></div><div class="line">p       粘贴</div><div class="line">P       粘贴至上一行</div><div class="line"></div><div class="line">yy      复制</div><div class="line">Y       复制</div><div class="line"></div><div class="line">rt      替换</div><div class="line">R       替换模式</div><div class="line"></div><div class="line">dd      剪切</div><div class="line">D       剪切至行尾</div><div class="line"></div><div class="line">J       连接下一行</div><div class="line"></div><div class="line">x       剪切当前字符</div><div class="line">X       剪切前一个字符</div><div class="line"></div><div class="line">zc      折叠</div><div class="line">zo      打开折叠</div><div class="line"></div><div class="line">v       选中字符</div><div class="line">V       选中当前行</div><div class="line"></div><div class="line">~       切换当前字符大小写</div><div class="line">Vu      当前行小写</div><div class="line">VU      当前行大写</div></pre></td></tr></table></figure><h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&quot;ayy    将当前数据复制到 a的寄存器</div><div class="line">&quot;ap     将 a的寄存器中的数据粘贴出来</div><div class="line"></div><div class="line">qa      寄存器a的开始记录</div><div class="line">op      操作~</div><div class="line">q       结束记录</div><div class="line">@a      使用寄存器</div><div class="line"></div><div class="line">&quot;_      黑洞寄存器,说白了就是删除</div><div class="line"></div><div class="line">&quot;adiw  </div><div class="line">&quot;aP</div></pre></td></tr></table></figure><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">:w       保存文件</div><div class="line">:wq      退出编辑器，且保存文件</div><div class="line">:x       退出编辑器，且保存文件</div><div class="line"></div><div class="line">q!       放弃修改</div><div class="line">e!       放弃 修改后 载入文件</div></pre></td></tr></table></figure><h3 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">介词</div><div class="line">i        Inside  &quot;x&quot; =&gt; &quot;&quot;</div><div class="line">a        Around  &quot;x&quot; =&gt;  </div><div class="line">f        Forward  x  =&gt; ...o...</div><div class="line">t        To       x  =&gt; ...ox...</div><div class="line"></div><div class="line">名词</div><div class="line">w        Word</div><div class="line">s        Sentence</div><div class="line">p        Paragraph </div><div class="line">b        ()</div><div class="line">B        &#123;&#125;</div><div class="line">[]</div><div class="line">&apos;&apos;</div><div class="line">&quot;&quot;</div></pre></td></tr></table></figure><h3 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">动词   介词          名词</div><div class="line">d/y   i/a/f/t   c~/b/B/w/&quot;/&apos;</div><div class="line"></div><div class="line">动词    数词      名词</div><div class="line">2       d        w</div><div class="line"></div><div class="line">数词    动词</div><div class="line">5       G</div><div class="line">4       j</div><div class="line"></div><div class="line">xp      交换两个字符</div><div class="line"></div><div class="line">yiw     拷贝一个单词      </div><div class="line"></div><div class="line">dk      删除当前行以及上一行</div><div class="line"></div><div class="line">dft     删除至t包括t</div></pre></td></tr></table></figure><h3 id="必备"><a href="#必备" class="headerlink" title="必备"></a>必备</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">.       重复上一次命令</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Vim,工具,命令
    
    </summary>
    
      <category term="工具" scheme="http://tomotoes.com/blog/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Vim" scheme="http://tomotoes.com/blog/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>HDU1874-畅通工程续</title>
    <link href="http://tomotoes.com/blog//posts/421b1f9a/"/>
    <id>http://tomotoes.com/blog//posts/421b1f9a/</id>
    <published>2017-11-22T01:30:59.000Z</published>
    <updated>2017-11-30T11:18:47.173Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1874" target="_blank" rel="noopener">题目传送门</a><a id="more"></a><br><img title="Click me!" alt="Click！" class="imgclass" src="http://oz707qszw.bkt.clouddn.com/images/少女1.jpg?imageView2/1/w/300/h/500/q/75|imageslim"></p><p>大一做的最短路模板题，很适合练手<br>我分别利用了3种数据结构+Dijkstra/Floyd来解决，解题步骤具体如下：</p><h3 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h3><p>15ms<br><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e2</span>+<span class="number">5</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">int</span> Map[maxn][maxn];</div><div class="line"><span class="keyword">bool</span> Vis[maxn];</div><div class="line"><span class="keyword">int</span> Dis[maxn];</div><div class="line"><span class="keyword">int</span> N,M,S,D;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(Map,INF,<span class="keyword">sizeof</span>(Map));</div><div class="line">    <span class="built_in">memset</span>(Vis,<span class="literal">false</span>,<span class="keyword">sizeof</span>(Vis));</div><div class="line">    <span class="built_in">memset</span>(Dis,<span class="number">0</span>,<span class="keyword">sizeof</span>(Dis));</div><div class="line">    <span class="keyword">int</span> x,y,z;</div><div class="line">    <span class="keyword">while</span>(M--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;z);</div><div class="line">        Map[x][y]=Map[y][x]=min(Map[x][y],z);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;S,&amp;D);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)&#123;</div><div class="line">        Dis[i]=Map[S][i];</div><div class="line">    &#125;</div><div class="line">    Dis[S]=<span class="number">0</span>;</div><div class="line">    Vis[S]=<span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">0</span>;l&lt;N;++l)&#123;</div><div class="line">        <span class="keyword">int</span> Min=INF,k;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)&#123;</div><div class="line">            <span class="keyword">if</span>(!Vis[i]&amp;&amp;Dis[i]&lt;Min)&#123;</div><div class="line">                Min=Dis[i];</div><div class="line">                k=i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        Vis[k]=<span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span>(Min!=INF)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;++j)&#123;</div><div class="line">                <span class="keyword">if</span>(!Vis[j]&amp;&amp;Dis[j]&gt;Dis[k]+Map[k][j])&#123;</div><div class="line">                    Dis[j]=Dis[k]+Map[k][j];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    Dis[D]==INF?<span class="built_in">printf</span>(<span class="string">"-1n"</span>):<span class="built_in">printf</span>(<span class="string">"%dn"</span>,Dis[D]);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;M))&#123;</div><div class="line">        Init();</div><div class="line">        Dijkstra();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h3><p>15ms<br><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> from,to,cost;</div><div class="line">    Node(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c):from(a),to(b),cost(c)&#123;&#125;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;Node&gt;Edges;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;G[maxn];</div><div class="line"><span class="keyword">int</span> Dis[maxn];</div><div class="line"><span class="keyword">int</span> N,M,S,T;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; Pair;</div><div class="line">priority_queue&lt;Pair,<span class="built_in">vector</span>&lt;Pair&gt;,greater&lt;Pair&gt; &gt;Q;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span>&#123;</div><div class="line">    Edges.push_back(Node(x,y,z));</div><div class="line">    G[x].push_back(Edges.size()<span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>&#123;</div><div class="line">    Edges.clear();</div><div class="line">    <span class="built_in">memset</span>(Dis,INF,<span class="keyword">sizeof</span>(Dis));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;G[i++].clear());</div><div class="line">    <span class="keyword">int</span> x,y,z;</div><div class="line">    <span class="keyword">while</span>(M--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;z);</div><div class="line">        AddEdge(x,y,z);</div><div class="line">        AddEdge(y,x,z);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;S,&amp;T);</div><div class="line">    Dis[S]=<span class="number">0</span>;</div><div class="line">    Q.push(Pair(<span class="number">0</span>,S));</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> Now,Val,L;</div><div class="line">    <span class="keyword">while</span>(!Q.empty())&#123;</div><div class="line">        Now=Q.top().second;</div><div class="line">        Val=Q.top().first;</div><div class="line">        Q.pop();</div><div class="line">        <span class="keyword">if</span>(Dis[Now]&lt;Val)&#123;<span class="keyword">continue</span>;&#125;</div><div class="line">        L=G[Now].size();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;L;++i)&#123;</div><div class="line">            <span class="keyword">if</span>(Dis[Edges[G[Now][i]].to]&gt;Dis[Now]+Edges[G[Now][i]].cost)&#123;</div><div class="line">                Dis[Edges[G[Now][i]].to]=Dis[Now]+Edges[G[Now][i]].cost;</div><div class="line">                Q.push(Pair(Dis[Edges[G[Now][i]].to],Edges[G[Now][i]].to));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    Dis[T]==INF?<span class="built_in">printf</span>(<span class="string">"-1n"</span>):<span class="built_in">printf</span>(<span class="string">"%dn"</span>,Dis[T]);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;M))&#123;</div><div class="line">        Init();</div><div class="line">        Dijkstra();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="链式向前星"><a href="#链式向前星" class="headerlink" title="链式向前星"></a>链式向前星</h3><p>0ms<br><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2017</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> End;</div><div class="line">    <span class="keyword">int</span> Value;</div><div class="line">    <span class="keyword">int</span> Front;</div><div class="line">    Node()&#123;&#125;</div><div class="line">    Node(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c):End(a),Front(b),Value(c)&#123;&#125;</div><div class="line">&#125;Edge[maxn];</div><div class="line"><span class="keyword">int</span> Head[maxn];</div><div class="line"><span class="keyword">int</span> Dis[maxn];</div><div class="line"><span class="keyword">int</span> N,M,S,D,Idx;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;Pair;</div><div class="line">priority_queue&lt;Pair,<span class="built_in">vector</span>&lt;Pair&gt;,greater&lt;Pair&gt; &gt;Q;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> S,<span class="keyword">int</span> D,<span class="keyword">int</span> V)</span></span>&#123;</div><div class="line">    Edge[Idx]=Node(D,Head[S],V);</div><div class="line">    Head[S]=Idx++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>&#123;</div><div class="line">    Idx=<span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(Head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(Head));</div><div class="line">    <span class="built_in">memset</span>(Dis,INF,<span class="keyword">sizeof</span>(Dis));</div><div class="line">    <span class="keyword">int</span> x,y,z;</div><div class="line">    <span class="keyword">while</span>(M--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;z);</div><div class="line">        AddEdge(x,y,z);</div><div class="line">        AddEdge(y,x,z);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;S,&amp;D);</div><div class="line">    Pair pNew;</div><div class="line">    Dis[S]=<span class="number">0</span>;</div><div class="line">    pNew.first=<span class="number">0</span>;</div><div class="line">    pNew.second=S;</div><div class="line">    Q.push(pNew);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> Now,Val;</div><div class="line">    <span class="keyword">while</span>(!Q.empty())&#123;</div><div class="line">        Now=Q.top().second;</div><div class="line">        Val=Q.top().first;</div><div class="line">        Q.pop();</div><div class="line">        <span class="keyword">if</span>(Dis[Now]&lt;Val)<span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=Head[Now];~i;i=Edge[i].Front)&#123;</div><div class="line">            <span class="keyword">if</span>(Dis[Edge[i].End]&gt;Dis[Now]+Edge[i].Value)&#123;</div><div class="line">                Dis[Edge[i].End]=Dis[Now]+Edge[i].Value;</div><div class="line">                Q.push(Pair(Dis[Edge[i].End],Edge[i].End));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    Dis[D]==INF?<span class="built_in">printf</span>(<span class="string">"-1n"</span>):<span class="built_in">printf</span>(<span class="string">"%dn"</span>,Dis[D]);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;M))&#123;</div><div class="line">        Init();</div><div class="line">        Dijkstra();</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><h3 id="Floyd"><a href="#Floyd" class="headerlink" title="Floyd"></a>Floyd</h3><p>62ms<br><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e2</span>+<span class="number">5</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">int</span> Map[maxn][maxn];</div><div class="line"><span class="keyword">int</span> N,M,S,D;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x,y,z;</div><div class="line">    <span class="built_in">memset</span>(Map,INF,<span class="keyword">sizeof</span>(Map));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)&#123;</div><div class="line">        Map[i][i]=<span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(M--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;z);</div><div class="line">        Map[x][y]=Map[y][x]=min(Map[x][y],z);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;S,&amp;D);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Floyd</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;N;++k)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;++j)&#123;</div><div class="line">                Map[i][j]=min(Map[i][j],Map[i][k]+Map[k][j]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    Map[S][D]==INF?<span class="built_in">printf</span>(<span class="string">"-1\n"</span>):<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Map[S][D]);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;M))&#123;</div><div class="line">        Init();</div><div class="line">        Floyd();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>自从退acm，很多东西都在遗忘…</p>]]></content>
    
    <summary type="html">
    
      HDU,最短路,Dijkstra,ACM
    
    </summary>
    
      <category term="算法" scheme="http://tomotoes.com/blog/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="ACM" scheme="http://tomotoes.com/blog/tags/ACM/"/>
    
      <category term="数据结构" scheme="http://tomotoes.com/blog/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
