[{"title":"Git修炼手册","date":"2018-01-27T01:58:00.000Z","path":"/posts/264f2bd1/","text":"Git 命令大汇总。sadsadsadsad 前言aasd阿三大苏打阿什顿 阿斯顿撒旦撒旦阿斯顿撒旦 这是一个脚注的例子^1撒旦撒旦阿斯顿撒旦 阿三大苏打阿斯顿撒大苏打 一列 二二 x y 正文入门配置 task listas用户信息 git config –global user.name Simon 设置自己的用户名 git config –global user.email jinmaup@gmail.com 设置自己的邮箱 查看配置git config –list 查看自己git的配置信息 设置编辑器git config –global core.editor vim 当你用git编辑文件时，编辑文件的文本编辑器会默认调用vim 文本着色git config –global color.ui true 可为大部分git的代码布上颜色 基础命令建立版本库 git init 当前路径文件 初始化为Git仓库（可以发现 当前路径增加了.git文件夹） git init 文件夹名 新建一个文件夹，并将其初始化为Git代码库 文件添加到暂存区 git add . 把当前目录所有未追踪文件，已修改的文件，添加到暂存区 (不包括被删除的文件) git add 文件（夹）名 把特定文件（夹）添加到暂存区 git add -A 提交所有的文件操作到暂存区 git add -u 提交已修改的文件,被删除的文件（不包括新文件） git add -p 交互式的缓存提交，会提供多个选项来自定义提交内容、方式 文件添加到本地仓库 git commit -m”commit message” 把暂存区的所有文件添加到本地仓库，-m”提交信息” （越详细越好） git commit 文件（夹）名 -m”commit message” 把特定文件（夹）添加到本地仓库，-m”提交信息” （越详细越好） git commit -am”commit message” 针对已经被追踪的文件，可以直接添加到本地仓库，不用先add在commit. git commit –amend -m”commit message” 利用本次commit 重写上一次commit git commit –amend –no-edit 利用本次commit 重写上一次commit 不会重写上次commit的提交信息 仓库状态获取git status 可以立即获取本地仓库状态 以及 git的步骤提示，建议多使用此命令 版本回退 git reset –hard HEAD 将工作区，暂存区，本地仓库恢复到上一个版本（–hard） git reset –soft HEAD^^^ 将本地仓库恢复到上三个版本,不会修改暂存区，工作区（–soft） git reset –mixd HEAD~5 将暂存区，本地仓库恢复到上五个版本，不会修改工作区（–mixd，默认） git reset –hard commitID 将工作区，暂存区，本地仓库恢复到上指定版本其中commitID就是每一次commit的版本号，可以使用git reflog获取 撤销暂存 git reset HEAD file.txt 撤销file.txt的add操作，使其变成不跟踪状态 git reset HEAD^ file.txt 将上一次提交版本的file.txt重新置入缓存区 撤销工作区 git checkout – file.txt （只针对未追踪文件）用历史中的file.txt替换现有工作区的file.txt 如果文件增加到暂存区后 又进行了修改，那么执行命令后 将回到暂存区文件状态 git checkout HEAD – file.txt 用最后一次提交版本中的file.txt 替换现有工作区的file.txt git checkout commitID – file.txt 用特定版本的file.txt 替换现有工作区的file.txt 撤销提交git revert commitID 撤销指定版本的commit，并将此操作生成一个全新的commit并提交 文件操作增 touch touch 文件名 ： 新建文件 mkdir mkdir 文件夹名： 新建文件夹 vim vim 文件名 ： 新建文件，并用vim模式打开该文件进行编写 git init git init 文件夹名：新建一个文件夹，并将其初始化为Git代码库 printf printf ‘content’ &gt; 文件名 ：新建一个文件，并把content注入其内容 echo echo ‘content’ &gt; 文件名 ：新建一个文件，并把content注入其内容 删 rm rm 文件名 : 删除文件 clean git clean -f 文件名 ：删除未跟踪文件 改 vim vim 文件名 ： 打开文件，并用vim模式进行修改 mv mv 选定文件名 新的文件名：把选定文件名 修改为 新的文件名 printf printf ‘content’ &gt; 文件名 ： 将 content 替换 文件原有内容 echo echo ‘content’ &gt; 文件名 ： 将 content 替换 文件原有内容 查 pwd 得到当前路径 cd cd 路径 ：进到某一文件路径cd .. : 回退文件路径cd : 回到默认的路径 cat cat 文件名：查看该文件的内容 ls 查看该目录下的文件列表（不包括隐藏文件） ls -a 查看该目录下的文件列表（包括隐藏文件） show git show : ：展示任意分支某一文件的内容 分支操作查看分支 git branch 列出本地分支 git branch -r 列出远端分支 git branch -a 列出所有分支 git branch -v 查看各个分支最后一个提交对象的信息 git branch –merge 查看已经合并到当前分支的分支 git branch –no-merge 查看为合并到当前分支的分支 git remote show origin 可以查看remote地址，远程分支 新建分支 git branch name 新建一个名为name的分支 git checkout -b name 新建一个名为name的分支，并自动切换为该分支 git branch [branch] [commit] 新建一个分支，指向指定commit git branch –track [branch] [remote-branch] 新建一个分支，与指定的远程分支建立追踪关系 删除分支 git branch -d name 删除一个名为name的分支 git branch -D name 强制删除一个名为name的分支 git push : 删除远程分支 git push origin –delete 删除远程分支 切换分支 git checkout name 切换一个名为name的分支 git checkout - 切换上一个分支 重命名分支 git branch -m name 将当前所在分支命名为 name 标签新建标签 git tag [tag] 新建一个tag在当前commit git tag [tag] [commit] 新建一个tag在指定commit git tag v0.9 commitID 对某次提交新建标签 查看标签 git tag 列出所有tag 删除标签 git tag -d [tag] 删除本地tag git push origin :refs/tags/ 可以删除一个远程标签 推送标签 git push origin –tags 一次性推送全部尚未推送到远程的本地标签 git push origin 可以推送一个本地标签 远程仓库 git remote 显示所关联的远程仓库 git remote -v 显示更详细信息 git remote add origin git@server-name:path/repo-name.git 关联一个远程库 git remote rm name 删除一个远程库 git remote rename 将远程连接从 重命名为 合并 git rebase master 将master分之上超前的提交，变基到当前分支 git rebase –interactive 交互模式，修改commit git rebase –continue 处理完冲突继续合并 git rebase –skip 跳过合并 git rebase –abort 取消合并 查看汇总查看信息 git whatchanged –since=’2 weeks ago’ 查看两个星期内的改动 git log –follow [file] 显示某个文件的版本历史 git log –author=”John” 它会显示所有作者叫 John 的提交 get log –after=”yesterday” 查看昨天的历史信息 git log -3 展示最近3次历史信息 git log –graph 可以看到分支合并图 修改历史git rebase -i commitID 将pick 替换成 r , 然后回车，vi退出可以使用 :x修改 git的历史记录的提交信息 查看文件 git diff HEAD – readme.txt 可以查看工作区和版本库里面最新版本的区别 git diff –staged 显示暂存区（已经add）的文件和版本库文件的比较 git ls-files 查看在暂存区的文件 删除暂存 git rm –cached 文件名 把文件从暂缓区 返回至 工作区 其他忽略文件echo node_modules/ &gt;&gt; .gitignore 添加忽略文件 打包 git archive master –format=zip –output=master.zip 将Master分支打包 git bundle create 将历史记录包括分支内容打包到一个文件中 git clone repo.bundle -b 从某个Bundle中导入 工作区 git stash 将工作区现场（已跟踪文件）储藏起来 git stash list 查看保存的工作现场 git stash apply 恢复工作现场 git stash drop 删除stash内容 git stash pop 恢复的同时直接删除stash内容 git stash apply stash@{0} 恢复指定的工作现场 查找内容 git grep “Hello” 从当前目录的所有文件中查找文本内容 git grep “Hello” v2.5 在某一版本中搜索文本 帮助git help -a 结束语 本文会同步更新在以下地方(已链接本人主页),欢迎你在常逛的网站中关注我。 掘金 简书 博客园 CSDN segmentfault 转载本站文章请注明作者和出处 tomotoes.com，请勿用于任何商业用途。深入Web全栈各项技术，坚持原创，文章更新虽不定，但只为质量而生。建议收藏这个坏掉的番茄 tomotoes.com ，愿陪你一起在全栈的道路上努力前行！","tags":[{"name":"Git","slug":"Git","permalink":"http://tomotoes.com/blog/tags/Git/"}]},{"title":"网站必备之简繁切换","date":"2018-01-26T10:17:31.000Z","path":"/posts/316d7913/","text":"一个优秀的网站能够更好地照顾不同的用户。 前言&nbsp;&nbsp;&nbsp;&nbsp;一个优秀的网站为了能够更好地照顾不同的用户，一般都会提供简繁两种版本字体切换，提高用户的体验。例如 : Hexo 官网 。之所以 Hexo 能得到了不少内地忠实粉丝的追捧，是因为 Hexo 的官网不仅提供了适合台湾同胞（作者是来自台湾的）阅读的繁体中文版，还为我们大陆用户提供了简体中文版，照顾了我们平时的写作习惯。同样，我们也可以提供繁体版来照顾那些使用繁体字的台湾、港澳同胞。&nbsp;&nbsp;&nbsp;&nbsp;下面，我将由浅入深地讲解：如何使用 35 行代码，让网站支持简繁切换功能。 正文&nbsp;&nbsp;&nbsp;&nbsp;一般而言，网站上实现两种字体的切换，需要先准备两种字体库，而基本逻辑通常是：识别当前字体，然后根据当前字体去相对的字体库中去寻找另一字体，从而进行字体的替换，处理起来不但麻烦而且耗时。&nbsp;&nbsp;&nbsp;&nbsp;有没有一种方法，可以绕开这些弯路呢？&nbsp;&nbsp;&nbsp;&nbsp;答案是有的，我们可以利用数组索引的特性来完成，具体逻辑如下：function Exchange(text)&#123; const Simplified = \"万与丑\"; const Traditional = \"萬與醜\";//翻译成简体：万与丑 let result,findIndex; for(let i=0;i&lt;text.length;++i)&#123; findIndex = Simplified.indexOf(text[i]); result += findIndex === -1 ? text[i] : Traditional[j]; &#125; return result;&#125; &nbsp;&nbsp;&nbsp;&nbsp;系统来讲，切换字体的大体过程 可分为 3 大步骤： 1. 得到页面的字体内容 2. 切换为简繁字体 3. 保存状态与切换状态 得到页面的内容&nbsp;&nbsp;&nbsp;&nbsp;毫无疑问，我们所要切换的内容便是页面中的汉字，众所周知，判断汉字可以使用正则表达式/[\\u4e00-\\u9fa5]/g，而我们在第一步 所面临的最大问题便是：如何得到页面中所有的字体内容。分析网页中结构可得，显示给用户的内容一般都在&lt;body&gt;标签中或者其各个子标签中，我们该如何获取这些包裹着内容的标签呢？又该如何判断 元素与所需字体呢？&nbsp;&nbsp;&nbsp;&nbsp;下面，我将带你学习两个原生 JS 的 API 。 childNodes childNodes 属性返回节点的子节点集合，包括 元素节点、文本内容、注释、属性等。 document.body.childNodes;/* 获得 body 元素的子节点集合*/ &nbsp;&nbsp;&nbsp;&nbsp;可以想象到，我们先将 document.body.childNodes 作为入口 循环遍历，然后再如法炮制的递归各个元素，便可得到 body 标签中 所有的 DOM 节点以及节点中所需的文本内容。 nodeType nodeType 属性返回以数字值返回指定节点的节点类型。如果节点是元素节点，则 nodeType 属性将返回 1。如果节点是文本节点，则 nodeType 属性将返回 3。 document.body.nodeType === 1;/* true */ &nbsp;&nbsp;&nbsp;&nbsp;有了 nodeType 作为当前元素的判断，我们便可轻松的分离出 DOM 节点与 文本节点，从而来进行不同需求的操作。&nbsp;&nbsp;&nbsp;&nbsp;大体逻辑如下：function translateBody(obj) &#123; let objs = (obj ? obj : document.body).childNodes; for (let i = 0; i &lt; objs.length; i++) &#123; if (objs[i].nodeType === 3) &#123; objs[i].textContent = Exchange(objs[i].textContent); &#125; else if (objs[i].nodeType === 1 ) &#123; translateBody(objs[i]); &#125; &#125;&#125; &nbsp;&nbsp;&nbsp;&nbsp;这样，我们便得到了所需要的文本内容。下面，我们将进行 Exchange 函数的编写。 切换简繁字体&nbsp;&nbsp;&nbsp;&nbsp;毫无疑问，切换字体最大的困难，就是索引相同的字体库了。所幸，我从网上寻得了前辈总结的资源，欢迎大家使用。const Simplified = \"万与丑专业丛东丝丢两严丧个丬丰临为丽举么义乌乐乔习乡书买乱争于亏云亘亚产亩亲亵亸亿仅从仑仓仪们价众优伙会伛伞伟传伤伥伦伧伪伫体余佣佥侠侣侥侦侧侨侩侪侬俣俦俨俩俪俭债倾偬偻偾偿傥傧储傩儿兑兖党兰关兴兹养兽冁内冈册写军农冢冯冲决况冻净凄凉凌减凑凛几凤凫凭凯击凼凿刍划刘则刚创删别刬刭刽刿剀剂剐剑剥剧劝办务劢动励劲劳势勋勐勚匀匦匮区医华协单卖卢卤卧卫却卺厂厅历厉压厌厍厕厢厣厦厨厩厮县参叆叇双发变叙叠叶号叹叽吁后吓吕吗吣吨听启吴呒呓呕呖呗员呙呛呜咏咔咙咛咝咤咴咸哌响哑哒哓哔哕哗哙哜哝哟唛唝唠唡唢唣唤唿啧啬啭啮啰啴啸喷喽喾嗫呵嗳嘘嘤嘱噜噼嚣嚯团园囱围囵国图圆圣圹场坂坏块坚坛坜坝坞坟坠垄垅垆垒垦垧垩垫垭垯垱垲垴埘埙埚埝埯堑堕塆墙壮声壳壶壸处备复够头夸夹夺奁奂奋奖奥妆妇妈妩妪妫姗姜娄娅娆娇娈娱娲娴婳婴婵婶媪嫒嫔嫱嬷孙学孪宁宝实宠审宪宫宽宾寝对寻导寿将尔尘尧尴尸尽层屃屉届属屡屦屿岁岂岖岗岘岙岚岛岭岳岽岿峃峄峡峣峤峥峦崂崃崄崭嵘嵚嵛嵝嵴巅巩巯币帅师帏帐帘帜带帧帮帱帻帼幂幞干并广庄庆庐庑库应庙庞废庼廪开异弃张弥弪弯弹强归当录彟彦彻径徕御忆忏忧忾怀态怂怃怄怅怆怜总怼怿恋恳恶恸恹恺恻恼恽悦悫悬悭悯惊惧惨惩惫惬惭惮惯愍愠愤愦愿慑慭憷懑懒懔戆戋戏戗战戬户扎扑扦执扩扪扫扬扰抚抛抟抠抡抢护报担拟拢拣拥拦拧拨择挂挚挛挜挝挞挟挠挡挢挣挤挥挦捞损捡换捣据捻掳掴掷掸掺掼揸揽揿搀搁搂搅携摄摅摆摇摈摊撄撑撵撷撸撺擞攒敌敛数斋斓斗斩断无旧时旷旸昙昼昽显晋晒晓晔晕晖暂暧札术朴机杀杂权条来杨杩杰极构枞枢枣枥枧枨枪枫枭柜柠柽栀栅标栈栉栊栋栌栎栏树栖样栾桊桠桡桢档桤桥桦桧桨桩梦梼梾检棂椁椟椠椤椭楼榄榇榈榉槚槛槟槠横樯樱橥橱橹橼檐檩欢欤欧歼殁殇残殒殓殚殡殴毁毂毕毙毡毵氇气氢氩氲汇汉污汤汹沓沟没沣沤沥沦沧沨沩沪沵泞泪泶泷泸泺泻泼泽泾洁洒洼浃浅浆浇浈浉浊测浍济浏浐浑浒浓浔浕涂涌涛涝涞涟涠涡涢涣涤润涧涨涩淀渊渌渍渎渐渑渔渖渗温游湾湿溃溅溆溇滗滚滞滟滠满滢滤滥滦滨滩滪漤潆潇潋潍潜潴澜濑濒灏灭灯灵灾灿炀炉炖炜炝点炼炽烁烂烃烛烟烦烧烨烩烫烬热焕焖焘煅煳熘爱爷牍牦牵牺犊犟状犷犸犹狈狍狝狞独狭狮狯狰狱狲猃猎猕猡猪猫猬献獭玑玙玚玛玮环现玱玺珉珏珐珑珰珲琎琏琐琼瑶瑷璇璎瓒瓮瓯电画畅畲畴疖疗疟疠疡疬疮疯疱疴痈痉痒痖痨痪痫痴瘅瘆瘗瘘瘪瘫瘾瘿癞癣癫癯皑皱皲盏盐监盖盗盘眍眦眬着睁睐睑瞒瞩矫矶矾矿砀码砖砗砚砜砺砻砾础硁硅硕硖硗硙硚确硷碍碛碜碱碹磙礼祎祢祯祷祸禀禄禅离秃秆种积称秽秾稆税稣稳穑穷窃窍窑窜窝窥窦窭竖竞笃笋笔笕笺笼笾筑筚筛筜筝筹签简箓箦箧箨箩箪箫篑篓篮篱簖籁籴类籼粜粝粤粪粮糁糇紧絷纟纠纡红纣纤纥约级纨纩纪纫纬纭纮纯纰纱纲纳纴纵纶纷纸纹纺纻纼纽纾线绀绁绂练组绅细织终绉绊绋绌绍绎经绐绑绒结绔绕绖绗绘给绚绛络绝绞统绠绡绢绣绤绥绦继绨绩绪绫绬续绮绯绰绱绲绳维绵绶绷绸绹绺绻综绽绾绿缀缁缂缃缄缅缆缇缈缉缊缋缌缍缎缏缐缑缒缓缔缕编缗缘缙缚缛缜缝缞缟缠缡缢缣缤缥缦缧缨缩缪缫缬缭缮缯缰缱缲缳缴缵罂网罗罚罢罴羁羟羡翘翙翚耢耧耸耻聂聋职聍联聩聪肃肠肤肷肾肿胀胁胆胜胧胨胪胫胶脉脍脏脐脑脓脔脚脱脶脸腊腌腘腭腻腼腽腾膑臜舆舣舰舱舻艰艳艹艺节芈芗芜芦苁苇苈苋苌苍苎苏苘苹茎茏茑茔茕茧荆荐荙荚荛荜荞荟荠荡荣荤荥荦荧荨荩荪荫荬荭荮药莅莜莱莲莳莴莶获莸莹莺莼萚萝萤营萦萧萨葱蒇蒉蒋蒌蓝蓟蓠蓣蓥蓦蔷蔹蔺蔼蕲蕴薮藁藓虏虑虚虫虬虮虽虾虿蚀蚁蚂蚕蚝蚬蛊蛎蛏蛮蛰蛱蛲蛳蛴蜕蜗蜡蝇蝈蝉蝎蝼蝾螀螨蟏衅衔补衬衮袄袅袆袜袭袯装裆裈裢裣裤裥褛褴襁襕见观觃规觅视觇览觉觊觋觌觍觎觏觐觑觞触觯詟誉誊讠计订讣认讥讦讧讨让讪讫训议讯记讱讲讳讴讵讶讷许讹论讻讼讽设访诀证诂诃评诅识诇诈诉诊诋诌词诎诏诐译诒诓诔试诖诗诘诙诚诛诜话诞诟诠诡询诣诤该详诧诨诩诪诫诬语诮误诰诱诲诳说诵诶请诸诹诺读诼诽课诿谀谁谂调谄谅谆谇谈谊谋谌谍谎谏谐谑谒谓谔谕谖谗谘谙谚谛谜谝谞谟谠谡谢谣谤谥谦谧谨谩谪谫谬谭谮谯谰谱谲谳谴谵谶谷豮贝贞负贠贡财责贤败账货质贩贪贫贬购贮贯贰贱贲贳贴贵贶贷贸费贺贻贼贽贾贿赀赁赂赃资赅赆赇赈赉赊赋赌赍赎赏赐赑赒赓赔赕赖赗赘赙赚赛赜赝赞赟赠赡赢赣赪赵赶趋趱趸跃跄跖跞践跶跷跸跹跻踊踌踪踬踯蹑蹒蹰蹿躏躜躯车轧轨轩轪轫转轭轮软轰轱轲轳轴轵轶轷轸轹轺轻轼载轾轿辀辁辂较辄辅辆辇辈辉辊辋辌辍辎辏辐辑辒输辔辕辖辗辘辙辚辞辩辫边辽达迁过迈运还这进远违连迟迩迳迹适选逊递逦逻遗遥邓邝邬邮邹邺邻郁郄郏郐郑郓郦郧郸酝酦酱酽酾酿释里鉅鉴銮錾钆钇针钉钊钋钌钍钎钏钐钑钒钓钔钕钖钗钘钙钚钛钝钞钟钠钡钢钣钤钥钦钧钨钩钪钫钬钭钮钯钰钱钲钳钴钵钶钷钸钹钺钻钼钽钾钿铀铁铂铃铄铅铆铈铉铊铋铍铎铏铐铑铒铕铗铘铙铚铛铜铝铞铟铠铡铢铣铤铥铦铧铨铪铫铬铭铮铯铰铱铲铳铴铵银铷铸铹铺铻铼铽链铿销锁锂锃锄锅锆锇锈锉锊锋锌锍锎锏锐锑锒锓锔锕锖锗错锚锜锞锟锠锡锢锣锤锥锦锨锩锫锬锭键锯锰锱锲锳锴锵锶锷锸锹锺锻锼锽锾锿镀镁镂镃镆镇镈镉镊镌镍镎镏镐镑镒镕镖镗镙镚镛镜镝镞镟镠镡镢镣镤镥镦镧镨镩镪镫镬镭镮镯镰镱镲镳镴镶长门闩闪闫闬闭问闯闰闱闲闳间闵闶闷闸闹闺闻闼闽闾闿阀阁阂阃阄阅阆阇阈阉阊阋阌阍阎阏阐阑阒阓阔阕阖阗阘阙阚阛队阳阴阵阶际陆陇陈陉陕陧陨险随隐隶隽难雏雠雳雾霁霉霭靓静靥鞑鞒鞯鞴韦韧韨韩韪韫韬韵页顶顷顸项顺须顼顽顾顿颀颁颂颃预颅领颇颈颉颊颋颌颍颎颏颐频颒颓颔颕颖颗题颙颚颛颜额颞颟颠颡颢颣颤颥颦颧风飏飐飑飒飓飔飕飖飗飘飙飚飞飨餍饤饥饦饧饨饩饪饫饬饭饮饯饰饱饲饳饴饵饶饷饸饹饺饻饼饽饾饿馀馁馂馃馄馅馆馇馈馉馊馋馌馍馎馏馐馑馒馓馔馕马驭驮驯驰驱驲驳驴驵驶驷驸驹驺驻驼驽驾驿骀骁骂骃骄骅骆骇骈骉骊骋验骍骎骏骐骑骒骓骔骕骖骗骘骙骚骛骜骝骞骟骠骡骢骣骤骥骦骧髅髋髌鬓魇魉鱼鱽鱾鱿鲀鲁鲂鲄鲅鲆鲇鲈鲉鲊鲋鲌鲍鲎鲏鲐鲑鲒鲓鲔鲕鲖鲗鲘鲙鲚鲛鲜鲝鲞鲟鲠鲡鲢鲣鲤鲥鲦鲧鲨鲩鲪鲫鲬鲭鲮鲯鲰鲱鲲鲳鲴鲵鲶鲷鲸鲹鲺鲻鲼鲽鲾鲿鳀鳁鳂鳃鳄鳅鳆鳇鳈鳉鳊鳋鳌鳍鳎鳏鳐鳑鳒鳓鳔鳕鳖鳗鳘鳙鳛鳜鳝鳞鳟鳠鳡鳢鳣鸟鸠鸡鸢鸣鸤鸥鸦鸧鸨鸩鸪鸫鸬鸭鸮鸯鸰鸱鸲鸳鸴鸵鸶鸷鸸鸹鸺鸻鸼鸽鸾鸿鹀鹁鹂鹃鹄鹅鹆鹇鹈鹉鹊鹋鹌鹍鹎鹏鹐鹑鹒鹓鹔鹕鹖鹗鹘鹚鹛鹜鹝鹞鹟鹠鹡鹢鹣鹤鹥鹦鹧鹨鹩鹪鹫鹬鹭鹯鹰鹱鹲鹳鹴鹾麦麸黄黉黡黩黪黾\";const Traditional = \"萬與醜專業叢東絲丟兩嚴喪個爿豐臨為麗舉麼義烏樂喬習鄉書買亂爭於虧雲亙亞產畝親褻嚲億僅從侖倉儀們價眾優夥會傴傘偉傳傷倀倫傖偽佇體餘傭僉俠侶僥偵側僑儈儕儂俁儔儼倆儷儉債傾傯僂僨償儻儐儲儺兒兌兗黨蘭關興茲養獸囅內岡冊寫軍農塚馮衝決況凍淨淒涼淩減湊凜幾鳳鳧憑凱擊氹鑿芻劃劉則剛創刪別剗剄劊劌剴劑剮劍剝劇勸辦務勱動勵勁勞勢勳猛勩勻匭匱區醫華協單賣盧鹵臥衛卻巹廠廳曆厲壓厭厙廁廂厴廈廚廄廝縣參靉靆雙發變敘疊葉號歎嘰籲後嚇呂嗎唚噸聽啟吳嘸囈嘔嚦唄員咼嗆嗚詠哢嚨嚀噝吒噅鹹呱響啞噠嘵嗶噦嘩噲嚌噥喲嘜嗊嘮啢嗩唕喚呼嘖嗇囀齧囉嘽嘯噴嘍嚳囁嗬噯噓嚶囑嚕劈囂謔團園囪圍圇國圖圓聖壙場阪壞塊堅壇壢壩塢墳墜壟壟壚壘墾坰堊墊埡墶壋塏堖塒塤堝墊垵塹墮壪牆壯聲殼壺壼處備複夠頭誇夾奪奩奐奮獎奧妝婦媽嫵嫗媯姍薑婁婭嬈嬌孌娛媧嫻嫿嬰嬋嬸媼嬡嬪嬙嬤孫學孿寧寶實寵審憲宮寬賓寢對尋導壽將爾塵堯尷屍盡層屭屜屆屬屢屨嶼歲豈嶇崗峴嶴嵐島嶺嶽崠巋嶨嶧峽嶢嶠崢巒嶗崍嶮嶄嶸嶔崳嶁脊巔鞏巰幣帥師幃帳簾幟帶幀幫幬幘幗冪襆幹並廣莊慶廬廡庫應廟龐廢廎廩開異棄張彌弳彎彈強歸當錄彠彥徹徑徠禦憶懺憂愾懷態慫憮慪悵愴憐總懟懌戀懇惡慟懨愷惻惱惲悅愨懸慳憫驚懼慘懲憊愜慚憚慣湣慍憤憒願懾憖怵懣懶懍戇戔戲戧戰戩戶紮撲扡執擴捫掃揚擾撫拋摶摳掄搶護報擔擬攏揀擁攔擰撥擇掛摯攣掗撾撻挾撓擋撟掙擠揮撏撈損撿換搗據撚擄摑擲撣摻摜摣攬撳攙擱摟攪攜攝攄擺搖擯攤攖撐攆擷擼攛擻攢敵斂數齋斕鬥斬斷無舊時曠暘曇晝曨顯晉曬曉曄暈暉暫曖劄術樸機殺雜權條來楊榪傑極構樅樞棗櫪梘棖槍楓梟櫃檸檉梔柵標棧櫛櫳棟櫨櫟欄樹棲樣欒棬椏橈楨檔榿橋樺檜槳樁夢檮棶檢欞槨櫝槧欏橢樓欖櫬櫚櫸檟檻檳櫧橫檣櫻櫫櫥櫓櫞簷檁歡歟歐殲歿殤殘殞殮殫殯毆毀轂畢斃氈毿氌氣氫氬氳彙漢汙湯洶遝溝沒灃漚瀝淪滄渢溈滬濔濘淚澩瀧瀘濼瀉潑澤涇潔灑窪浹淺漿澆湞溮濁測澮濟瀏滻渾滸濃潯濜塗湧濤澇淶漣潿渦溳渙滌潤澗漲澀澱淵淥漬瀆漸澠漁瀋滲溫遊灣濕潰濺漵漊潷滾滯灩灄滿瀅濾濫灤濱灘澦濫瀠瀟瀲濰潛瀦瀾瀨瀕灝滅燈靈災燦煬爐燉煒熗點煉熾爍爛烴燭煙煩燒燁燴燙燼熱煥燜燾煆糊溜愛爺牘犛牽犧犢強狀獷獁猶狽麅獮獰獨狹獅獪猙獄猻獫獵獼玀豬貓蝟獻獺璣璵瑒瑪瑋環現瑲璽瑉玨琺瓏璫琿璡璉瑣瓊瑤璦璿瓔瓚甕甌電畫暢佘疇癤療瘧癘瘍鬁瘡瘋皰屙癰痙癢瘂癆瘓癇癡癉瘮瘞瘺癟癱癮癭癩癬癲臒皚皺皸盞鹽監蓋盜盤瞘眥矓著睜睞瞼瞞矚矯磯礬礦碭碼磚硨硯碸礪礱礫礎硜矽碩硤磽磑礄確鹼礙磧磣堿镟滾禮禕禰禎禱禍稟祿禪離禿稈種積稱穢穠穭稅穌穩穡窮竊竅窯竄窩窺竇窶豎競篤筍筆筧箋籠籩築篳篩簹箏籌簽簡籙簀篋籜籮簞簫簣簍籃籬籪籟糴類秈糶糲粵糞糧糝餱緊縶糸糾紆紅紂纖紇約級紈纊紀紉緯紜紘純紕紗綱納紝縱綸紛紙紋紡紵紖紐紓線紺絏紱練組紳細織終縐絆紼絀紹繹經紿綁絨結絝繞絰絎繪給絢絳絡絕絞統綆綃絹繡綌綏絛繼綈績緒綾緓續綺緋綽緔緄繩維綿綬繃綢綯綹綣綜綻綰綠綴緇緙緗緘緬纜緹緲緝縕繢緦綞緞緶線緱縋緩締縷編緡緣縉縛縟縝縫縗縞纏縭縊縑繽縹縵縲纓縮繆繅纈繚繕繒韁繾繰繯繳纘罌網羅罰罷羆羈羥羨翹翽翬耮耬聳恥聶聾職聹聯聵聰肅腸膚膁腎腫脹脅膽勝朧腖臚脛膠脈膾髒臍腦膿臠腳脫腡臉臘醃膕齶膩靦膃騰臏臢輿艤艦艙艫艱豔艸藝節羋薌蕪蘆蓯葦藶莧萇蒼苧蘇檾蘋莖蘢蔦塋煢繭荊薦薘莢蕘蓽蕎薈薺蕩榮葷滎犖熒蕁藎蓀蔭蕒葒葤藥蒞蓧萊蓮蒔萵薟獲蕕瑩鶯蓴蘀蘿螢營縈蕭薩蔥蕆蕢蔣蔞藍薊蘺蕷鎣驀薔蘞藺藹蘄蘊藪槁蘚虜慮虛蟲虯蟣雖蝦蠆蝕蟻螞蠶蠔蜆蠱蠣蟶蠻蟄蛺蟯螄蠐蛻蝸蠟蠅蟈蟬蠍螻蠑螿蟎蠨釁銜補襯袞襖嫋褘襪襲襏裝襠褌褳襝褲襇褸襤繈襴見觀覎規覓視覘覽覺覬覡覿覥覦覯覲覷觴觸觶讋譽謄訁計訂訃認譏訐訌討讓訕訖訓議訊記訒講諱謳詎訝訥許訛論訩訟諷設訪訣證詁訶評詛識詗詐訴診詆謅詞詘詔詖譯詒誆誄試詿詩詰詼誠誅詵話誕詬詮詭詢詣諍該詳詫諢詡譸誡誣語誚誤誥誘誨誑說誦誒請諸諏諾讀諑誹課諉諛誰諗調諂諒諄誶談誼謀諶諜謊諫諧謔謁謂諤諭諼讒諮諳諺諦謎諞諝謨讜謖謝謠謗諡謙謐謹謾謫譾謬譚譖譙讕譜譎讞譴譫讖穀豶貝貞負貟貢財責賢敗賬貨質販貪貧貶購貯貫貳賤賁貰貼貴貺貸貿費賀貽賊贄賈賄貲賃賂贓資賅贐賕賑賚賒賦賭齎贖賞賜贔賙賡賠賧賴賵贅賻賺賽賾贗讚贇贈贍贏贛赬趙趕趨趲躉躍蹌蹠躒踐躂蹺蹕躚躋踴躊蹤躓躑躡蹣躕躥躪躦軀車軋軌軒軑軔轉軛輪軟轟軲軻轤軸軹軼軤軫轢軺輕軾載輊轎輈輇輅較輒輔輛輦輩輝輥輞輬輟輜輳輻輯轀輸轡轅轄輾轆轍轔辭辯辮邊遼達遷過邁運還這進遠違連遲邇逕跡適選遜遞邐邏遺遙鄧鄺鄔郵鄒鄴鄰鬱郤郟鄶鄭鄆酈鄖鄲醞醱醬釅釃釀釋裏钜鑒鑾鏨釓釔針釘釗釙釕釷釺釧釤鈒釩釣鍆釹鍚釵鈃鈣鈈鈦鈍鈔鍾鈉鋇鋼鈑鈐鑰欽鈞鎢鉤鈧鈁鈥鈄鈕鈀鈺錢鉦鉗鈷缽鈳鉕鈽鈸鉞鑽鉬鉭鉀鈿鈾鐵鉑鈴鑠鉛鉚鈰鉉鉈鉍鈹鐸鉶銬銠鉺銪鋏鋣鐃銍鐺銅鋁銱銦鎧鍘銖銑鋌銩銛鏵銓鉿銚鉻銘錚銫鉸銥鏟銃鐋銨銀銣鑄鐒鋪鋙錸鋱鏈鏗銷鎖鋰鋥鋤鍋鋯鋨鏽銼鋝鋒鋅鋶鐦鐧銳銻鋃鋟鋦錒錆鍺錯錨錡錁錕錩錫錮鑼錘錐錦鍁錈錇錟錠鍵鋸錳錙鍥鍈鍇鏘鍶鍔鍤鍬鍾鍛鎪鍠鍰鎄鍍鎂鏤鎡鏌鎮鎛鎘鑷鐫鎳鎿鎦鎬鎊鎰鎔鏢鏜鏍鏰鏞鏡鏑鏃鏇鏐鐔钁鐐鏷鑥鐓鑭鐠鑹鏹鐙鑊鐳鐶鐲鐮鐿鑔鑣鑞鑲長門閂閃閆閈閉問闖閏闈閑閎間閔閌悶閘鬧閨聞闥閩閭闓閥閣閡閫鬮閱閬闍閾閹閶鬩閿閽閻閼闡闌闃闠闊闋闔闐闒闕闞闤隊陽陰陣階際陸隴陳陘陝隉隕險隨隱隸雋難雛讎靂霧霽黴靄靚靜靨韃鞽韉韝韋韌韍韓韙韞韜韻頁頂頃頇項順須頊頑顧頓頎頒頌頏預顱領頗頸頡頰頲頜潁熲頦頤頻頮頹頷頴穎顆題顒顎顓顏額顳顢顛顙顥纇顫顬顰顴風颺颭颮颯颶颸颼颻飀飄飆飆飛饗饜飣饑飥餳飩餼飪飫飭飯飲餞飾飽飼飿飴餌饒餉餄餎餃餏餅餑餖餓餘餒餕餜餛餡館餷饋餶餿饞饁饃餺餾饈饉饅饊饌饢馬馭馱馴馳驅馹駁驢駔駛駟駙駒騶駐駝駑駕驛駘驍罵駰驕驊駱駭駢驫驪騁驗騂駸駿騏騎騍騅騌驌驂騙騭騤騷騖驁騮騫騸驃騾驄驏驟驥驦驤髏髖髕鬢魘魎魚魛魢魷魨魯魴魺鮁鮃鯰鱸鮋鮓鮒鮊鮑鱟鮍鮐鮭鮚鮳鮪鮞鮦鰂鮜鱠鱭鮫鮮鮺鯗鱘鯁鱺鰱鰹鯉鰣鰷鯀鯊鯇鮶鯽鯒鯖鯪鯕鯫鯡鯤鯧鯝鯢鯰鯛鯨鯵鯴鯔鱝鰈鰏鱨鯷鰮鰃鰓鱷鰍鰒鰉鰁鱂鯿鰠鼇鰭鰨鰥鰩鰟鰜鰳鰾鱈鱉鰻鰵鱅鰼鱖鱔鱗鱒鱯鱤鱧鱣鳥鳩雞鳶鳴鳲鷗鴉鶬鴇鴆鴣鶇鸕鴨鴞鴦鴒鴟鴝鴛鴬鴕鷥鷙鴯鴰鵂鴴鵃鴿鸞鴻鵐鵓鸝鵑鵠鵝鵒鷳鵜鵡鵲鶓鵪鶤鵯鵬鵮鶉鶊鵷鷫鶘鶡鶚鶻鶿鶥鶩鷊鷂鶲鶹鶺鷁鶼鶴鷖鸚鷓鷚鷯鷦鷲鷸鷺鸇鷹鸌鸏鸛鸘鹺麥麩黃黌黶黷黲黽\"; &nbsp;&nbsp;&nbsp;&nbsp;根据上面的总结，Exchange 函数编写如下：function Exchange(text) &#123; let result = '', j, s = \"万与丑专业丛东丝丢两严丧个丬丰临为丽举么义乌乐乔习乡书买乱争于亏云亘亚产亩亲亵亸亿仅从仑仓仪们价众优伙会伛伞伟传伤伥伦伧伪伫体余佣佥侠侣侥侦侧侨侩侪侬俣俦俨俩俪俭债倾偬偻偾偿傥傧储傩儿兑兖党兰关兴兹养兽冁内冈册写军农冢冯冲决况冻净凄凉凌减凑凛几凤凫凭凯击凼凿刍划刘则刚创删别刬刭刽刿剀剂剐剑剥剧劝办务劢动励劲劳势勋勐勚匀匦匮区医华协单卖卢卤卧卫却卺厂厅历厉压厌厍厕厢厣厦厨厩厮县参叆叇双发变叙叠叶号叹叽吁后吓吕吗吣吨听启吴呒呓呕呖呗员呙呛呜咏咔咙咛咝咤咴咸哌响哑哒哓哔哕哗哙哜哝哟唛唝唠唡唢唣唤唿啧啬啭啮啰啴啸喷喽喾嗫呵嗳嘘嘤嘱噜噼嚣嚯团园囱围囵国图圆圣圹场坂坏块坚坛坜坝坞坟坠垄垅垆垒垦垧垩垫垭垯垱垲垴埘埙埚埝埯堑堕塆墙壮声壳壶壸处备复够头夸夹夺奁奂奋奖奥妆妇妈妩妪妫姗姜娄娅娆娇娈娱娲娴婳婴婵婶媪嫒嫔嫱嬷孙学孪宁宝实宠审宪宫宽宾寝对寻导寿将尔尘尧尴尸尽层屃屉届属屡屦屿岁岂岖岗岘岙岚岛岭岳岽岿峃峄峡峣峤峥峦崂崃崄崭嵘嵚嵛嵝嵴巅巩巯币帅师帏帐帘帜带帧帮帱帻帼幂幞干并广庄庆庐庑库应庙庞废庼廪开异弃张弥弪弯弹强归当录彟彦彻径徕御忆忏忧忾怀态怂怃怄怅怆怜总怼怿恋恳恶恸恹恺恻恼恽悦悫悬悭悯惊惧惨惩惫惬惭惮惯愍愠愤愦愿慑慭憷懑懒懔戆戋戏戗战戬户扎扑扦执扩扪扫扬扰抚抛抟抠抡抢护报担拟拢拣拥拦拧拨择挂挚挛挜挝挞挟挠挡挢挣挤挥挦捞损捡换捣据捻掳掴掷掸掺掼揸揽揿搀搁搂搅携摄摅摆摇摈摊撄撑撵撷撸撺擞攒敌敛数斋斓斗斩断无旧时旷旸昙昼昽显晋晒晓晔晕晖暂暧札术朴机杀杂权条来杨杩杰极构枞枢枣枥枧枨枪枫枭柜柠柽栀栅标栈栉栊栋栌栎栏树栖样栾桊桠桡桢档桤桥桦桧桨桩梦梼梾检棂椁椟椠椤椭楼榄榇榈榉槚槛槟槠横樯樱橥橱橹橼檐檩欢欤欧歼殁殇残殒殓殚殡殴毁毂毕毙毡毵氇气氢氩氲汇汉污汤汹沓沟没沣沤沥沦沧沨沩沪沵泞泪泶泷泸泺泻泼泽泾洁洒洼浃浅浆浇浈浉浊测浍济浏浐浑浒浓浔浕涂涌涛涝涞涟涠涡涢涣涤润涧涨涩淀渊渌渍渎渐渑渔渖渗温游湾湿溃溅溆溇滗滚滞滟滠满滢滤滥滦滨滩滪漤潆潇潋潍潜潴澜濑濒灏灭灯灵灾灿炀炉炖炜炝点炼炽烁烂烃烛烟烦烧烨烩烫烬热焕焖焘煅煳熘爱爷牍牦牵牺犊犟状犷犸犹狈狍狝狞独狭狮狯狰狱狲猃猎猕猡猪猫猬献獭玑玙玚玛玮环现玱玺珉珏珐珑珰珲琎琏琐琼瑶瑷璇璎瓒瓮瓯电画畅畲畴疖疗疟疠疡疬疮疯疱疴痈痉痒痖痨痪痫痴瘅瘆瘗瘘瘪瘫瘾瘿癞癣癫癯皑皱皲盏盐监盖盗盘眍眦眬着睁睐睑瞒瞩矫矶矾矿砀码砖砗砚砜砺砻砾础硁硅硕硖硗硙硚确硷碍碛碜碱碹磙礼祎祢祯祷祸禀禄禅离秃秆种积称秽秾稆税稣稳穑穷窃窍窑窜窝窥窦窭竖竞笃笋笔笕笺笼笾筑筚筛筜筝筹签简箓箦箧箨箩箪箫篑篓篮篱簖籁籴类籼粜粝粤粪粮糁糇紧絷纟纠纡红纣纤纥约级纨纩纪纫纬纭纮纯纰纱纲纳纴纵纶纷纸纹纺纻纼纽纾线绀绁绂练组绅细织终绉绊绋绌绍绎经绐绑绒结绔绕绖绗绘给绚绛络绝绞统绠绡绢绣绤绥绦继绨绩绪绫绬续绮绯绰绱绲绳维绵绶绷绸绹绺绻综绽绾绿缀缁缂缃缄缅缆缇缈缉缊缋缌缍缎缏缐缑缒缓缔缕编缗缘缙缚缛缜缝缞缟缠缡缢缣缤缥缦缧缨缩缪缫缬缭缮缯缰缱缲缳缴缵罂网罗罚罢罴羁羟羡翘翙翚耢耧耸耻聂聋职聍联聩聪肃肠肤肷肾肿胀胁胆胜胧胨胪胫胶脉脍脏脐脑脓脔脚脱脶脸腊腌腘腭腻腼腽腾膑臜舆舣舰舱舻艰艳艹艺节芈芗芜芦苁苇苈苋苌苍苎苏苘苹茎茏茑茔茕茧荆荐荙荚荛荜荞荟荠荡荣荤荥荦荧荨荩荪荫荬荭荮药莅莜莱莲莳莴莶获莸莹莺莼萚萝萤营萦萧萨葱蒇蒉蒋蒌蓝蓟蓠蓣蓥蓦蔷蔹蔺蔼蕲蕴薮藁藓虏虑虚虫虬虮虽虾虿蚀蚁蚂蚕蚝蚬蛊蛎蛏蛮蛰蛱蛲蛳蛴蜕蜗蜡蝇蝈蝉蝎蝼蝾螀螨蟏衅衔补衬衮袄袅袆袜袭袯装裆裈裢裣裤裥褛褴襁襕见观觃规觅视觇览觉觊觋觌觍觎觏觐觑觞触觯詟誉誊讠计订讣认讥讦讧讨让讪讫训议讯记讱讲讳讴讵讶讷许讹论讻讼讽设访诀证诂诃评诅识诇诈诉诊诋诌词诎诏诐译诒诓诔试诖诗诘诙诚诛诜话诞诟诠诡询诣诤该详诧诨诩诪诫诬语诮误诰诱诲诳说诵诶请诸诹诺读诼诽课诿谀谁谂调谄谅谆谇谈谊谋谌谍谎谏谐谑谒谓谔谕谖谗谘谙谚谛谜谝谞谟谠谡谢谣谤谥谦谧谨谩谪谫谬谭谮谯谰谱谲谳谴谵谶谷豮贝贞负贠贡财责贤败账货质贩贪贫贬购贮贯贰贱贲贳贴贵贶贷贸费贺贻贼贽贾贿赀赁赂赃资赅赆赇赈赉赊赋赌赍赎赏赐赑赒赓赔赕赖赗赘赙赚赛赜赝赞赟赠赡赢赣赪赵赶趋趱趸跃跄跖跞践跶跷跸跹跻踊踌踪踬踯蹑蹒蹰蹿躏躜躯车轧轨轩轪轫转轭轮软轰轱轲轳轴轵轶轷轸轹轺轻轼载轾轿辀辁辂较辄辅辆辇辈辉辊辋辌辍辎辏辐辑辒输辔辕辖辗辘辙辚辞辩辫边辽达迁过迈运还这进远违连迟迩迳迹适选逊递逦逻遗遥邓邝邬邮邹邺邻郁郄郏郐郑郓郦郧郸酝酦酱酽酾酿释里鉅鉴銮錾钆钇针钉钊钋钌钍钎钏钐钑钒钓钔钕钖钗钘钙钚钛钝钞钟钠钡钢钣钤钥钦钧钨钩钪钫钬钭钮钯钰钱钲钳钴钵钶钷钸钹钺钻钼钽钾钿铀铁铂铃铄铅铆铈铉铊铋铍铎铏铐铑铒铕铗铘铙铚铛铜铝铞铟铠铡铢铣铤铥铦铧铨铪铫铬铭铮铯铰铱铲铳铴铵银铷铸铹铺铻铼铽链铿销锁锂锃锄锅锆锇锈锉锊锋锌锍锎锏锐锑锒锓锔锕锖锗错锚锜锞锟锠锡锢锣锤锥锦锨锩锫锬锭键锯锰锱锲锳锴锵锶锷锸锹锺锻锼锽锾锿镀镁镂镃镆镇镈镉镊镌镍镎镏镐镑镒镕镖镗镙镚镛镜镝镞镟镠镡镢镣镤镥镦镧镨镩镪镫镬镭镮镯镰镱镲镳镴镶长门闩闪闫闬闭问闯闰闱闲闳间闵闶闷闸闹闺闻闼闽闾闿阀阁阂阃阄阅阆阇阈阉阊阋阌阍阎阏阐阑阒阓阔阕阖阗阘阙阚阛队阳阴阵阶际陆陇陈陉陕陧陨险随隐隶隽难雏雠雳雾霁霉霭靓静靥鞑鞒鞯鞴韦韧韨韩韪韫韬韵页顶顷顸项顺须顼顽顾顿颀颁颂颃预颅领颇颈颉颊颋颌颍颎颏颐频颒颓颔颕颖颗题颙颚颛颜额颞颟颠颡颢颣颤颥颦颧风飏飐飑飒飓飔飕飖飗飘飙飚飞飨餍饤饥饦饧饨饩饪饫饬饭饮饯饰饱饲饳饴饵饶饷饸饹饺饻饼饽饾饿馀馁馂馃馄馅馆馇馈馉馊馋馌馍馎馏馐馑馒馓馔馕马驭驮驯驰驱驲驳驴驵驶驷驸驹驺驻驼驽驾驿骀骁骂骃骄骅骆骇骈骉骊骋验骍骎骏骐骑骒骓骔骕骖骗骘骙骚骛骜骝骞骟骠骡骢骣骤骥骦骧髅髋髌鬓魇魉鱼鱽鱾鱿鲀鲁鲂鲄鲅鲆鲇鲈鲉鲊鲋鲌鲍鲎鲏鲐鲑鲒鲓鲔鲕鲖鲗鲘鲙鲚鲛鲜鲝鲞鲟鲠鲡鲢鲣鲤鲥鲦鲧鲨鲩鲪鲫鲬鲭鲮鲯鲰鲱鲲鲳鲴鲵鲶鲷鲸鲹鲺鲻鲼鲽鲾鲿鳀鳁鳂鳃鳄鳅鳆鳇鳈鳉鳊鳋鳌鳍鳎鳏鳐鳑鳒鳓鳔鳕鳖鳗鳘鳙鳛鳜鳝鳞鳟鳠鳡鳢鳣鸟鸠鸡鸢鸣鸤鸥鸦鸧鸨鸩鸪鸫鸬鸭鸮鸯鸰鸱鸲鸳鸴鸵鸶鸷鸸鸹鸺鸻鸼鸽鸾鸿鹀鹁鹂鹃鹄鹅鹆鹇鹈鹉鹊鹋鹌鹍鹎鹏鹐鹑鹒鹓鹔鹕鹖鹗鹘鹚鹛鹜鹝鹞鹟鹠鹡鹢鹣鹤鹥鹦鹧鹨鹩鹪鹫鹬鹭鹯鹰鹱鹲鹳鹴鹾麦麸黄黉黡黩黪黾\", t = \"萬與醜專業叢東絲丟兩嚴喪個爿豐臨為麗舉麼義烏樂喬習鄉書買亂爭於虧雲亙亞產畝親褻嚲億僅從侖倉儀們價眾優夥會傴傘偉傳傷倀倫傖偽佇體餘傭僉俠侶僥偵側僑儈儕儂俁儔儼倆儷儉債傾傯僂僨償儻儐儲儺兒兌兗黨蘭關興茲養獸囅內岡冊寫軍農塚馮衝決況凍淨淒涼淩減湊凜幾鳳鳧憑凱擊氹鑿芻劃劉則剛創刪別剗剄劊劌剴劑剮劍剝劇勸辦務勱動勵勁勞勢勳猛勩勻匭匱區醫華協單賣盧鹵臥衛卻巹廠廳曆厲壓厭厙廁廂厴廈廚廄廝縣參靉靆雙發變敘疊葉號歎嘰籲後嚇呂嗎唚噸聽啟吳嘸囈嘔嚦唄員咼嗆嗚詠哢嚨嚀噝吒噅鹹呱響啞噠嘵嗶噦嘩噲嚌噥喲嘜嗊嘮啢嗩唕喚呼嘖嗇囀齧囉嘽嘯噴嘍嚳囁嗬噯噓嚶囑嚕劈囂謔團園囪圍圇國圖圓聖壙場阪壞塊堅壇壢壩塢墳墜壟壟壚壘墾坰堊墊埡墶壋塏堖塒塤堝墊垵塹墮壪牆壯聲殼壺壼處備複夠頭誇夾奪奩奐奮獎奧妝婦媽嫵嫗媯姍薑婁婭嬈嬌孌娛媧嫻嫿嬰嬋嬸媼嬡嬪嬙嬤孫學孿寧寶實寵審憲宮寬賓寢對尋導壽將爾塵堯尷屍盡層屭屜屆屬屢屨嶼歲豈嶇崗峴嶴嵐島嶺嶽崠巋嶨嶧峽嶢嶠崢巒嶗崍嶮嶄嶸嶔崳嶁脊巔鞏巰幣帥師幃帳簾幟帶幀幫幬幘幗冪襆幹並廣莊慶廬廡庫應廟龐廢廎廩開異棄張彌弳彎彈強歸當錄彠彥徹徑徠禦憶懺憂愾懷態慫憮慪悵愴憐總懟懌戀懇惡慟懨愷惻惱惲悅愨懸慳憫驚懼慘懲憊愜慚憚慣湣慍憤憒願懾憖怵懣懶懍戇戔戲戧戰戩戶紮撲扡執擴捫掃揚擾撫拋摶摳掄搶護報擔擬攏揀擁攔擰撥擇掛摯攣掗撾撻挾撓擋撟掙擠揮撏撈損撿換搗據撚擄摑擲撣摻摜摣攬撳攙擱摟攪攜攝攄擺搖擯攤攖撐攆擷擼攛擻攢敵斂數齋斕鬥斬斷無舊時曠暘曇晝曨顯晉曬曉曄暈暉暫曖劄術樸機殺雜權條來楊榪傑極構樅樞棗櫪梘棖槍楓梟櫃檸檉梔柵標棧櫛櫳棟櫨櫟欄樹棲樣欒棬椏橈楨檔榿橋樺檜槳樁夢檮棶檢欞槨櫝槧欏橢樓欖櫬櫚櫸檟檻檳櫧橫檣櫻櫫櫥櫓櫞簷檁歡歟歐殲歿殤殘殞殮殫殯毆毀轂畢斃氈毿氌氣氫氬氳彙漢汙湯洶遝溝沒灃漚瀝淪滄渢溈滬濔濘淚澩瀧瀘濼瀉潑澤涇潔灑窪浹淺漿澆湞溮濁測澮濟瀏滻渾滸濃潯濜塗湧濤澇淶漣潿渦溳渙滌潤澗漲澀澱淵淥漬瀆漸澠漁瀋滲溫遊灣濕潰濺漵漊潷滾滯灩灄滿瀅濾濫灤濱灘澦濫瀠瀟瀲濰潛瀦瀾瀨瀕灝滅燈靈災燦煬爐燉煒熗點煉熾爍爛烴燭煙煩燒燁燴燙燼熱煥燜燾煆糊溜愛爺牘犛牽犧犢強狀獷獁猶狽麅獮獰獨狹獅獪猙獄猻獫獵獼玀豬貓蝟獻獺璣璵瑒瑪瑋環現瑲璽瑉玨琺瓏璫琿璡璉瑣瓊瑤璦璿瓔瓚甕甌電畫暢佘疇癤療瘧癘瘍鬁瘡瘋皰屙癰痙癢瘂癆瘓癇癡癉瘮瘞瘺癟癱癮癭癩癬癲臒皚皺皸盞鹽監蓋盜盤瞘眥矓著睜睞瞼瞞矚矯磯礬礦碭碼磚硨硯碸礪礱礫礎硜矽碩硤磽磑礄確鹼礙磧磣堿镟滾禮禕禰禎禱禍稟祿禪離禿稈種積稱穢穠穭稅穌穩穡窮竊竅窯竄窩窺竇窶豎競篤筍筆筧箋籠籩築篳篩簹箏籌簽簡籙簀篋籜籮簞簫簣簍籃籬籪籟糴類秈糶糲粵糞糧糝餱緊縶糸糾紆紅紂纖紇約級紈纊紀紉緯紜紘純紕紗綱納紝縱綸紛紙紋紡紵紖紐紓線紺絏紱練組紳細織終縐絆紼絀紹繹經紿綁絨結絝繞絰絎繪給絢絳絡絕絞統綆綃絹繡綌綏絛繼綈績緒綾緓續綺緋綽緔緄繩維綿綬繃綢綯綹綣綜綻綰綠綴緇緙緗緘緬纜緹緲緝縕繢緦綞緞緶線緱縋緩締縷編緡緣縉縛縟縝縫縗縞纏縭縊縑繽縹縵縲纓縮繆繅纈繚繕繒韁繾繰繯繳纘罌網羅罰罷羆羈羥羨翹翽翬耮耬聳恥聶聾職聹聯聵聰肅腸膚膁腎腫脹脅膽勝朧腖臚脛膠脈膾髒臍腦膿臠腳脫腡臉臘醃膕齶膩靦膃騰臏臢輿艤艦艙艫艱豔艸藝節羋薌蕪蘆蓯葦藶莧萇蒼苧蘇檾蘋莖蘢蔦塋煢繭荊薦薘莢蕘蓽蕎薈薺蕩榮葷滎犖熒蕁藎蓀蔭蕒葒葤藥蒞蓧萊蓮蒔萵薟獲蕕瑩鶯蓴蘀蘿螢營縈蕭薩蔥蕆蕢蔣蔞藍薊蘺蕷鎣驀薔蘞藺藹蘄蘊藪槁蘚虜慮虛蟲虯蟣雖蝦蠆蝕蟻螞蠶蠔蜆蠱蠣蟶蠻蟄蛺蟯螄蠐蛻蝸蠟蠅蟈蟬蠍螻蠑螿蟎蠨釁銜補襯袞襖嫋褘襪襲襏裝襠褌褳襝褲襇褸襤繈襴見觀覎規覓視覘覽覺覬覡覿覥覦覯覲覷觴觸觶讋譽謄訁計訂訃認譏訐訌討讓訕訖訓議訊記訒講諱謳詎訝訥許訛論訩訟諷設訪訣證詁訶評詛識詗詐訴診詆謅詞詘詔詖譯詒誆誄試詿詩詰詼誠誅詵話誕詬詮詭詢詣諍該詳詫諢詡譸誡誣語誚誤誥誘誨誑說誦誒請諸諏諾讀諑誹課諉諛誰諗調諂諒諄誶談誼謀諶諜謊諫諧謔謁謂諤諭諼讒諮諳諺諦謎諞諝謨讜謖謝謠謗諡謙謐謹謾謫譾謬譚譖譙讕譜譎讞譴譫讖穀豶貝貞負貟貢財責賢敗賬貨質販貪貧貶購貯貫貳賤賁貰貼貴貺貸貿費賀貽賊贄賈賄貲賃賂贓資賅贐賕賑賚賒賦賭齎贖賞賜贔賙賡賠賧賴賵贅賻賺賽賾贗讚贇贈贍贏贛赬趙趕趨趲躉躍蹌蹠躒踐躂蹺蹕躚躋踴躊蹤躓躑躡蹣躕躥躪躦軀車軋軌軒軑軔轉軛輪軟轟軲軻轤軸軹軼軤軫轢軺輕軾載輊轎輈輇輅較輒輔輛輦輩輝輥輞輬輟輜輳輻輯轀輸轡轅轄輾轆轍轔辭辯辮邊遼達遷過邁運還這進遠違連遲邇逕跡適選遜遞邐邏遺遙鄧鄺鄔郵鄒鄴鄰鬱郤郟鄶鄭鄆酈鄖鄲醞醱醬釅釃釀釋裏钜鑒鑾鏨釓釔針釘釗釙釕釷釺釧釤鈒釩釣鍆釹鍚釵鈃鈣鈈鈦鈍鈔鍾鈉鋇鋼鈑鈐鑰欽鈞鎢鉤鈧鈁鈥鈄鈕鈀鈺錢鉦鉗鈷缽鈳鉕鈽鈸鉞鑽鉬鉭鉀鈿鈾鐵鉑鈴鑠鉛鉚鈰鉉鉈鉍鈹鐸鉶銬銠鉺銪鋏鋣鐃銍鐺銅鋁銱銦鎧鍘銖銑鋌銩銛鏵銓鉿銚鉻銘錚銫鉸銥鏟銃鐋銨銀銣鑄鐒鋪鋙錸鋱鏈鏗銷鎖鋰鋥鋤鍋鋯鋨鏽銼鋝鋒鋅鋶鐦鐧銳銻鋃鋟鋦錒錆鍺錯錨錡錁錕錩錫錮鑼錘錐錦鍁錈錇錟錠鍵鋸錳錙鍥鍈鍇鏘鍶鍔鍤鍬鍾鍛鎪鍠鍰鎄鍍鎂鏤鎡鏌鎮鎛鎘鑷鐫鎳鎿鎦鎬鎊鎰鎔鏢鏜鏍鏰鏞鏡鏑鏃鏇鏐鐔钁鐐鏷鑥鐓鑭鐠鑹鏹鐙鑊鐳鐶鐲鐮鐿鑔鑣鑞鑲長門閂閃閆閈閉問闖閏闈閑閎間閔閌悶閘鬧閨聞闥閩閭闓閥閣閡閫鬮閱閬闍閾閹閶鬩閿閽閻閼闡闌闃闠闊闋闔闐闒闕闞闤隊陽陰陣階際陸隴陳陘陝隉隕險隨隱隸雋難雛讎靂霧霽黴靄靚靜靨韃鞽韉韝韋韌韍韓韙韞韜韻頁頂頃頇項順須頊頑顧頓頎頒頌頏預顱領頗頸頡頰頲頜潁熲頦頤頻頮頹頷頴穎顆題顒顎顓顏額顳顢顛顙顥纇顫顬顰顴風颺颭颮颯颶颸颼颻飀飄飆飆飛饗饜飣饑飥餳飩餼飪飫飭飯飲餞飾飽飼飿飴餌饒餉餄餎餃餏餅餑餖餓餘餒餕餜餛餡館餷饋餶餿饞饁饃餺餾饈饉饅饊饌饢馬馭馱馴馳驅馹駁驢駔駛駟駙駒騶駐駝駑駕驛駘驍罵駰驕驊駱駭駢驫驪騁驗騂駸駿騏騎騍騅騌驌驂騙騭騤騷騖驁騮騫騸驃騾驄驏驟驥驦驤髏髖髕鬢魘魎魚魛魢魷魨魯魴魺鮁鮃鯰鱸鮋鮓鮒鮊鮑鱟鮍鮐鮭鮚鮳鮪鮞鮦鰂鮜鱠鱭鮫鮮鮺鯗鱘鯁鱺鰱鰹鯉鰣鰷鯀鯊鯇鮶鯽鯒鯖鯪鯕鯫鯡鯤鯧鯝鯢鯰鯛鯨鯵鯴鯔鱝鰈鰏鱨鯷鰮鰃鰓鱷鰍鰒鰉鰁鱂鯿鰠鼇鰭鰨鰥鰩鰟鰜鰳鰾鱈鱉鰻鰵鱅鰼鱖鱔鱗鱒鱯鱤鱧鱣鳥鳩雞鳶鳴鳲鷗鴉鶬鴇鴆鴣鶇鸕鴨鴞鴦鴒鴟鴝鴛鴬鴕鷥鷙鴯鴰鵂鴴鵃鴿鸞鴻鵐鵓鸝鵑鵠鵝鵒鷳鵜鵡鵲鶓鵪鶤鵯鵬鵮鶉鶊鵷鷫鶘鶡鶚鶻鶿鶥鶩鷊鷂鶲鶹鶺鷁鶼鶴鷖鸚鷓鷚鷯鷦鷲鷸鷺鸇鷹鸌鸏鸛鸘鹺麥麩黃黌黶黷黲黽\"; if (!currentEncoding) &#123;//如果当前是 繁体切换为简体，进行交换。 j = s; s = t; t = j; &#125; for (let i = 0; i &lt; text.length; i++) &#123; j = s.indexOf(text[i]); result += j === -1 ? text[i] : t[j]; &#125; return result;&#125; 保存与切换状态保存状态&nbsp;&nbsp;&nbsp;&nbsp;相信学习过 HTML5 的同学都对localStorage有一点的了解吧，我们就利用它来进行当前状态的保存。当用户进入网站时，读取曾经保存的状态，而每当状态的切换，我们都要刷新当前存储的值。另外，值得注意得是，localStorage中存储的是字符串类型的值，必须对其进行转换，才能使用，如下所示：if (localStorage.getItem(\"targetEncoding\") === \"false\") &#123; /* doSomething... */&#125; 切换状态&nbsp;&nbsp;&nbsp;&nbsp;目前我们的需求是简繁字体切换，充其量就是两种状态的保存，用 布尔类型 一定是没错的。let currentEncoding = targetEncoding = true; &nbsp;&nbsp;&nbsp;&nbsp;我们定义了两个变量，当 currentEncoding的值为 true 时，说明 当前字体为简体，反之为繁体。而targetEncoding永远指向 currentEncoding下一个要切换的状态。&nbsp;&nbsp;&nbsp;&nbsp;当切换状态时， 逻辑如下：currentEncoding = targetEncoding;targetEncoding = !targetEncoding; &nbsp;&nbsp;&nbsp;&nbsp;Ok ，大体过程就搞定了，下面是源码~ 源代码点击显/隐源文件 &lt;a href=\"javascript:translatePage();\"&gt;简繁切换&lt;/a&gt;let currentEncoding = targetEncoding = true;let stopDOM = [\"BR\",\"TIME\",\"IMG\",\"CANVAS\",\"SCRIPT\"];if (localStorage.getItem(\"targetEncoding\") === \"false\") &#123; targetEncoding = false; translateBody();&#125;function translateBody(obj) &#123; let objs = (obj ? obj : document.body).childNodes; for (let i = 0; i &lt; objs.length; i++) &#123; if (objs[i].nodeType === 3 &amp;&amp; /[\\u4e00-\\u9fa5]/g.test(objs[i].textContent)) &#123; objs[i].textContent = Exchange(objs[i].textContent); &#125; else if (objs[i].nodeType === 1 &amp;&amp; !stopDOM.includes(objs[i].tagName)) &#123; translateBody(objs[i]); &#125; &#125;&#125;function Exchange(text) &#123; let result = '', j, s = \"万与丑专业丛东丝丢两严丧个丬丰临为丽举么义乌乐乔习乡书买乱争于亏云亘亚产亩亲亵亸亿仅从仑仓仪们价众优伙会伛伞伟传伤伥伦伧伪伫体余佣佥侠侣侥侦侧侨侩侪侬俣俦俨俩俪俭债倾偬偻偾偿傥傧储傩儿兑兖党兰关兴兹养兽冁内冈册写军农冢冯冲决况冻净凄凉凌减凑凛几凤凫凭凯击凼凿刍划刘则刚创删别刬刭刽刿剀剂剐剑剥剧劝办务劢动励劲劳势勋勐勚匀匦匮区医华协单卖卢卤卧卫却卺厂厅历厉压厌厍厕厢厣厦厨厩厮县参叆叇双发变叙叠叶号叹叽吁后吓吕吗吣吨听启吴呒呓呕呖呗员呙呛呜咏咔咙咛咝咤咴咸哌响哑哒哓哔哕哗哙哜哝哟唛唝唠唡唢唣唤唿啧啬啭啮啰啴啸喷喽喾嗫呵嗳嘘嘤嘱噜噼嚣嚯团园囱围囵国图圆圣圹场坂坏块坚坛坜坝坞坟坠垄垅垆垒垦垧垩垫垭垯垱垲垴埘埙埚埝埯堑堕塆墙壮声壳壶壸处备复够头夸夹夺奁奂奋奖奥妆妇妈妩妪妫姗姜娄娅娆娇娈娱娲娴婳婴婵婶媪嫒嫔嫱嬷孙学孪宁宝实宠审宪宫宽宾寝对寻导寿将尔尘尧尴尸尽层屃屉届属屡屦屿岁岂岖岗岘岙岚岛岭岳岽岿峃峄峡峣峤峥峦崂崃崄崭嵘嵚嵛嵝嵴巅巩巯币帅师帏帐帘帜带帧帮帱帻帼幂幞干并广庄庆庐庑库应庙庞废庼廪开异弃张弥弪弯弹强归当录彟彦彻径徕御忆忏忧忾怀态怂怃怄怅怆怜总怼怿恋恳恶恸恹恺恻恼恽悦悫悬悭悯惊惧惨惩惫惬惭惮惯愍愠愤愦愿慑慭憷懑懒懔戆戋戏戗战戬户扎扑扦执扩扪扫扬扰抚抛抟抠抡抢护报担拟拢拣拥拦拧拨择挂挚挛挜挝挞挟挠挡挢挣挤挥挦捞损捡换捣据捻掳掴掷掸掺掼揸揽揿搀搁搂搅携摄摅摆摇摈摊撄撑撵撷撸撺擞攒敌敛数斋斓斗斩断无旧时旷旸昙昼昽显晋晒晓晔晕晖暂暧札术朴机杀杂权条来杨杩杰极构枞枢枣枥枧枨枪枫枭柜柠柽栀栅标栈栉栊栋栌栎栏树栖样栾桊桠桡桢档桤桥桦桧桨桩梦梼梾检棂椁椟椠椤椭楼榄榇榈榉槚槛槟槠横樯樱橥橱橹橼檐檩欢欤欧歼殁殇残殒殓殚殡殴毁毂毕毙毡毵氇气氢氩氲汇汉污汤汹沓沟没沣沤沥沦沧沨沩沪沵泞泪泶泷泸泺泻泼泽泾洁洒洼浃浅浆浇浈浉浊测浍济浏浐浑浒浓浔浕涂涌涛涝涞涟涠涡涢涣涤润涧涨涩淀渊渌渍渎渐渑渔渖渗温游湾湿溃溅溆溇滗滚滞滟滠满滢滤滥滦滨滩滪漤潆潇潋潍潜潴澜濑濒灏灭灯灵灾灿炀炉炖炜炝点炼炽烁烂烃烛烟烦烧烨烩烫烬热焕焖焘煅煳熘爱爷牍牦牵牺犊犟状犷犸犹狈狍狝狞独狭狮狯狰狱狲猃猎猕猡猪猫猬献獭玑玙玚玛玮环现玱玺珉珏珐珑珰珲琎琏琐琼瑶瑷璇璎瓒瓮瓯电画畅畲畴疖疗疟疠疡疬疮疯疱疴痈痉痒痖痨痪痫痴瘅瘆瘗瘘瘪瘫瘾瘿癞癣癫癯皑皱皲盏盐监盖盗盘眍眦眬着睁睐睑瞒瞩矫矶矾矿砀码砖砗砚砜砺砻砾础硁硅硕硖硗硙硚确硷碍碛碜碱碹磙礼祎祢祯祷祸禀禄禅离秃秆种积称秽秾稆税稣稳穑穷窃窍窑窜窝窥窦窭竖竞笃笋笔笕笺笼笾筑筚筛筜筝筹签简箓箦箧箨箩箪箫篑篓篮篱簖籁籴类籼粜粝粤粪粮糁糇紧絷纟纠纡红纣纤纥约级纨纩纪纫纬纭纮纯纰纱纲纳纴纵纶纷纸纹纺纻纼纽纾线绀绁绂练组绅细织终绉绊绋绌绍绎经绐绑绒结绔绕绖绗绘给绚绛络绝绞统绠绡绢绣绤绥绦继绨绩绪绫绬续绮绯绰绱绲绳维绵绶绷绸绹绺绻综绽绾绿缀缁缂缃缄缅缆缇缈缉缊缋缌缍缎缏缐缑缒缓缔缕编缗缘缙缚缛缜缝缞缟缠缡缢缣缤缥缦缧缨缩缪缫缬缭缮缯缰缱缲缳缴缵罂网罗罚罢罴羁羟羡翘翙翚耢耧耸耻聂聋职聍联聩聪肃肠肤肷肾肿胀胁胆胜胧胨胪胫胶脉脍脏脐脑脓脔脚脱脶脸腊腌腘腭腻腼腽腾膑臜舆舣舰舱舻艰艳艹艺节芈芗芜芦苁苇苈苋苌苍苎苏苘苹茎茏茑茔茕茧荆荐荙荚荛荜荞荟荠荡荣荤荥荦荧荨荩荪荫荬荭荮药莅莜莱莲莳莴莶获莸莹莺莼萚萝萤营萦萧萨葱蒇蒉蒋蒌蓝蓟蓠蓣蓥蓦蔷蔹蔺蔼蕲蕴薮藁藓虏虑虚虫虬虮虽虾虿蚀蚁蚂蚕蚝蚬蛊蛎蛏蛮蛰蛱蛲蛳蛴蜕蜗蜡蝇蝈蝉蝎蝼蝾螀螨蟏衅衔补衬衮袄袅袆袜袭袯装裆裈裢裣裤裥褛褴襁襕见观觃规觅视觇览觉觊觋觌觍觎觏觐觑觞触觯詟誉誊讠计订讣认讥讦讧讨让讪讫训议讯记讱讲讳讴讵讶讷许讹论讻讼讽设访诀证诂诃评诅识诇诈诉诊诋诌词诎诏诐译诒诓诔试诖诗诘诙诚诛诜话诞诟诠诡询诣诤该详诧诨诩诪诫诬语诮误诰诱诲诳说诵诶请诸诹诺读诼诽课诿谀谁谂调谄谅谆谇谈谊谋谌谍谎谏谐谑谒谓谔谕谖谗谘谙谚谛谜谝谞谟谠谡谢谣谤谥谦谧谨谩谪谫谬谭谮谯谰谱谲谳谴谵谶谷豮贝贞负贠贡财责贤败账货质贩贪贫贬购贮贯贰贱贲贳贴贵贶贷贸费贺贻贼贽贾贿赀赁赂赃资赅赆赇赈赉赊赋赌赍赎赏赐赑赒赓赔赕赖赗赘赙赚赛赜赝赞赟赠赡赢赣赪赵赶趋趱趸跃跄跖跞践跶跷跸跹跻踊踌踪踬踯蹑蹒蹰蹿躏躜躯车轧轨轩轪轫转轭轮软轰轱轲轳轴轵轶轷轸轹轺轻轼载轾轿辀辁辂较辄辅辆辇辈辉辊辋辌辍辎辏辐辑辒输辔辕辖辗辘辙辚辞辩辫边辽达迁过迈运还这进远违连迟迩迳迹适选逊递逦逻遗遥邓邝邬邮邹邺邻郁郄郏郐郑郓郦郧郸酝酦酱酽酾酿释里鉅鉴銮錾钆钇针钉钊钋钌钍钎钏钐钑钒钓钔钕钖钗钘钙钚钛钝钞钟钠钡钢钣钤钥钦钧钨钩钪钫钬钭钮钯钰钱钲钳钴钵钶钷钸钹钺钻钼钽钾钿铀铁铂铃铄铅铆铈铉铊铋铍铎铏铐铑铒铕铗铘铙铚铛铜铝铞铟铠铡铢铣铤铥铦铧铨铪铫铬铭铮铯铰铱铲铳铴铵银铷铸铹铺铻铼铽链铿销锁锂锃锄锅锆锇锈锉锊锋锌锍锎锏锐锑锒锓锔锕锖锗错锚锜锞锟锠锡锢锣锤锥锦锨锩锫锬锭键锯锰锱锲锳锴锵锶锷锸锹锺锻锼锽锾锿镀镁镂镃镆镇镈镉镊镌镍镎镏镐镑镒镕镖镗镙镚镛镜镝镞镟镠镡镢镣镤镥镦镧镨镩镪镫镬镭镮镯镰镱镲镳镴镶长门闩闪闫闬闭问闯闰闱闲闳间闵闶闷闸闹闺闻闼闽闾闿阀阁阂阃阄阅阆阇阈阉阊阋阌阍阎阏阐阑阒阓阔阕阖阗阘阙阚阛队阳阴阵阶际陆陇陈陉陕陧陨险随隐隶隽难雏雠雳雾霁霉霭靓静靥鞑鞒鞯鞴韦韧韨韩韪韫韬韵页顶顷顸项顺须顼顽顾顿颀颁颂颃预颅领颇颈颉颊颋颌颍颎颏颐频颒颓颔颕颖颗题颙颚颛颜额颞颟颠颡颢颣颤颥颦颧风飏飐飑飒飓飔飕飖飗飘飙飚飞飨餍饤饥饦饧饨饩饪饫饬饭饮饯饰饱饲饳饴饵饶饷饸饹饺饻饼饽饾饿馀馁馂馃馄馅馆馇馈馉馊馋馌馍馎馏馐馑馒馓馔馕马驭驮驯驰驱驲驳驴驵驶驷驸驹驺驻驼驽驾驿骀骁骂骃骄骅骆骇骈骉骊骋验骍骎骏骐骑骒骓骔骕骖骗骘骙骚骛骜骝骞骟骠骡骢骣骤骥骦骧髅髋髌鬓魇魉鱼鱽鱾鱿鲀鲁鲂鲄鲅鲆鲇鲈鲉鲊鲋鲌鲍鲎鲏鲐鲑鲒鲓鲔鲕鲖鲗鲘鲙鲚鲛鲜鲝鲞鲟鲠鲡鲢鲣鲤鲥鲦鲧鲨鲩鲪鲫鲬鲭鲮鲯鲰鲱鲲鲳鲴鲵鲶鲷鲸鲹鲺鲻鲼鲽鲾鲿鳀鳁鳂鳃鳄鳅鳆鳇鳈鳉鳊鳋鳌鳍鳎鳏鳐鳑鳒鳓鳔鳕鳖鳗鳘鳙鳛鳜鳝鳞鳟鳠鳡鳢鳣鸟鸠鸡鸢鸣鸤鸥鸦鸧鸨鸩鸪鸫鸬鸭鸮鸯鸰鸱鸲鸳鸴鸵鸶鸷鸸鸹鸺鸻鸼鸽鸾鸿鹀鹁鹂鹃鹄鹅鹆鹇鹈鹉鹊鹋鹌鹍鹎鹏鹐鹑鹒鹓鹔鹕鹖鹗鹘鹚鹛鹜鹝鹞鹟鹠鹡鹢鹣鹤鹥鹦鹧鹨鹩鹪鹫鹬鹭鹯鹰鹱鹲鹳鹴鹾麦麸黄黉黡黩黪黾\", t = \"萬與醜專業叢東絲丟兩嚴喪個爿豐臨為麗舉麼義烏樂喬習鄉書買亂爭於虧雲亙亞產畝親褻嚲億僅從侖倉儀們價眾優夥會傴傘偉傳傷倀倫傖偽佇體餘傭僉俠侶僥偵側僑儈儕儂俁儔儼倆儷儉債傾傯僂僨償儻儐儲儺兒兌兗黨蘭關興茲養獸囅內岡冊寫軍農塚馮衝決況凍淨淒涼淩減湊凜幾鳳鳧憑凱擊氹鑿芻劃劉則剛創刪別剗剄劊劌剴劑剮劍剝劇勸辦務勱動勵勁勞勢勳猛勩勻匭匱區醫華協單賣盧鹵臥衛卻巹廠廳曆厲壓厭厙廁廂厴廈廚廄廝縣參靉靆雙發變敘疊葉號歎嘰籲後嚇呂嗎唚噸聽啟吳嘸囈嘔嚦唄員咼嗆嗚詠哢嚨嚀噝吒噅鹹呱響啞噠嘵嗶噦嘩噲嚌噥喲嘜嗊嘮啢嗩唕喚呼嘖嗇囀齧囉嘽嘯噴嘍嚳囁嗬噯噓嚶囑嚕劈囂謔團園囪圍圇國圖圓聖壙場阪壞塊堅壇壢壩塢墳墜壟壟壚壘墾坰堊墊埡墶壋塏堖塒塤堝墊垵塹墮壪牆壯聲殼壺壼處備複夠頭誇夾奪奩奐奮獎奧妝婦媽嫵嫗媯姍薑婁婭嬈嬌孌娛媧嫻嫿嬰嬋嬸媼嬡嬪嬙嬤孫學孿寧寶實寵審憲宮寬賓寢對尋導壽將爾塵堯尷屍盡層屭屜屆屬屢屨嶼歲豈嶇崗峴嶴嵐島嶺嶽崠巋嶨嶧峽嶢嶠崢巒嶗崍嶮嶄嶸嶔崳嶁脊巔鞏巰幣帥師幃帳簾幟帶幀幫幬幘幗冪襆幹並廣莊慶廬廡庫應廟龐廢廎廩開異棄張彌弳彎彈強歸當錄彠彥徹徑徠禦憶懺憂愾懷態慫憮慪悵愴憐總懟懌戀懇惡慟懨愷惻惱惲悅愨懸慳憫驚懼慘懲憊愜慚憚慣湣慍憤憒願懾憖怵懣懶懍戇戔戲戧戰戩戶紮撲扡執擴捫掃揚擾撫拋摶摳掄搶護報擔擬攏揀擁攔擰撥擇掛摯攣掗撾撻挾撓擋撟掙擠揮撏撈損撿換搗據撚擄摑擲撣摻摜摣攬撳攙擱摟攪攜攝攄擺搖擯攤攖撐攆擷擼攛擻攢敵斂數齋斕鬥斬斷無舊時曠暘曇晝曨顯晉曬曉曄暈暉暫曖劄術樸機殺雜權條來楊榪傑極構樅樞棗櫪梘棖槍楓梟櫃檸檉梔柵標棧櫛櫳棟櫨櫟欄樹棲樣欒棬椏橈楨檔榿橋樺檜槳樁夢檮棶檢欞槨櫝槧欏橢樓欖櫬櫚櫸檟檻檳櫧橫檣櫻櫫櫥櫓櫞簷檁歡歟歐殲歿殤殘殞殮殫殯毆毀轂畢斃氈毿氌氣氫氬氳彙漢汙湯洶遝溝沒灃漚瀝淪滄渢溈滬濔濘淚澩瀧瀘濼瀉潑澤涇潔灑窪浹淺漿澆湞溮濁測澮濟瀏滻渾滸濃潯濜塗湧濤澇淶漣潿渦溳渙滌潤澗漲澀澱淵淥漬瀆漸澠漁瀋滲溫遊灣濕潰濺漵漊潷滾滯灩灄滿瀅濾濫灤濱灘澦濫瀠瀟瀲濰潛瀦瀾瀨瀕灝滅燈靈災燦煬爐燉煒熗點煉熾爍爛烴燭煙煩燒燁燴燙燼熱煥燜燾煆糊溜愛爺牘犛牽犧犢強狀獷獁猶狽麅獮獰獨狹獅獪猙獄猻獫獵獼玀豬貓蝟獻獺璣璵瑒瑪瑋環現瑲璽瑉玨琺瓏璫琿璡璉瑣瓊瑤璦璿瓔瓚甕甌電畫暢佘疇癤療瘧癘瘍鬁瘡瘋皰屙癰痙癢瘂癆瘓癇癡癉瘮瘞瘺癟癱癮癭癩癬癲臒皚皺皸盞鹽監蓋盜盤瞘眥矓著睜睞瞼瞞矚矯磯礬礦碭碼磚硨硯碸礪礱礫礎硜矽碩硤磽磑礄確鹼礙磧磣堿镟滾禮禕禰禎禱禍稟祿禪離禿稈種積稱穢穠穭稅穌穩穡窮竊竅窯竄窩窺竇窶豎競篤筍筆筧箋籠籩築篳篩簹箏籌簽簡籙簀篋籜籮簞簫簣簍籃籬籪籟糴類秈糶糲粵糞糧糝餱緊縶糸糾紆紅紂纖紇約級紈纊紀紉緯紜紘純紕紗綱納紝縱綸紛紙紋紡紵紖紐紓線紺絏紱練組紳細織終縐絆紼絀紹繹經紿綁絨結絝繞絰絎繪給絢絳絡絕絞統綆綃絹繡綌綏絛繼綈績緒綾緓續綺緋綽緔緄繩維綿綬繃綢綯綹綣綜綻綰綠綴緇緙緗緘緬纜緹緲緝縕繢緦綞緞緶線緱縋緩締縷編緡緣縉縛縟縝縫縗縞纏縭縊縑繽縹縵縲纓縮繆繅纈繚繕繒韁繾繰繯繳纘罌網羅罰罷羆羈羥羨翹翽翬耮耬聳恥聶聾職聹聯聵聰肅腸膚膁腎腫脹脅膽勝朧腖臚脛膠脈膾髒臍腦膿臠腳脫腡臉臘醃膕齶膩靦膃騰臏臢輿艤艦艙艫艱豔艸藝節羋薌蕪蘆蓯葦藶莧萇蒼苧蘇檾蘋莖蘢蔦塋煢繭荊薦薘莢蕘蓽蕎薈薺蕩榮葷滎犖熒蕁藎蓀蔭蕒葒葤藥蒞蓧萊蓮蒔萵薟獲蕕瑩鶯蓴蘀蘿螢營縈蕭薩蔥蕆蕢蔣蔞藍薊蘺蕷鎣驀薔蘞藺藹蘄蘊藪槁蘚虜慮虛蟲虯蟣雖蝦蠆蝕蟻螞蠶蠔蜆蠱蠣蟶蠻蟄蛺蟯螄蠐蛻蝸蠟蠅蟈蟬蠍螻蠑螿蟎蠨釁銜補襯袞襖嫋褘襪襲襏裝襠褌褳襝褲襇褸襤繈襴見觀覎規覓視覘覽覺覬覡覿覥覦覯覲覷觴觸觶讋譽謄訁計訂訃認譏訐訌討讓訕訖訓議訊記訒講諱謳詎訝訥許訛論訩訟諷設訪訣證詁訶評詛識詗詐訴診詆謅詞詘詔詖譯詒誆誄試詿詩詰詼誠誅詵話誕詬詮詭詢詣諍該詳詫諢詡譸誡誣語誚誤誥誘誨誑說誦誒請諸諏諾讀諑誹課諉諛誰諗調諂諒諄誶談誼謀諶諜謊諫諧謔謁謂諤諭諼讒諮諳諺諦謎諞諝謨讜謖謝謠謗諡謙謐謹謾謫譾謬譚譖譙讕譜譎讞譴譫讖穀豶貝貞負貟貢財責賢敗賬貨質販貪貧貶購貯貫貳賤賁貰貼貴貺貸貿費賀貽賊贄賈賄貲賃賂贓資賅贐賕賑賚賒賦賭齎贖賞賜贔賙賡賠賧賴賵贅賻賺賽賾贗讚贇贈贍贏贛赬趙趕趨趲躉躍蹌蹠躒踐躂蹺蹕躚躋踴躊蹤躓躑躡蹣躕躥躪躦軀車軋軌軒軑軔轉軛輪軟轟軲軻轤軸軹軼軤軫轢軺輕軾載輊轎輈輇輅較輒輔輛輦輩輝輥輞輬輟輜輳輻輯轀輸轡轅轄輾轆轍轔辭辯辮邊遼達遷過邁運還這進遠違連遲邇逕跡適選遜遞邐邏遺遙鄧鄺鄔郵鄒鄴鄰鬱郤郟鄶鄭鄆酈鄖鄲醞醱醬釅釃釀釋裏钜鑒鑾鏨釓釔針釘釗釙釕釷釺釧釤鈒釩釣鍆釹鍚釵鈃鈣鈈鈦鈍鈔鍾鈉鋇鋼鈑鈐鑰欽鈞鎢鉤鈧鈁鈥鈄鈕鈀鈺錢鉦鉗鈷缽鈳鉕鈽鈸鉞鑽鉬鉭鉀鈿鈾鐵鉑鈴鑠鉛鉚鈰鉉鉈鉍鈹鐸鉶銬銠鉺銪鋏鋣鐃銍鐺銅鋁銱銦鎧鍘銖銑鋌銩銛鏵銓鉿銚鉻銘錚銫鉸銥鏟銃鐋銨銀銣鑄鐒鋪鋙錸鋱鏈鏗銷鎖鋰鋥鋤鍋鋯鋨鏽銼鋝鋒鋅鋶鐦鐧銳銻鋃鋟鋦錒錆鍺錯錨錡錁錕錩錫錮鑼錘錐錦鍁錈錇錟錠鍵鋸錳錙鍥鍈鍇鏘鍶鍔鍤鍬鍾鍛鎪鍠鍰鎄鍍鎂鏤鎡鏌鎮鎛鎘鑷鐫鎳鎿鎦鎬鎊鎰鎔鏢鏜鏍鏰鏞鏡鏑鏃鏇鏐鐔钁鐐鏷鑥鐓鑭鐠鑹鏹鐙鑊鐳鐶鐲鐮鐿鑔鑣鑞鑲長門閂閃閆閈閉問闖閏闈閑閎間閔閌悶閘鬧閨聞闥閩閭闓閥閣閡閫鬮閱閬闍閾閹閶鬩閿閽閻閼闡闌闃闠闊闋闔闐闒闕闞闤隊陽陰陣階際陸隴陳陘陝隉隕險隨隱隸雋難雛讎靂霧霽黴靄靚靜靨韃鞽韉韝韋韌韍韓韙韞韜韻頁頂頃頇項順須頊頑顧頓頎頒頌頏預顱領頗頸頡頰頲頜潁熲頦頤頻頮頹頷頴穎顆題顒顎顓顏額顳顢顛顙顥纇顫顬顰顴風颺颭颮颯颶颸颼颻飀飄飆飆飛饗饜飣饑飥餳飩餼飪飫飭飯飲餞飾飽飼飿飴餌饒餉餄餎餃餏餅餑餖餓餘餒餕餜餛餡館餷饋餶餿饞饁饃餺餾饈饉饅饊饌饢馬馭馱馴馳驅馹駁驢駔駛駟駙駒騶駐駝駑駕驛駘驍罵駰驕驊駱駭駢驫驪騁驗騂駸駿騏騎騍騅騌驌驂騙騭騤騷騖驁騮騫騸驃騾驄驏驟驥驦驤髏髖髕鬢魘魎魚魛魢魷魨魯魴魺鮁鮃鯰鱸鮋鮓鮒鮊鮑鱟鮍鮐鮭鮚鮳鮪鮞鮦鰂鮜鱠鱭鮫鮮鮺鯗鱘鯁鱺鰱鰹鯉鰣鰷鯀鯊鯇鮶鯽鯒鯖鯪鯕鯫鯡鯤鯧鯝鯢鯰鯛鯨鯵鯴鯔鱝鰈鰏鱨鯷鰮鰃鰓鱷鰍鰒鰉鰁鱂鯿鰠鼇鰭鰨鰥鰩鰟鰜鰳鰾鱈鱉鰻鰵鱅鰼鱖鱔鱗鱒鱯鱤鱧鱣鳥鳩雞鳶鳴鳲鷗鴉鶬鴇鴆鴣鶇鸕鴨鴞鴦鴒鴟鴝鴛鴬鴕鷥鷙鴯鴰鵂鴴鵃鴿鸞鴻鵐鵓鸝鵑鵠鵝鵒鷳鵜鵡鵲鶓鵪鶤鵯鵬鵮鶉鶊鵷鷫鶘鶡鶚鶻鶿鶥鶩鷊鷂鶲鶹鶺鷁鶼鶴鷖鸚鷓鷚鷯鷦鷲鷸鷺鸇鷹鸌鸏鸛鸘鹺麥麩黃黌黶黷黲黽\"; if (!currentEncoding) &#123; j = s; s = t; t = j; &#125; for (let i = 0; i &lt; text.length; i++) &#123; j = s.indexOf(text[i]); result += j === -1 ? text[i] : t[j]; &#125; return result;&#125;function translatePage() &#123; currentEncoding = targetEncoding; targetEncoding = !targetEncoding; localStorage.setItem(\"targetEncoding\", targetEncoding); translateBody();&#125; 结束语 本文会同步更新在以下地方(已链接本人主页),欢迎你在常逛的网站中关注我。 掘金 简书 博客园 CSDN segmentfault 转载本站文章请注明作者和出处 tomotoes.com，请勿用于任何商业用途。深入Web全栈各项技术，坚持原创，文章更新虽不定，但只为质量而生。建议收藏这个坏掉的番茄 tomotoes.com ，愿陪你一起在全栈的道路上努力前行！ .button {color: #666; background-color: #EEE; border-color: #EEE; text-decoration: none; text-align: center; line-height: 40px; height: 40px; padding: 0 40px; margin: 0; display: inline-block; border: none; -webkit-box-sizing: border-box; box-sizing: border-box; -webkit-transition-property: all; transition-property: all; -webkit-transition-duration: .3s; transition-duration: .3s; font-size: 18px; font-weight: bold; font-family: @font-custom; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; letter-spacing: 3px; } .button:visited {color: #666; } .button:hover, .button:focus {background-color: #f6f6f6; text-decoration: none; outline: none; } .button:active, .button.active, .button.is-active {text-shadow: 0 1px 0 rgba(255, 255, 255, 0.3); text-decoration: none; background-color: #eeeeee; border-color: #cfcfcf; color: #d4d4d4; -webkit-transition-duration: 0s; transition-duration: 0s; -webkit-box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.2); box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.2); } .button.disabled, .button.is-disabled, .button:disabled {top: 0 !important; background: #EEE !important; border: 1px solid #DDD !important; text-shadow: 0 1px 1px white !important; color: #CCC !important; -webkit-box-shadow: none !important; box-shadow: none !important; opacity: .8 !important; } .button-primary {background-color: #1B9AF7; border-color: #1B9AF7; color: #FFF; } .button-primary:visited {color: #FFF; } .button-primary:hover, .button-primary:focus {background-color: #4cb0f9; border-color: #4cb0f9; color: #FFF; } .button-primary:active, .button-primary.active, .button-primary.is-active {background-color: #2798eb; border-color: #2798eb; color: #0880d7; } .button-rounded {border-radius: 4px; } .button-border.button-primary, .button-primary.button-border-thin, .button-primary.button-border-thick, .button-border-thin.button-primary, .button-border-thick.button-primary {color: #1B9AF7; } .button-border.button-primary:hover, .button-primary.button-border-thin:hover, .button-primary.button-border-thick:hover, .button-border.button-primary:focus, .button-primary.button-border-thin:focus, .button-primary.button-border-thick:focus, .button-border-thin.button-primary:hover, .button-border-thin.button-primary:focus, .button-border-thick.button-primary:hover, .button-border-thick.button-primary:focus {background-color: rgba(76, 176, 249, 0.9); color: rgba(255, 255, 255, 0.9); } .button-border.button-primary:active, .button-primary.button-border-thin:active, .button-primary.button-border-thick:active, .button-border.button-primary.active, .button-primary.active.button-border-thin, .button-primary.active.button-border-thick, .button-border.button-primary.is-active, .button-primary.is-active.button-border-thin, .button-primary.is-active.button-border-thick, .button-border-thin.button-primary:active, .button-border-thin.button-primary.active, .button-border-thin.button-primary.is-active, .button-border-thick.button-primary:active, .button-border-thick.button-primary.active, .button-border-thick.button-primary.is-active {background-color: rgba(39, 152, 235, 0.7); color: rgba(255, 255, 255, 0.5); opacity: .3; } .button-3d {position: relative; top: 0; -webkit-box-shadow: 0 7px 0 #bbbbbb, 0 8px 3px rgba(0, 0, 0, 0.2); box-shadow: 0 7px 0 #bbbbbb, 0 8px 3px rgba(0, 0, 0, 0.2); } .button-3d:hover, .button-3d:focus {-webkit-box-shadow: 0 7px 0 #bbbbbb, 0 8px 3px rgba(0, 0, 0, 0.2); box-shadow: 0 7px 0 #bbbbbb, 0 8px 3px rgba(0, 0, 0, 0.2); } .button-3d:active, .button-3d.active, .button-3d.is-active {top: 5px; -webkit-transition-property: all; transition-property: all; -webkit-transition-duration: .15s; transition-duration: .15s; -webkit-box-shadow: 0 2px 0 #bbbbbb, 0 3px 3px rgba(0, 0, 0, 0.2); box-shadow: 0 2px 0 #bbbbbb, 0 3px 3px rgba(0, 0, 0, 0.2); } .button-3d.button-primary {-webkit-box-shadow: 0 7px 0 #0880d7, 0 8px 3px rgba(0, 0, 0, 0.3); box-shadow: 0 7px 0 #0880d7, 0 8px 3px rgba(0, 0, 0, 0.3); } .button-3d.button-primary:hover, .button-3d.button-primary:focus {-webkit-box-shadow: 0 7px 0 #077ace, 0 8px 3px rgba(0, 0, 0, 0.3); box-shadow: 0 7px 0 #077ace, 0 8px 3px rgba(0, 0, 0, 0.3); } .button-3d.button-primary:active, .button-3d.button-primary.active, .button-3d.button-primary.is-active {-webkit-box-shadow: 0 2px 0 #0662a6, 0 3px 3px rgba(0, 0, 0, 0.2); box-shadow: 0 2px 0 #0662a6, 0 3px 3px rgba(0, 0, 0, 0.2); } codeHide.addEventListener(\"click\",function(){$(\"#sourceCode\").slideToggle(\"slow\")});","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://tomotoes.com/blog/tags/Hexo/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://tomotoes.com/blog/tags/JavaScript/"}]},{"title":"神奇的位运算","date":"2018-01-25T08:32:02.000Z","path":"/posts/11eece28/","text":"位运算在计算机领域的作用可谓举足轻重。 前言&nbsp;&nbsp;&nbsp;&nbsp;首先，我们要了解一个概念：程序中的所有数在计算机内存中都是以二进制的形式储存的。而位运算，就是直接对在内存中的二进制位进行操作，跳过了 程序转义成二进制的这一步骤，对编译时间有所提高，但带来的缺点也很明显，程序的可读性变低了。&nbsp;&nbsp;&nbsp;&nbsp;掌握位运算 是一位程序员的基本素养，位运算在计算机领域的作用可谓举足轻重。&nbsp;&nbsp;&nbsp;&nbsp;下面我将讲解 位运算的大体方法以及一些基本的应用。 正文and 运算 只有对应的两个 二进制数，均为1，结果才为 1，否则为 0 &amp; 1判断 n的第m位数。 介绍两个重要应用，来证明其含义： (n &gt;&gt;m ) &amp; 1判断 整数n 的二进制 第m位 是否 为1 或者 为0n 的第m位数，如果为1 ，1&amp;1 就返回1 ，如果为0，0&amp;1 就返回0 判断 奇偶性如果n 为奇数，辗转相除2，最后的余数 必定为1，如果n 为偶数，辗转相除 余数必定为 0也就是说，n为奇数，n&amp;1 等价于 1&amp;1 ，返回1，n为偶数，n&amp;1 等价于 0&amp;1，返回 0 &amp; 0将 n的第m位数，重置为0基本应用：n &amp; ~(1 &lt;&lt; m) 1 &lt;&lt; m定位到 n的第m位数 ~(1 &lt;&lt; m)将1进行非运算，变为 0，其他剩下的m位，变成 1，而 &amp;1，是无实际作用的 n &amp; 0 ：&amp; 按位与运算只有对应的两个数 全部为1时，结果才为1，而&amp;0，返回值一定为 0 or运算 只有对应的两个 二进制数，均为0，结果才为 0，否则为 1 | 1将 n的第m位数，重置为1 基本应用：n | (1 &lt;&lt; m): 1 &lt;&lt; m定位到 n 的第m位数 n | 1n的第m位数 进行 |1 操作 其返回值必定为 1！因为|只有，两个数都为 0时，结果才为 0 | 0无实际作用 一定要清楚， 是 n的第m位数 在进行操作，其他 位数操作，根本无 影响 因为，其他位数，是 在进行 “| 0” 操作，而所谓的 |0 操作，与 &amp;1 操作，毫无差别。 假设 k=n的第m位数，k = 1 ，k|0 = 1|0 = 1，k = 0，k|0 = 0|0 = 0，所谓 无实际作用。 但是要注意一点，我说的 0 是在二进制数中的0，有实际含义的 0，不是补 0的0 所以，可以感性的认识到，| 0 与 &amp; 1 以及 下文的 ^ 0，都是无实际作用的 xor运算 只有对应的两个 二进制数相等时，结果才为 0，否则为 1 ^ 1将 n的第m位数，取反 基本应用：n ^ (1 &lt;&lt; m) 1 &lt;&lt; m ： 定位到 n的第m位数 n ^ 1，我们要知道，^ (异或）：不相等为 1，相等为 0 而 ^1：如果 n的第m位数 为1，1^1 返回值为 0，如果 n的第m位数 为0，0^1 返回值 为1 所以，^1 的重要作用，就是 与之相反的作用 ^ 0无实际作用 假定 整数k 为0，k^0 = 0^0 = 0 ; 假定整数k 为1，k^0 = 1^0 = 1 所以说，无论怎么变化，^0 都是无实际作用的 shl &amp; shr 运算 左移运算符 “&lt;&lt;”表达式：a &lt;&lt; ba&lt;&lt;b 的值是：将a各二进位全部左移b位后得到的值。左移时，高位丢弃，低位补0。实际上，左移1位，就等于是乘以2，左移n位，就等于是乘以2n。而左移操作比乘法操作快得多。 例如:9 &lt;&lt; 49的二进制形式：0000 0000 0000 0000 0000 0000 0000 1001因此，表达式“9&lt;&lt;4”的值，就是将上面的二进制数左移4位，得：0000 0000 0000 0000 0000 0000 1001 0000即为十进制的144 , 而 9*2的4次幂 = 9*16 = 144. 右移运算符 “&gt;&gt;” 表达式：a &gt;&gt; b a&gt;&gt;b的值是：将a各二进位全部右移b位后得到的值。右移时，移出最右边的位就被丢弃。 对于有符号数，如long,int,short,char类型变量，在右移时，符号位（即最高位）将一起移动，并且大多数C/C++编译器规定，如果原符号位为1，则右移时高位就补充1，原符号位为0，则右移时高位就补充0。 实际上，右移n位，就相当于左操作数除以2n，并且将结果往小里取整。例如：-25 &gt;&gt; 4 = -2 -2 &gt;&gt; 4 = -1 18 &gt;&gt; 4 = 1 应用对2的整数幂进行模运算#include &lt;stdio.h&gt;int main()&#123; int n,k; while(~scanf(\"%d %d\",&amp;n,&amp;k))&#123; n&lt;&lt;=k;//相当于 n 乘以 2的 k次幂，并将结果赋给n n&gt;&gt;=k;//相当于 n除以 2的 k次幂，并将结果赋给n printf(\"%d\\n\",n); &#125; return 0; &#125; 两数交换#include &lt;stdio.h&gt; int main()&#123; int n,m; while(~scanf(\"%d %d\",&amp;n,&amp;m))&#123; n^=m; m^=n; n^=m; printf(\"%d %d\\n\",n,m); &#125; return 0;&#125; 按位异或 ^ : 不相同 为：1 ; 相同 为 ：0将参与运算的两操作数各对应的二进制位进行异或操作，即只有对应的两个二进位不相同时，结果的对应二进制位才是1，否则为0。 异或运算的特点是：如果 a^b=c，那么就有 c^b = a以及c^a=b 例如：表达式“21 ^ 18 ”的值是7(即二进制数111)。21： 1010118： 1001021^18: 00111假设 n = 5，m = 6 5的二进制为：1016的二进制为：110 n^=m = 5^=6 = 101 ^ 110 = 011 ,此时 n的二进制为：011 m^=n = 6^=011 = 110 ^ 011 = 101 ,此时 m的二进制为：101，也正是 5的二进制数，也就是说 m ==开始的n n^=m = 011^=5 = 011 ^ 101 = 110 ,此时 n的二进制位：110，也正是 6的二进制数，也就是说 n ==开始的m 层次结构：A-&gt;B B-&gt;A A-&gt;B 正 反 正 判断2的正整数幂#include &lt;stdio.h&gt;int main()&#123; int n; while(~scanf(\"%d\",&amp;n))&#123; if(!(n &amp; (n-1)) &amp;&amp; n) printf(\"%d为2的正整数幂\\n\",n); else printf(\"%d不是2的正整数幂\\n\",n); &#125; return 0;&#125; 给定整数 n 判断 n是否为 2的正整数幂表达式：(! (n &amp; (n-1)) &amp;&amp; n 举个例子： n = 16 = 10000，n-1 = 15 = 1111那么 ：10000 &amp; 01111 = 00000 = 0 再举个例子： n = 256 = 10000000 ,n-1 = 255 = 11111111那么：100000000 &amp; 011111111 = 000000000 = 0 是的，如果一个数 n 是2 的正整数幂，那么n 的二进制必定为 1000…. n-1的二进制必定为 1111….即： n &amp; n-1 = 0 所以 (! (n &amp; (n-1)) 为 1 ; &amp;&amp; n ：判断 n为正数 判断奇偶性#include &lt;stdio.h&gt;int main()&#123; int n; while(~scanf(\"%d\",&amp;n))&#123; if(n&amp;1) printf(\"%d是奇数\\n\",n); else printf(\"%d是偶数\\n\",n); &#125; return 0; &#125; 记住：在做位运算时，位数不够的数，自动在 前面补 0比如：21 &amp; 1 ：10101 &amp; 00001 = 00001 = 1 16 &amp; 1 ：10000 &amp; 00001 = 00000 = 0事实证明：偶数的二进制的末尾 为0，奇数的二进制的末尾 为1 十进制m 转换 n进制方法： m 一直除 n，每相除一次，m就等于商，直到商为0，然后余数反排 即可。 1的二进制：1/2 =0 余1余数反排 即是 1的二进制：1 6的二进制：6/2 =3 余0 3/2 =1 余1 1/2 =0 余1 余数反排 即是 6的二进制：11015的二进制：15/2=7 余1 7/2=3 余1 3/2=1 余1 1/2=0 余1余数反排 即是 15的二进制：1111 5的二进制：5/2 =2 余1 2/2 =1 余0 1/2 =0 余1余数反排 即是 5的二进制：10121的二进制：21/2 =10 余1 10/2 =5 余0 5/2 =2 余1 2/2 =1 余0 1/2 =0 余1余数反排 即是 21的二进制：10101 其他方面 (n &gt;&gt; m) &amp; 1 == (n &gt;&gt; m) | 0 == (n &gt;&gt; m) ^ 0 n &amp; ~(1 &lt;&lt; m) : 将 n的第m位数，重置为 0 n | (1 &lt;&lt; m) : 将 n的第m位数，重置为 1 n ^ (1 &lt;&lt; m) : 将 n的第m位数，取其相反 结束语 本文会同步更新在以下地方(已链接本人主页),欢迎你在常逛的网站中关注我。 掘金 简书 博客园 CSDN segmentfault 转载本站文章请注明作者和出处 tomotoes.com，请勿用于任何商业用途。深入Web全栈各项技术，坚持原创，文章更新虽不定，但只为质量而生。建议收藏这个坏掉的番茄 tomotoes.com ，愿陪你一起在全栈的道路上努力前行！","tags":[{"name":"底端","slug":"底端","permalink":"http://tomotoes.com/blog/tags/底端/"}]},{"title":"CCUT告白墙系统","date":"2018-01-21T04:38:37.000Z","path":"/posts/41f67d73/","text":"233，这应该是我的处女项目了。 前言大一时，做的 C 语言的实训项目 ，拿出来怀念一下~ 实训报告 实训报告如下： 实训计划 &nbsp;&nbsp;&nbsp;&nbsp;起初做系统程序，本着一个不想太现实的心，结合着偶然的思路CCUT表白墙犹然而来。 &nbsp;&nbsp;&nbsp;&nbsp;原本想这个程序，大致应该很简单，毕竟只有初等函数，连个指针都用不着，不过慢慢发现，它并不是这样，也差点让我濒临放弃。像一些被告白人 告白人 告白宣言根本无法把他们单独读出来，以此修改被告白人后的排序，青春进行曲名字重复，排序名字重复，以及修改密码的很多 Bug ，很让人焦头烂额。 &nbsp;&nbsp;&nbsp;&nbsp;虽然做系统只花了五天时间，但在第二天晚上，各种 Bug 以及各种功能达不到目的，让我不得不放弃，于是第三天，不甘心的我选择重做。最终我发现了关键的问题：再存入文件中，手动存空格，会造成错误，文件只会保存空格前面的信息。 &nbsp;&nbsp;&nbsp;&nbsp;嗯，我选择了这种格式：fprintf（fp，“%s”，被告白人名字（告白人名字，告白信息） 并且，我根据（），标识符以及一些小手段，解决了很多问题。然后至于修改告白信息，删除信息信息，我是先定位 要进行操作信息 然后，把他们全换成*号，最后进行单个字符存入文件不存入*号，修改的信息单独存入。 &nbsp;&nbsp;&nbsp;&nbsp;所以以至于，这个程序的含金量不高，本想做个纯链表的系统程序，但慢慢做着做着，就发现，连指针都没用上，嗯，是这样。 &nbsp;&nbsp;&nbsp;&nbsp;您可以有疑问，我为什么不用 fseek ，客观来说，每个人登陆系统，根本无法知道上一个人在文件中 存进了多少长度，所以我不想这样做。 功能总结 &nbsp;&nbsp;&nbsp;&nbsp;说实话，有些功能，话语很幼稚，但某些环境要求它们的出现，也让您见笑了。 ASCII 码里面 3 就是一个字符小爱心，这个大心,三部分完成： 上三行，左部分，然后右部分。 下三行，左部分然后右部分。 最后一个心。 登陆界面，第一步，判断修改密码人的名单中是否有号主名字，如果有先是到着遍历 把号主名字后的最后一次改的密码那出来，进行比较，有三次机会。 所谓的主菜单，普通的printf构成。 马上告白：把被告白人的姓名单独存到一个文件，用于排序，2.把被告白人名字（告白人名字，告白信息），存到一个文件，用于以下功能。 修改密码：客观上来讲，这个功能是肯定要有的，把修改人姓名，与新密码存入文件，修改一次存一次，读取时倒着遍历读取。 青春进行曲：相当于一个查看功能了，把每一对接受交往的情侣保存到一个文件，先是利用读取字符方式判断文件是否为空，然后把文件指针一定要调回开头，如果用就分拆文件中的字符串，利用二维数组与标识符，下标值为奇数存入甲的名字，为偶数就是乙的名字，然后在把重复的数组筛选出去，然后再遍历输出。 男神女神榜：嗯，就是排序了。先是以告白次数进行对比，如果相等就利用名字的 ASCII 码进行对比。排序方法：结构体加自定义sort函数。先是把被告白人的文件读取出来，再判断文件是否为空，就用功能三的办法，如果不为空，分拆数组，如果有重复，告白次数就自加，然后把重复的名字筛选出去，不保存进结构体，然后排序再遍历输出。 查看邮箱：先是把被告白人的文件读到内存中，判断有多少个号主名字，也就是收到几条告白信息，如果告白信息存在，就读取，告白人，被告白人，告白信息文件，然后分拆数组，利用二维数组与标识符，下标值为偶数存入告白人名字，为奇数就是告白信息，其中如果有人撤回，也会被判断出来（嗯，系统性质），就是光有你的名字，然后，后面的括号中啥也没有，利用比较，撤回有两种情况，我就不一一说 撤回消息：把告白信息文件读到内存，定位到号主名字（也就是告白人名字），把号主名字，告白信息全赋值成*号，然后新建一个文件，把不等于*号的存储进去，然后把原文件删除，把新文件换成原文件的名字。 修改消息：刚开始做这个功能，一直存在个 Bug ，只能修改成比原来字符串长度短的，然后换了一种暴力的办法，先输入要修改被告白人的名字与修改后的告白信息，然后定位到号主名字，把前后信息换成*号，然后把不等于星号的存到新文件，然后再单独把修改的被告白人的名字信息，按照特定格式存储到文件，并且，这个时候，男神女神榜也要做相应的变化，把原来输出的换成新修改的，还是这种办法，然后存到新文件，把原文件删除，把新文件换成原文件的名字。 注销账号：也是客观存在的东西，我一直假如这个系统是个公共机器，必须有下机的功能。因为一些特定的输入是用结构体来完成，然后只要结构体的下标值不同，就可以实现不同的人，不同的信息，来实现其功能，所以功能八，很简单，也很重要，其下标值也必须自加。 退出系统：这个没什么好说的，直接 exit。 嗯，我又新加了一个功能，告白动态，以前一直懵逼，把这么重要的功能忘了…这个就很 easy 了，两个文件：1.存接受人，转告的话2.不接收的人，然后再判断。 另外，又新加了一个爱情宣言功能,然后读取时，二维字符串是以三一个循环，进行存取，告白人，被告白人，爱情宣言。 嗯，这就是我的系统程序。 项目界面 结束语这个项目足足有 1245 行，真是佩服当时的自己 源代码点击显/隐源文件 #include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;math.h&gt;#include &lt;conio.h&gt;#include &lt;algorithm&gt;using namespace std;#define I 8#define R 150#define maxn 150struct person &#123; char Name1[maxn];//号主名字 修改密码人的名字 char Name2[maxn];//被告白人名字 char Password1[maxn];//修改后的密码 char Information[maxn];//告白宣言&#125; love[maxn];struct so &#123; int num; char Name3[maxn];&#125; stu[maxn];bool cmp(so x,so y) &#123; if(x.num!=y.num) return x.num&gt;y.num; else return x.Name3&gt;y.Name3;&#125;FILE *w1,*w2,*w3,*w4,*w5;//w1:保存号主的名字//w2:保存被告人的名字与告白宣言//w3,4:保存被告白人的名字用于排序功能//w5:在一起的名单int n,x,i,len1,len2,num,j,l;int x1=0,x2=0,x3=0,x4=0,x5=0;char ch;void start1();void start2();void start3();void end1();void f1();void f2();void f3();void f4();void f5();void f6();void f7();void f8();void f9();void f0();void start1() &#123; int i, j, k, l, m; char c=3; //ASCII码里面 3 就是一个字符小爱心 for (i=1; i&lt;=2; i++) printf(\"\\n\"); system(\"color f4\"); printf(\"\\t\\t\\t 欢迎来到CCUT表白墙\\n\\n\"); printf(\"\\t\\t\\t\\t 致青春\\n\\n\"); for (i=1; i&lt;=3; i++) &#123; //前3行中间有空隙分开来写 for (j=1; j&lt;=32-2*i; j++) printf(\" \"); //左边的空格，每下一行左边的空格 比上一行少2个 //8*n-2*i for (k=1; k&lt;=4*i+1; k++) printf(\"%c\", c);//输出左半部分字符小爱心 for (l=1; l&lt;=13-4*i; l++) printf(\" \"); //中间的空格，每下一行的空格比上 一行少4个 for (m=1; m&lt;=4*i+1; m++) printf(\"%c\", c);//输出右半部分字符小爱心 printf(\"\\n\"); //每一行输出完毕换行 &#125; for (i=1; i&lt;=3; i++) &#123; //下3行中间没有空格 for (j=1; j&lt;=24+1; j++) printf(\" \"); //左边的空格 //8*(n-1)+1 for (k=1; k&lt;=29; k++) printf(\"%c\", c);//输出字符小爱心 printf(\"\\n\"); //每一行输出完毕换行 &#125; for (i=7; i&gt;=1; i--) &#123; //下7行 for (j=1; j&lt;=40-2*i; j++) printf(\" \"); //左边的空格，每下一行左边的空格 比上一行少2个//8*(n+1)-2*i for (k=1; k&lt;=4*i-1; k++) printf(\"%c\", c);//每下一行的字符小爱心比上一行少4个（这个循环是i--） printf(\"\\n\"); //每一行输出完毕换行 &#125; for (i=1; i&lt;=39; i++) printf(\" \"); //最后一行左边的空格 printf(\"%c\\n\", c); //最后一个字符小爱心 printf(\"\\n\\n\\n\\n\"); //最后空出5行 printf(\" *请摁任意键进入界面\"); getch(); start2();&#125;void start2() &#123; system(\"cls\"); system(\"color 1B\"); printf(\"\\n\\n\\n\"); printf(\"\\t ----------------------------------\\n\"); printf(\"\\t | |\\n\"); printf(\"\\t | |\\n\"); printf(\"\\t | 欢迎进入CCUT表白墙 |\\n\"); printf(\"\\t | |\\n\"); printf(\"\\t | 为您传递浓浓的爱 |\\n\"); printf(\"\\t | |\\n\"); printf(\"\\t ----------------------------------\\n\"); printf(\"\\t\\t (初始化密码为abcd,用户名长度应大于2)\\n\\n\"); printf(\"\\n 请输入您的用户名:\"); w1=fopen(\"d://text1.txt\",\"a+\"); w4=fopen(\"d://text4.txt\",\"a+\"); char s[maxn]; fscanf(w4,\"%s\",s); len1=strlen(s); char k[maxn],v[maxn]; scanf(\"%s%*c\",love[x1].Name1); strcpy(k,love[x1].Name1); if(strlen(k)&gt;=3) &#123; int c,u; c=u=0; bool o=0; for(int i=len1-1; i&gt;=0; i--) &#123; if(s[i]=='(') &#123; for(int j=i+1; j&lt;len1,s[j]!='~'; j++) &#123; //判断号主是否改过密码，并读取后面的密码 if(s[j]==k[u]) &#123; u++; if(u==strlen(k)) &#123; o=1; for(int l=j+2; l&lt;len1,s[l]!=')'; l++) &#123; v[c]=s[l]; c++; &#125; &#125; &#125; &#125; &#125; &#125; for(int i=1; i&lt;=4; i++) &#123; printf(\"\\n\\n 请输入您的密码:\"); int e=0; char c; char password[maxn]=\"\\0\"; while((c=getch())!=13&amp;&amp;e&lt;100) &#123; if(c==8) &#123; //8为退格 if(e&gt;0) &#123; password[e--]='\\0';//删除最后一个，并且计数器减1 printf(\"\\b \\b\");//退格 &#125; &#125; else &#123; password[e++]=c; printf(\"*\"); &#125; &#125; password[e]='\\0'; if(o) &#123; if(strcmp(password,v)==0) &#123; break; &#125; else &#123; if (i &lt; 3) &#123; system(\"cls\"); system(\"color 1B\"); printf(\"\\n\\n\\n\"); printf(\"\\n\\n 密码错误，请您重新输入(初始化密码为abcde)\\n\"); &#125; else &#123; printf(\"\\n\\n\\n 连续3次输错密码，退出系统。\"); printf(\"\\n 您已连续3次将密码输错，系统将退出!\"); exit(1); &#125; &#125; &#125; else &#123; if((strcmp(password,\"abcd\")==0)&amp;&amp;(o==0)) &#123; break; &#125; else &#123; if (i &lt; 3) &#123; system(\"cls\"); system(\"color 1B\"); printf(\"\\n\\n\\n\"); printf(\"\\n\\n 密码错误，请您重新输入(初始化密码为abcde)\\n\"); &#125; else &#123; printf(\"\\n\\n\\n 连续3次输错密码，退出系统。\"); printf(\"\\n 您已连续3次将密码输错，系统将退出!\"); exit(1); &#125; &#125; &#125; &#125; fprintf(w1,\"%s%*c\",love[x1].Name1); fclose(w1); fclose(w4); &#125; else &#123; printf(\"\\n\\n\\t抱歉，用户名长度应大于二个字节，请您重新登陆！\\n\"); exit(0); &#125; printf(\"\\n\\n\\n\\n\\n\\n*密码正确,请摁任意键进入界面\"); getch(); start3();&#125; void start3() &#123; system(\"cls\"); system(\"color B0\"); printf(\"\\n\\n\\n\"); printf(\"\\t\\t /***************************************\\\\\\n\"); printf(\"\\t\\t * *\\n\"); printf(\"\\t\\t * \\\\ 青春无悔|大胆说爱 / *\\n\"); printf(\"\\t\\t * \\\\------------------/ *\\n\"); printf(\"\\t\\t * *\\n\"); printf(\"\\t\\t * 1.马上告白 *\\n\"); printf(\"\\t\\t * 2.修改密码 *\\n\"); printf(\"\\t\\t * 3.青春进行曲 *\\n\"); printf(\"\\t\\t * 4.女神男神榜 *\\n\"); printf(\"\\t\\t * 5.查看邮箱 *\\n\"); printf(\"\\t\\t * 6.告白动态 *\\n\"); printf(\"\\t\\t * 7.修改信息 *\\n\"); printf(\"\\t\\t * 8.撤回信息 *\\n\"); printf(\"\\t\\t * 9.脱单秘籍 *\\n\"); printf(\"\\t\\t * 0.注销或退出 *\\n\"); printf(\"\\t\\t * *\\n\"); printf(\"\\t\\t \\\\***************************************/\\n\\n\"); printf(\"\\n\\n\\n请输入选择项(1-9):\"); while(~scanf(\"%d\",&amp;n)) &#123; printf(\"\\n\\n\\n\\n\"); if(n&gt;=0&amp;&amp;n&lt;=9) &#123; switch(n) &#123; case 1: f1(); break; case 2: f2(); break; case 3: f3(); break; case 4: f4(); break; case 5: f5(); break; case 6: f6(); break; case 7: f7(); break; case 8: f8(); break; case 9: f9(); break; case 0: f0(); break; &#125; &#125; else &#123; printf(\"***********************************************************************\\n\"); printf(\"* *\\n\"); printf(\"* 输入错误! *\\n\"); printf(\"* 请重新输入！ *\\n\"); printf(\"* *\\n\"); printf (\"***********************************************************************\\n \"); break; &#125; &#125;&#125;int main() &#123; start1(); return 0;&#125;void f1() &#123; system(\"cls\"); system(\"color ce\"); printf(\"\\n\\n\\t\\t ***************************************\\n\"); printf(\"\\t\\t ---------------------------------------\\n\"); printf(\"\\t\\t\\t 想大声说爱你\\n\\n\\n\"); printf(\"\\t\\t 请输入您要告白的对象 ：\"); w2=fopen(\"d://text2.txt\",\"a+\"); w3=fopen(\"d://text3.txt\",\"a+\"); scanf(\"%s\",love[x2].Name2); if(strlen(love[x2].Name2)&lt;=2) &#123; printf(\"\\n\\n\\t\\t 您输入的名字有误，请重新输入！\\n\"); &#125; else &#123; if(strcmp(love[x2].Name2,love[x1].Name1)==0) &#123; printf(\"\\n\\n\\t\\t 自己不能向自己告白。\\n\"); &#125; else &#123; printf(\"\\n\\n\\t\\t 请输入您的告白信息 ：\"); scanf(\"%s%*c\",love[x2].Information); char ch; printf(\"\\n\\n\\t\\t 您确定告白吗？\\n\\t\\t\\t1.确定\\n\\t\\t\\t2.返回\\n\\n\"); printf(\"\\t\\t 请输入您的选择：\"); scanf(\"%c\",&amp;ch); if(ch=='1') &#123; fprintf(w2,\"%s(%s~%s)\",love[x2].Name2,love[x1].Name1,love[x2] .Information);//把被告白人的名字信息 存储到w2 fprintf(w3,\"(%s)\",love[x2].Name2);//把告白人的名字单存储到w3 fclose(w2); fclose(w3); printf(\"\\n\\n\\t\\t 爱神丘比特正在为您传递信息，祝您成功！\"); &#125; if(ch=='2') &#123; printf(\"\\n\\n\\t\\t 初见倾心，再见痴心。\\n\"); &#125; if(ch!='1'&amp;&amp;ch!='2') &#123; printf(\"\\n\\n\\t\\t 您输入有误，请您重新输入！\\n\"); &#125; &#125; &#125; printf(\"\\n\\n\\n*请摁任意键返回主菜单\"); getch(); start3();&#125;void f2 () &#123; system(\"cls\"); printf(\"\\n\\n\"); system(\"color 0a\"); w4=fopen(\"d://text4.txt\",\"a+\"); printf(\"\\n\\t\\t\\t请输入新密码：\"); scanf(\"%s\",love[x3].Password1); printf(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\t\\t\\t确定修改密码？\\n\\t\\t\\t1.是\\n\\t\\t\\t2.否\\n\"); getchar(); printf(\"\\n\\t\\t\\t请输入您的选择：\"); scanf(\"%c\",&amp;ch); if(ch=='1') &#123; fprintf(w4,\"(%s~%s)\",love[x3].Name1,love[x1].Password1);//修改密码人的名单 if(!fclose(w4))printf(\"\\n\\t\\t\\t修改成功！\\n\"); else printf(\"\\n\\t\\t\\t密码修改失败\\n\"); &#125; else &#123; printf(\"\\n\\t\\t\\t暂不修改密码！\\n\"); &#125; if(ch=='1') &#123; printf(\"\\n\\n\\n\\t\\t *请摁任意键重新登录 \"); getch(); start2(); &#125; if(ch=='2') &#123; printf(\"\\n\\n\\n\\t\\t\\t*请摁任意键返回主菜单\"); getch(); start3(); &#125;&#125;void f3() &#123; system(\"cls\"); system(\"color 1c\"); for(i=0; i&lt;80; i++) &#123; printf(\"%c\",3); &#125; printf(\"\\n\\n\"); FILE *fp; fp=fopen(\"d://text5.txt\",\"r+\"); char ch; ch=fgetc(fp); char s[maxn],p[maxn][maxn]; rewind(fp); fscanf(fp,\"%s\",s); if(ch==EOF) &#123; printf(\" 理查 致 朱丽叶：“如果我不向你求婚，我会后悔一辈子，因为你是我的惟一。” \\n\\n\"); printf(\" 你的朱丽叶在哪里呢？去寻她吧!\\n\"); &#125; else &#123; int r,t,i; r=t=0; for(i=0; i&lt;strlen(s); i++) &#123; if(s[i]=='(') &#123; for(int j=i+1; j&lt;strlen(s)&amp;&amp;s[j]!='~'; j++) &#123; p[r][t]=s[j]; t++; &#125; r++; t=0; &#125; if(s[i]=='~') &#123; for(int j=i+1; j&lt;strlen(s)&amp;&amp;s[j]!=')'; j++) &#123; p[r][t]=s[j]; t++; &#125; r++; t=0; &#125; if(s[i]==')') &#123; for(int j=i+1; j&lt;strlen(s)&amp;&amp;s[j]!=']'; j++) &#123; p[r][t]=s[j]; t++; &#125; r++; t=0; &#125; &#125; int y=0; bool o=1; char v[maxn][maxn]; for(int i=0; i&lt;r; i+=3,o=1) &#123; for(int l=0; l&lt;i; l+=3) &#123; if(strcmp(p[i],p[l])==0) &#123; o=0; &#125; &#125; if(o) &#123; strcpy(v[y],p[i]); strcpy(v[y+1],p[i+1]); strcpy(v[y+2],p[i+2]); y+=3; &#125; &#125; int k=1; for(int i=0; i&lt;y; i+=3,k++) &#123; if(k%2==0) &#123; printf(\"\\t\\t\\t%s与%s正在热恋，他们的爱情宣言是：%s\\n\\n\",p[i],p[i+1],p[i +2]); &#125; else &#123; printf(\"\\t\\t\\t%s与%s爱意浓浓，他们的爱情宣言是：%s\\n\\n\",p[i],p[i+1],p[i +2]); &#125; &#125; printf(\"\\n\\t\\t\\t让我们祝他们幸福！\\n\"); &#125; fclose(fp); printf(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n *请摁任意键返回主菜单\"); getch(); start3();&#125;void f4() &#123; system(\"cls\"); system(\"color 5C\"); for(i=0; i&lt;80; i++) &#123; printf(\"%c\",3); &#125; printf(\"\\t\\t \\n\"); printf(\"\\t\\t \\\\ 女神VS男神榜 / \\n\"); printf(\"\\t\\t \\\\----------------/ \\n\"); printf(\"\\n\\n\"); w3=fopen(\"d://text3.txt\",\"r+\"); char ch; ch=getc(w3); int r,t; r=t=0; rewind(w3); char s[maxn],f[maxn][maxn]; fscanf(w3,\"%s\",s); if(ch==EOF) &#123; printf(\"\\t\\t 暂无人表白，快去让你女神或男神上榜吧！\\n\\n\"); &#125; else &#123; for(int i=0; i&lt;strlen(s); i++) &#123; if(s[i]=='(') &#123; for(int j=i+1; j&lt;strlen(s)&amp;&amp;s[j]!=')'; j++) &#123; f[r][t]=s[j]; t++; &#125; r++; t=0; &#125; &#125; int num,o,e; o=num=1; e=0; for(int i=0; i&lt;r; i++,o=1) &#123; //有问题:二维字符串 包含名字，判断每个名字的重复次数 for(int l=0; l&lt;i; l++) &#123; if(strcmp(f[l],f[i])==0) &#123; o=0; break; &#125; &#125; if(o) &#123; num=1; strcpy(stu[e].Name3,f[i]); for(int j=i+1; j&lt;r; j++) &#123; if(strcmp(f[i],f[j])==0) &#123; num++; &#125; &#125; stu[e].num=num; e++; &#125; &#125; sort(stu,stu+e,cmp); for(int i=0; i&lt;e; i++) &#123; printf(\"\\t\\tNo.%d\\t 姓名:%s 被告白次数：%d\\n\",i+1,stu[i].Name3,stu[i] .num); &#125; &#125; fclose(w3); printf(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n *请摁任意键返回主菜单\"); getch(); start3();&#125;void f5() &#123; system(\"cls\");//为什么告白邮箱没有筛选重复名字，因为很可能有这种情况，一个人疯狂追求一个 人，一直给他发... system(\"color E0\"); for(i=0; i&lt;80; i++) &#123; printf(\"%c\",4); &#125; printf(\"\\n\\n\"); FILE *fp,*fg; int i,j,l=0,num=0; bool flag=0; char s[maxn],h[maxn],f[maxn*2],say[maxn]; fp=fopen(\"d://text3.txt\",\"r+\"); fg=fopen(\"d://text2.txt\",\"r+\"); w5=fopen(\"d://text5.txt\",\"a+\"); fscanf(fp,\"%s\",s); fscanf(fg,\"%s\",f); strcpy(h,love[x1].Name1); for(j=0; j&lt;strlen(s); j++) &#123; if(s[j]==h[l]) &#123; l++; if(l==strlen(h)&amp;&amp;s[j+1]==')') &#123; num++; l=0; &#125; &#125; else &#123; l=0; &#125; &#125; int r,t,len; char p[maxn][maxn]; r=t=0; len=strlen(h); bool o=0; if(num!=0) &#123; for(int i=0; i&lt;strlen(f); i++) &#123; if(f[i]==h[len-1] &amp;&amp; f[i+1]=='(' &amp;&amp; f[i+2]!=')'&amp;&amp;f[i-2]==h[len-3]) &#123; o=1; for(int j=i+2; j&lt;strlen(f)&amp;&amp;f[j]!='~'; j++) &#123; p[r][t]=f[j];//p[0]存入第一个姓名 t++; &#125; r++; t=0; &#125; if(f[i]=='~'&amp;&amp;r!=0&amp;&amp;o) &#123; for(int j=i+1; j&lt;strlen(f)&amp;&amp;f[j]!=')'; j++) &#123; p[r][t]=f[j];//p[1]存入第一个信息 t++; &#125; r++; t=0; o=0; &#125; &#125; int g=1,v=1; printf(\"\\t\\t\\t您收到%d条告白信息！\\n\\n\",num); for(int i=0; i&lt;r; i+=2,g++) &#123; if(r!=0) &#123; printf(\"\\t\\t\\tNo.%d :来自：%s的真诚爱意\\n\\n\",g,p[i]); printf(\"\\t\\t\\t告白宣言是：%s\\n\\n\",p[i+1]); &#125; else &#123; printf(\"\\t\\t\\t但不知为何，其中向您告白的人撤回了消息\\n\\n\"); v=0; &#125; &#125; g--; if(g!=num) &#123; printf(\"\\t\\t\\t但不知为何，其中向您告白的%d人撤回了消息\\n\\n\",num-g);//这个是多人 向女神告白，有一人撤回 if(g==0) &#123; v=0; &#125; &#125; if(v) &#123; printf(\"\\t\\t\\t请选择您要交往的人（以序号为准）：\\n\"); printf(\"\\t\\t\\t请输入您的选择（1~%d，0为全部拒绝）:\",g); int j; scanf(\"%d\",&amp;j); if(j!=0) &#123; end1(); printf(\"\\n\\t\\t\\t您要公开恋爱消息吗？\\n\\t\\t\\t1.公开\\n\\t\\t\\t2.不公开\"); char ch,Lovesay[maxn]; printf(\"\\n\\n\\t\\t\\t请输入您的选择：\"); scanf(\"%*c%c\",&amp;ch); if(ch=='1') &#123; system(\"cls\"); printf(\"\\n\\n\\n\\n\\t\\t\\t那么请输入您的恋爱宣言：\"); scanf(\"%s%*c\",Lovesay); fprintf(w5,\"(%s~%s)%s]\",p[2*(j-1)],love[x1].Name1,Lovesay);//1-&gt;0, 2-&gt;2,3-&gt;4,4-&gt;6 &#125; system(\"cls\"); printf(\"\\n\\n\\n\\t\\t\\t既然您答应了这位追求者，请对人家说点什么吧!\"); printf(\"\\n\\n\\t\\t\\t请输入您的话语：\"); scanf(\"%s%*c\",say); printf(\"\\n\\n\\t\\t\\t我会帮您转告的！要幸福呦！\\n\"); FILE *k,*l;//K是接收人加上对他的消息，l是不接受人 k=fopen(\"d://texta.txt\",\"a\"); l=fopen(\"d://textb.txt\",\"a\"); fprintf(k,\"(%s~%s)\",p[2*(j-1)],say);//(接受人，转告信息) for(int i=0; i&lt;r; i+=2) &#123; if(strcmp(p[i],p[2*(j-1)])!=0) &#123; fprintf(l,\"%s\",p[i]);//拒绝人员的名单 &#125; &#125; fclose(k); fclose(l); &#125; &#125; &#125; else &#123; printf(\"\\t\\t\\t您的告白邮箱暂时为空！\\n\"); printf(\"\\t\\t\\t何不先主动一步呢？别让现在成为过去！\\n\"); &#125; fclose(w5); fclose(fg); fclose(fp); printf(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n*请摁任意键返回主菜单\"); getch(); start3();&#125;void f6() &#123; system(\"cls\"); system(\"color 2e\");//先判断号主是否告白过别人，然后再判断是否存在接收人名单，然后相应的话 语就开说， for(i=0; i&lt;80; i++) &#123; printf(\"%c\",5); &#125; printf(\"\\n\\n\"); char w[maxn],f[maxn],c[maxn]; FILE *a,*b; bool o,p; o=p=0; w2=fopen(\"d://text2.txt\",\"r+\"); a=fopen(\"d://texta.txt\",\"r+\"); b=fopen(\"d://textb.txt\",\"r+\"); fscanf(w2,\"%s\",w); strcpy(c,love[x1].Name1); char namee[maxn],xinxi[maxn]; char v[maxn];//找到女神名字 int u,k,y; y=u=k=0; for(int i=0; i&lt;strlen(w); i++) &#123; if(w[i]=='('&amp;&amp;w[i+1]==c[0]&amp;&amp;w[i+2]==c[1]) &#123; for(int j=i-1; j&gt;=0&amp;&amp;w[j]!=')'; j--) &#123; v[u++]=w[j]; &#125; &#125; &#125; v[u]='\\0'; for(int j=u-1; j&gt;=0; j--) &#123; namee[k++]=v[j]; &#125; namee[k]='\\0'; for(int i=0; i&lt;strlen(w); i++) &#123; if(w[i]=='('&amp;&amp;w[i+1]==c[0]&amp;&amp;w[i+2]==c[1]) o=1; &#125; if(o) &#123; int e=0; fscanf(a,\"%s\",f); for(int i=0; i&lt;strlen(f); i++) &#123; if(f[i]==c[e]) &#123; e++; if(e==strlen(c)) &#123; p=1; &#125; &#125; else &#123; e=0; &#125; &#125; if(p) &#123; for(int i=0; i&lt;strlen(f); i++) &#123; if(f[i]=='~') &#123; for(int j=i+1; j&lt;strlen(w)&amp;&amp;f[j]!=')'; j++) &#123; xinxi[y++]=f[j]; &#125; &#125; &#125; xinxi[y]='\\0'; printf(\"\\n\\n\\t\\t\\t恭喜您已经被%s接受！\\n\",namee); printf(\"\\n\\t\\t\\t%s还转告您说：%s\\n\",namee,xinxi); printf(\"\\n\\n\\t\\t\\t祝您幸福久久呦！\\n\"); &#125; else &#123; bool e=0; char g[maxn]; fscanf(b,\"%s\",g); int z=0; for(int i=0; i&lt;strlen(g); i++) &#123; if(g[i]==c[z]) &#123; z++; if(z=strlen(c)) &#123; e=1; &#125; &#125; else &#123; z=0; &#125; &#125; if(e) &#123; printf(\"\\n\\n\\t\\t\\t很抱歉，您被%s拒绝。\",namee); printf(\"\\n\\n\\t\\t\\t天涯何处无芳草，您不要太难过，一切都会好起来的！\\n\"); printf(\"\\n\\n\\t\\t\\t您可以查看脱单秘籍，让自己找到恋爱诀窍！\\n\"); &#125; else &#123; printf(\"\\n\\n\\t\\t\\t啊哦，%s正在考虑，您有机会哦！\",namee); printf(\"\\n\\n\\t\\t\\t加油！祝您成功！\\n\"); &#125; &#125; &#125; else &#123; printf(\"\\n\\n\\t\\t\\t马上告白，让告白动态不再沉默！\\n\"); &#125; printf(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n *请摁任意键返回主菜单\"); getch(); start3();&#125;void f7() &#123; system(\"cls\"); printf(\"\\n\\n\"); system(\"color 70\"); char s[maxn],h[maxn],f[maxn]; printf(\"\\n\\n\\t\\t\\t请输入您的选择:\\n\\n\\t\\t\\t1.修改告白信息\\n\\n\\t\\t\\t2.修改爱情宣言\"); printf(\"\\n\\n\\t\\t\\t您的选择是：\"); int o; scanf(\"%d\",&amp;o); if(o==1) &#123; FILE *fp,*fg,*fk; fp=fopen(\"d://text00.txt\",\"w\"); fk=fopen(\"d://text000.txt\",\"w\"); fg=fopen(\"d://text3.txt\",\"a+\"); w2=fopen(\"d://text2.txt\",\"a+\"); char k[maxn],v[maxn]; char Newname[maxn],NewInformation[maxn]; fscanf(w2,\"%s\",s); fscanf(fg,\"%s\",k); strcpy(f,s); strcpy(h,love[x1].Name1); printf(\"\\n\\n\\t 请输入您上次输入的告白对象姓名：\"); scanf(\"%s\",v); for(int i=0; i&lt;strlen(s); i++) &#123; //信息长度与姓名长度都要小于原来的长度，这就很尴尬 了 if(s[i]=='('&amp;&amp;s[i+1]==h[0]&amp;&amp;s[i+2]==h[1]) &#123; //定位号主名字 for(int j=i-1; j&gt;=0||s[j]!=')'; j--) &#123; //beigaobai(haozhu,xinxi) f[j]='*'; &#125; for(int l=i; l&lt;strlen(s); l++) &#123; if(s[l-1]==')') &#123; break; &#125; f[l]='*'; &#125; &#125; &#125; int len,u,j; u=0; len=strlen(v); for(int i=0; i&lt;strlen(k); i++) &#123; //关于排序，只能不退出系统才可以改啊！ if(k[i]==v[u]) &#123; u++; if(u==len) &#123; k[i+1]='*'; for(j=i; j&gt;=i-u; j--) &#123; //(7894)(123)(45)删除（123） 反复推敲出来所得 k[j]='*'; &#125; k[j]='*'; break; &#125; &#125; else &#123; u=0; &#125; &#125; if(u==0) &#123; printf(\"\\n\\n\\t您输入的告白对象姓名不存在!\\n\"); &#125; else &#123; printf(\"\\n\\n\\t 请输入您要修改的告白对象的姓名：\"); scanf(\"%s\",Newname); printf(\"\\n\\n\\t 请输入您要修改的告白信息：\"); scanf(\"%s\",NewInformation); for(int i=0; i&lt;strlen(f); i++) &#123; if(f[i]!='*') &#123; fputc(f[i],fp); &#125; &#125; for(int i=0; i&lt;strlen(k); i++) &#123; if(k[i]!='*') &#123; fputc(k[i],fk); &#125; &#125; fprintf(fk,\"(%s)\",Newname); fprintf(fp,\"%s(%s~%s)\",Newname,love[x1].Name1,NewInformation); if(!fclose(fp))printf(\"\\n\\n\\t修改成功！祝您告白成功！\\n\"); else printf(\"\\n修改失败\\n\"); fclose(w2); fclose(fg); fclose(fk); remove(\"d://text3.txt\"); remove(\"d://text2.txt\"); rename(\"d://text000.txt\",\"d://text3.txt\"); rename(\"d://text00.txt\",\"d://text2.txt\"); &#125; &#125; if(o==2) &#123; FILE *fp,*fg; int t,r,u,b,q; q=b=t=r=u=0; char Newlove[maxn],v[maxn],c[maxn]; fp=fopen(\"d://text5.txt\",\"r\"); fg=fopen(\"d://text7.txt\",\"w\"); fscanf(fp,\"%s\",s); strcpy(h,love[x1].Name1); strcpy(f,s); for(int i=0; i&lt;strlen(s); i++) &#123; if(s[i]==h[b]) &#123; b++; if(b==strlen(h)) &#123; q=1; &#125; &#125; else &#123; b=0; &#125; &#125; if(q) &#123; for(int i=0; i&lt;strlen(s); i++) &#123; if(s[i]=='('&amp;&amp;s[i+1]==h[0]&amp;&amp;s[i+2]==h[1]) &#123; //定位号主名字 for(int j=i; j&lt;strlen(s); j++) &#123; f[j]='*'; if(s[j]==']') break; &#125; for(int j=i; j&lt;strlen(s); j++) &#123; v[r++]=s[j]; if(s[j]==')') break; &#125; &#125; if(s[i]=='~'&amp;&amp;s[i+1]==h[0]&amp;&amp;s[i+2]==h[1]) &#123; for(int j=i; j&gt;=0; j--) &#123; c[u++]=s[j]; f[j]='*'; if(s[j]==']') break; &#125; for(int w=u-1; w&gt;=0; w--) &#123; v[t++]=c[w]; &#125; for(int j=i+1; j&lt;strlen(s); j++) &#123; v[t++]=s[j]; if(s[j]==')') break; &#125; for(int j=i+1; j&lt;strlen(s); j++) &#123; f[j]='*'; if(s[j]==']') break; &#125; &#125; &#125; for(int i=0; i&lt;strlen(f); i++) &#123; if(f[i]!='*') &#123; fputc(f[i],fg); &#125; &#125; printf(\"\\n\\n\\t\\t\\t请输入您的新的爱情宣言: \"); scanf(\"%s%*c\",Newlove); fprintf(fg,\"%s%s]\",v,Newlove); if(!fclose(fg))printf(\"\\n\\n\\n\\t\\t\\t修改成功!\\n\"); else printf(\"\\n修改失败!\\n\"); fclose(fp); remove(\"d://text5.txt\"); rename(\"d://text7.txt\",\"d://text5.txt\"); &#125; else &#123; printf(\"\\n\\n\\t\\t\\t抱歉，您还没有进行相应活动，没有权限修改！\\n\"); &#125; &#125; if(o!=1&amp;&amp;o!=2) &#123; printf(\"\\n\\n\\t\\t\\t您的输入有误，请重新返回输入！\\n\"); &#125; printf(\"\\n\\n\\n\\n\\n\\n *请摁任意键返回主菜单\"); getch(); start3();&#125;void f8() &#123; system(\"cls\");//为什么撤回功能，只撤回消息，而男神女神榜没有实时更新呢，因为我认为，这会 让被告白人更能显出她的魅力 printf(\"\\n\\n\"); system(\"color 3f\"); FILE *fp; fp=fopen(\"d://text0.txt\",\"w\"); w2=fopen(\"d://text2.txt\",\"r+\"); bool o=0; char s[maxn],h[maxn],f[maxn]; char Oldname[maxn],ch; printf(\"\\t\\t\\t请输入您刚才告白的对象名字：\"); scanf(\"%s%*c\",Oldname); fscanf(w2,\"%s\",s); strcpy(f,s); strcpy(h,love[x1].Name1); int u=0; for(int i=0; i&lt;strlen(s); i++) &#123; if(s[i]==Oldname[u]) &#123; //如果输入的名字 存在 u++; if(u==strlen(Oldname)) &#123; o=1; &#125; &#125; else &#123; u=0; &#125; &#125; if(o) &#123; printf(\"\\n\\n\\t\\t\\t您确定要撤回吗？\\n\\n\\t\\t\\t1.继续撤回\\n\\n\\t\\t\\t2.大胆去爱\"); printf(\"\\n\\n\\t\\t\\t请输入您的选择：\"); scanf(\"%c\",&amp;ch); if(ch=='1') &#123; for(int i=0; i&lt;strlen(s); i++) &#123; if(s[i]=='('&amp;&amp;s[i+1]==h[0]&amp;&amp;s[i+2]==h[1]) &#123; for(j=i+1; j&lt;strlen(s)&amp;&amp;s[j]!=')'; j++) &#123; f[j]='*'; &#125; &#125; &#125; for(int i=0; i&lt;strlen(f); i++) &#123; if(f[i]!='*') &#123; fputc(f[i],fp); &#125; &#125; printf(\"\\n\\n\\n\\t\\t\\t\"); if(!fclose(fp))printf(\" 撤回成功！\\n\"); else printf(\"\\n撤回失败\\n\"); fclose(w2); remove(\"d://text2.txt\"); rename(\"d://text0.txt\",\"d://text2.txt\"); &#125; else &#123; printf(\"\\n\\n\\t\\t\\t相信自己终有回报，祝您告白成功！\\n\\n\"); &#125; &#125; else &#123; printf(\"\\n\\n\\t\\t\\t抱歉，您还没有进行相应活动，没有权限修改！\\n\"); &#125; printf(\"\\n\\n\\n\\n\\n\\n\\n\\n*请摁任意键返回主菜单\"); getch(); start3();&#125;void f9() &#123; system(\"cls\"); printf(\"\\t\\t\\t 脱单秘籍\\n\\n\"); system(\"color 1e\"); printf(\"1、和异性朋友不要搞暧昧\\n\\n\"); printf(\" 单身的男女最好不要和异性搞暧昧，你们一起看电影吃饭拉手逛街，几乎做了全天下恋人都做的事情，别人会因为误以为你已经有了另一半而放弃对你的追求。所以，即使自己有不少玩的比较好的异性朋友，你最好保持合适的距离，这样被人才会知道你是单身，才会主动对你追求示好。\\n\\n\"); printf(\"2、广泛发动身边的朋友、同学、同事介绍对象\\n\\n\"); printf(\" 不要感觉发动身边的人给自己介绍对象是很丢脸的事情，单身并不丢脸，丢脸的是连告诉别人自己是单身的勇气都没有，连追求自己幸福的勇气都没有。从现在开始主动和自己的老朋友联系，不要回避恋爱问题，只有让他们知道你是单身的，知道你有被介绍朋友的需要，别人才会给你主动介绍。\\n\\n\"); printf(\"3、努力上进地工作\\n\\n\"); printf(\" 事实证明，努力地工作j就是一个很好的一个方法，在事业上小有成就可以大大增加你的魅力指数。\\n\\n\"); printf(\"4、在告白墙自谋对象\\n\\n\"); printf(\" 也许你自始至终都对告白墙存在排斥心理，上面的人也都是骗子，那你就太OUT了。告白墙只是提供了一个认识交流的平台，不少告白墙也是可以考虑注册的，上面有不少像你一样还没有找到对象的朋友，说不定就可以碰到自己的另一半,在周围人给介绍的不是太多的话，告白墙也不失是一个好的方法。\\n\\n\"); printf(\"5、调整自己的心态\\n\\n\"); printf(\"有些人可能是在以前的生活中和异性接触的不是太多，面对异性总有一种天然的不自信，紧张兮兮，畏畏缩缩，甚至连话都知道怎么说。纵然你长得帅如梁朝伟，美如张柏芝，你没有一个好的心态，对自己不够自信，你照样单身。存在这种心态说明你对自己认识不够，对他人认识不够。每个人都是这个世界上独一无二的个体，都会有自己的长处优点，你要会发掘自己的有点，而不是老是拿着自己的短处和别人的长处比，如果这样张柏芝梁朝伟也不会自信。你要发掘自己的优点，发自内心的爱上自己，只有你爱让自己，别人才会爱上你自己。所以说，想恋爱，先调整一下自己的心态吧。\\n\\n\"); printf(\"6、学习恋爱技巧，让自己变得更有魅力\\n\\n\"); printf(\" 要知道，恋爱是有技巧的。男人要多在豁达、幽默、风趣方面下功夫，女人则要在外表和内在气质方面努力，这些百度上有很多，我就不赘述了。\\n\\n\"); printf(\"7、多参加各种活动，扩大自己的交际面\\n\\n\"); printf(\" 很多单身男女之所以没有找到对象，很多情况就是因为交际面比较狭窄，所以扩大自己的交际面，尽快从宅男宅女的行列里走出来，主动去接触外界的人和事，也可以助你脱单。\\n\\n\"); printf(\"8、尽显你的细心\\n\\n\"); printf(\" 胆大心细，怎么会没有伴侣！\\n\\n\"); printf(\"9、开口去说\\n\\n\"); printf(\" 人只有主动去表达自己，才会吸引他人去了解你。如果你长的不是天仙下凡或是气度不凡便不要指望别人主动搭讪你，假如你长相平平有人陌生异性去搭讪你，这反而不是好事开口去说，主动和异性打招呼，主动嘘寒问暖或是礼貌交流都能够加深彼此的了解，让你们有深交的基础条件。\\n\\n\"); printf(\"PS:1、你有多勇敢，你就会多幸福!\\n\\n\"); printf(\" 2、向一切束缚住你的东西开战!\\n\\n\"); printf(\"加油，CCUT小墙祝您成功！\\n\\n\"); printf(\"\\n\\n\\n\\n\\n\\n*请摁任意键返回主菜单\"); getch(); start3();&#125;void f0() &#123; system(\"cls\"); printf(\"\\n\\n\"); system(\"color 0b\"); printf(\"\\n\\n\\t\\t\\t您确定要退出吗？\\n\\n\\t\\t\\t1.注销账号\\n\\t\\t\\t2.退出系统\\n\\t\\t\\t3.返回 主菜单\"); printf(\"\\n\\n\\t\\t\\t请输入您的选择：\"); scanf(\"%*c%c\",&amp;ch); if(ch=='1') &#123; x1++; x2++; x3++; x4++; x5++; start1(); &#125; if(ch=='2') &#123; exit(0); &#125; if(ch=='3') &#123; start3(); &#125;&#125; void end1() &#123; system(\"cls\"); system(\"color 4c\"); int i,j,e; int a; int t1; for(i=1,a=I; i&lt;=I/2; i++,a--) &#123; t1=6; while(t1--)printf(\" \"); for(j=(int) (I-sqrt(I*I-(a-i)*(a-i))); j&gt;0; j--) printf(\" \"); for(e=1; e&lt;=2*sqrt(I*I-(a-i)*(a-i)); e++) printf(\"*\"); for(j=(int) (2*( I-sqrt(I*I-(a-i)*(a-i)))); j&gt;0; j--) printf(\" \"); for(e=1; e&lt;=2*sqrt(I*I-(a-i)*(a-i)); e++) printf(\"*\"); for(j=(int)(I-sqrt(I*I-(a-i)*(a-i))); j&gt;0; j--) printf(\" \"); t1= (int)(I-sqrt(I*I-(a-i)*(a-i))) ; t1= 2*t1; t1+=(int)(2*sqrt(I*I-(a-i)*(a-i))); t1=20-t1; while(t1--) printf(\" \"); for(j=(int)(I-sqrt(I*I-(a-i)*(a-i))); j&gt;0; j--) printf(\" \"); for(e=1; e&lt;=2*sqrt(I*I-(a-i)*(a-i)); e++) printf(\"*\"); for(j=(int)(2*(I-sqrt(I*I-(a-i)*(a-i)))); j&gt;0; j--) printf(\" \"); for(e=1; e&lt;=2*sqrt(I*I-(a-i)*(a-i)); e++) printf(\"*\"); for(j=(int) (I-sqrt(I*I-(a-i)*(a-i))); j&gt;0; j--) printf(\" \"); printf(\"\\n\"); &#125; for(i=1; i&lt;=R/2; i++) &#123; if(i%2||i%3)continue; t1=6; if(i==6)printf(\"&gt;&gt;----\"); else while(t1--)printf(\" \"); for(j=(int) (R-sqrt(R*R-i*i)); j&gt;0; j--) printf(\" \"); for(e=1; e&lt;=2*(sqrt(R*R-i*i) - (R-2*I)); e++) printf(\"*\"); for(j=(int) (R-sqrt(R*R-i*i)); j&gt;0; j--) printf(\" \"); t1= (int)(R-sqrt(R*R-i*i)); t1=2*t1; t1+= (int)(2*(sqrt(R*R-i*i) - (R-2*I))); t1=35-t1; if(i==6) &#123; printf(\"LOVE\"); &#125; else if(i==48) &#123; printf(\"\\b\\b\\b我爱你!\"); &#125; else while(t1--) printf(\" \"); for(j=(int) (R-sqrt(R*R-i*i)); j&gt;0; j--) printf(\" \"); for(e=1; e&lt;=2*(sqrt(R*R-i*i) - (R-2*I)); e++) printf(\"*\"); for(j=(int) (R-sqrt(R*R-i*i)); j&gt;0; j--) printf(\" \"); if(i==6)printf(\"-----&gt;\"); printf(\"\\n\"); &#125; printf(\"\\t\\t\\t祝您交友愉快，幸福久久\");&#125; .button {color: #666; background-color: #EEE; border-color: #EEE; text-decoration: none; text-align: center; line-height: 40px; height: 40px; padding: 0 40px; margin: 0; display: inline-block; border: none; -webkit-box-sizing: border-box; box-sizing: border-box; -webkit-transition-property: all; transition-property: all; -webkit-transition-duration: .3s; transition-duration: .3s; font-size: 18px; font-weight: bold; font-family: @font-custom; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; letter-spacing: 3px; } .button:visited {color: #666; } .button:hover, .button:focus {background-color: #f6f6f6; text-decoration: none; outline: none; } .button:active, .button.active, .button.is-active {text-shadow: 0 1px 0 rgba(255, 255, 255, 0.3); text-decoration: none; background-color: #eeeeee; border-color: #cfcfcf; color: #d4d4d4; -webkit-transition-duration: 0s; transition-duration: 0s; -webkit-box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.2); box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.2); } .button.disabled, .button.is-disabled, .button:disabled {top: 0 !important; background: #EEE !important; border: 1px solid #DDD !important; text-shadow: 0 1px 1px white !important; color: #CCC !important; -webkit-box-shadow: none !important; box-shadow: none !important; opacity: .8 !important; } .button-primary {background-color: #1B9AF7; border-color: #1B9AF7; color: #FFF; } .button-primary:visited {color: #FFF; } .button-primary:hover, .button-primary:focus {background-color: #4cb0f9; border-color: #4cb0f9; color: #FFF; } .button-primary:active, .button-primary.active, .button-primary.is-active {background-color: #2798eb; border-color: #2798eb; color: #0880d7; } .button-rounded {border-radius: 4px; } .button-border.button-primary, .button-primary.button-border-thin, .button-primary.button-border-thick, .button-border-thin.button-primary, .button-border-thick.button-primary {color: #1B9AF7; } .button-border.button-primary:hover, .button-primary.button-border-thin:hover, .button-primary.button-border-thick:hover, .button-border.button-primary:focus, .button-primary.button-border-thin:focus, .button-primary.button-border-thick:focus, .button-border-thin.button-primary:hover, .button-border-thin.button-primary:focus, .button-border-thick.button-primary:hover, .button-border-thick.button-primary:focus {background-color: rgba(76, 176, 249, 0.9); color: rgba(255, 255, 255, 0.9); } .button-border.button-primary:active, .button-primary.button-border-thin:active, .button-primary.button-border-thick:active, .button-border.button-primary.active, .button-primary.active.button-border-thin, .button-primary.active.button-border-thick, .button-border.button-primary.is-active, .button-primary.is-active.button-border-thin, .button-primary.is-active.button-border-thick, .button-border-thin.button-primary:active, .button-border-thin.button-primary.active, .button-border-thin.button-primary.is-active, .button-border-thick.button-primary:active, .button-border-thick.button-primary.active, .button-border-thick.button-primary.is-active {background-color: rgba(39, 152, 235, 0.7); color: rgba(255, 255, 255, 0.5); opacity: .3; } .button-3d {position: relative; top: 0; -webkit-box-shadow: 0 7px 0 #bbbbbb, 0 8px 3px rgba(0, 0, 0, 0.2); box-shadow: 0 7px 0 #bbbbbb, 0 8px 3px rgba(0, 0, 0, 0.2); } .button-3d:hover, .button-3d:focus {-webkit-box-shadow: 0 7px 0 #bbbbbb, 0 8px 3px rgba(0, 0, 0, 0.2); box-shadow: 0 7px 0 #bbbbbb, 0 8px 3px rgba(0, 0, 0, 0.2); } .button-3d:active, .button-3d.active, .button-3d.is-active {top: 5px; -webkit-transition-property: all; transition-property: all; -webkit-transition-duration: .15s; transition-duration: .15s; -webkit-box-shadow: 0 2px 0 #bbbbbb, 0 3px 3px rgba(0, 0, 0, 0.2); box-shadow: 0 2px 0 #bbbbbb, 0 3px 3px rgba(0, 0, 0, 0.2); } .button-3d.button-primary {-webkit-box-shadow: 0 7px 0 #0880d7, 0 8px 3px rgba(0, 0, 0, 0.3); box-shadow: 0 7px 0 #0880d7, 0 8px 3px rgba(0, 0, 0, 0.3); } .button-3d.button-primary:hover, .button-3d.button-primary:focus {-webkit-box-shadow: 0 7px 0 #077ace, 0 8px 3px rgba(0, 0, 0, 0.3); box-shadow: 0 7px 0 #077ace, 0 8px 3px rgba(0, 0, 0, 0.3); } .button-3d.button-primary:active, .button-3d.button-primary.active, .button-3d.button-primary.is-active {-webkit-box-shadow: 0 2px 0 #0662a6, 0 3px 3px rgba(0, 0, 0, 0.2); box-shadow: 0 2px 0 #0662a6, 0 3px 3px rgba(0, 0, 0, 0.2); } codeHide.addEventListener(\"click\",function(){$(\"#sourceCode\").slideToggle(\"slow\")});","tags":[{"name":"C","slug":"C","permalink":"http://tomotoes.com/blog/tags/C/"}]},{"title":"让你的Capslock键变废为宝","date":"2018-01-18T02:31:08.000Z","path":"/posts/74e12e24/","text":"很多时候我们是用不到 Capslock 键的。 Capslock 键的劣性&nbsp;&nbsp;&nbsp;&nbsp;如果你是 Windows 系统用户，就会发现，很多时候我们是用不到 Capslock 键的。Capslock 键是切换大小写的锁定，而在平常工作中，只要摁住 Shift 键一样可完成该功能。并且 在键盘的布局上来看 ，Capslock 键 的地理位置 非常便捷，这可不是我们想要的。&nbsp;&nbsp;&nbsp;&nbsp;下文将告诉你 如何把 作用微小的 Capslock键 变成你的得力助手。 修改前奏本文使用的修改键的脚本语言 是使用的 AutoHotKey ，一门超级强大的脚本语言。 点击AutoHotKey官网下载链接下载AutoHotKey 安装包 并安装。 新建文本文件，文件名格式为 文件名.ahk , 并用编辑器打开，建议 使用下载 AutoHotKey 插件后的 VSCode。 新建完成后的 ahk 文件，你可以双击运行，或者 右键点击文件，然后单击 Compile Script 转换成 可执行文件再执行。 修改进行曲&nbsp;&nbsp;&nbsp;&nbsp;俗话说：“授人以鱼不如授人以渔”，所以，我先教你三个简单的例子，以便你能快速掌握 所需的 AHK 脚本知识。 模拟发送命令 模拟键盘事件 模拟光标行为 一些 AHK 小常识其中还有一些必备的小知识 修改成果 源文件我调试了很长时间的 Capslock 快捷配置，希望能对你有所帮助。 点击显/隐源文件 ;管理员运行if not A_IsAdmin&#123; Run *RunAs \"%A_ScriptFullPath%\" ExitApp&#125;;无环境变量#NoEnv;高进程Process Priority,,High;一直关闭 CapslockSetCapsLockState, AlwaysOff ; CapsLock -&gt; EscCapsLock::Send &#123;Esc&#125;return; CapsLock &amp; alt -&gt; EnterCapsLock &amp; alt::Send &#123;Enter&#125;return; CapsLock &amp; Space -&gt; ShiftCapsLock &amp; Space:: Send &#123;Shift Down&#125;returnCapsLock &amp; Space up:: Send &#123;Shift up&#125;return; 光标移动CapsLock &amp; j::MouseMove, -15, 0, 0, R return CapsLock &amp; k:: MouseMove, 0, 15, 0, R return CapsLock &amp; i:: MouseMove, 0, -15, 0, R return CapsLock &amp; l:: MouseMove, 15, 0, 0, R return ; 左键单击 CapsLock &amp; u:: SendEvent &#123;Blind&#125;&#123;LButton down&#125; KeyWait Enter SendEvent &#123;Blind&#125;&#123;LButton up&#125; return ; 右键单击 CapsLock &amp; o:: SendEvent &#123;Blind&#125;&#123;RButton down&#125; KeyWait Enter SendEvent &#123;Blind&#125;&#123;RButton up&#125; return; h 向上滚动CapsLock &amp; h:: SendEvent &#123;Blind&#125;&#123;WheelUp&#125;return ; 分号 向下滚动CapsLock &amp; `;::SendEvent &#123;Blind&#125;&#123;WheelDown&#125;return CapsLock &amp; 3:: SendEvent &#123;Blind&#125;&#123;WheelUp&#125;return CapsLock &amp; 4::SendEvent &#123;Blind&#125;&#123;WheelDown&#125;return CapsLock &amp; F5::Reloadreturn; 指针移动CapsLock &amp; e::Send &#123;Up&#125;returnCapsLock &amp; d::Send &#123;Down&#125;returnCapsLock &amp; s::Send &#123;Left&#125;returnCapsLock &amp; f:: Send &#123;right&#125;return; 行首行尾CapsLock &amp; a::Send &#123;home&#125;returnCapsLock &amp; g::Send &#123;end&#125;return; 左右删除CapsLock &amp; w::Send &#123;BS&#125;returnCapsLock &amp; r::Send &#123;Delete&#125;return; 撤销重做CapsLock &amp; t::Send ^&#123;z&#125;return 结束语 本文会同步更新在以下地方(已链接本人主页),欢迎你在常逛的网站中关注我。 掘金 简书 博客园 CSDN segmentfault 转载本站文章请注明作者和出处 tomotoes.com，请勿用于任何商业用途。深入Web全栈各项技术，坚持原创，文章更新虽不定，但只为质量而生。建议收藏这个坏掉的番茄 tomotoes.com ，愿陪你一起在全栈的道路上努力前行！ .iimg{transform:scale(0.8);margin:-30px 0px -40px -50px;}.button {color: #666; background-color: #EEE; border-color: #EEE; text-decoration: none; text-align: center; line-height: 40px; height: 40px; padding: 0 40px; margin: 0; display: inline-block; border: none; -webkit-box-sizing: border-box; box-sizing: border-box; -webkit-transition-property: all; transition-property: all; -webkit-transition-duration: .3s; transition-duration: .3s; font-size: 18px; font-weight: bold; font-family: @font-custom; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; letter-spacing: 3px; } .button:visited {color: #666; } .button:hover, .button:focus {background-color: #f6f6f6; text-decoration: none; outline: none; } .button:active, .button.active, .button.is-active {text-shadow: 0 1px 0 rgba(255, 255, 255, 0.3); text-decoration: none; background-color: #eeeeee; border-color: #cfcfcf; color: #d4d4d4; -webkit-transition-duration: 0s; transition-duration: 0s; -webkit-box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.2); box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.2); } .button.disabled, .button.is-disabled, .button:disabled {top: 0 !important; background: #EEE !important; border: 1px solid #DDD !important; text-shadow: 0 1px 1px white !important; color: #CCC !important; -webkit-box-shadow: none !important; box-shadow: none !important; opacity: .8 !important; } .button-primary {background-color: #1B9AF7; border-color: #1B9AF7; color: #FFF; } .button-primary:visited {color: #FFF; } .button-primary:hover, .button-primary:focus {background-color: #4cb0f9; border-color: #4cb0f9; color: #FFF; } .button-primary:active, .button-primary.active, .button-primary.is-active {background-color: #2798eb; border-color: #2798eb; color: #0880d7; } .button-rounded {border-radius: 4px; } .button-border.button-primary, .button-primary.button-border-thin, .button-primary.button-border-thick, .button-border-thin.button-primary, .button-border-thick.button-primary {color: #1B9AF7; } .button-border.button-primary:hover, .button-primary.button-border-thin:hover, .button-primary.button-border-thick:hover, .button-border.button-primary:focus, .button-primary.button-border-thin:focus, .button-primary.button-border-thick:focus, .button-border-thin.button-primary:hover, .button-border-thin.button-primary:focus, .button-border-thick.button-primary:hover, .button-border-thick.button-primary:focus {background-color: rgba(76, 176, 249, 0.9); color: rgba(255, 255, 255, 0.9); } .button-border.button-primary:active, .button-primary.button-border-thin:active, .button-primary.button-border-thick:active, .button-border.button-primary.active, .button-primary.active.button-border-thin, .button-primary.active.button-border-thick, .button-border.button-primary.is-active, .button-primary.is-active.button-border-thin, .button-primary.is-active.button-border-thick, .button-border-thin.button-primary:active, .button-border-thin.button-primary.active, .button-border-thin.button-primary.is-active, .button-border-thick.button-primary:active, .button-border-thick.button-primary.active, .button-border-thick.button-primary.is-active {background-color: rgba(39, 152, 235, 0.7); color: rgba(255, 255, 255, 0.5); opacity: .3; } .button-3d {position: relative; top: 0; -webkit-box-shadow: 0 7px 0 #bbbbbb, 0 8px 3px rgba(0, 0, 0, 0.2); box-shadow: 0 7px 0 #bbbbbb, 0 8px 3px rgba(0, 0, 0, 0.2); } .button-3d:hover, .button-3d:focus {-webkit-box-shadow: 0 7px 0 #bbbbbb, 0 8px 3px rgba(0, 0, 0, 0.2); box-shadow: 0 7px 0 #bbbbbb, 0 8px 3px rgba(0, 0, 0, 0.2); } .button-3d:active, .button-3d.active, .button-3d.is-active {top: 5px; -webkit-transition-property: all; transition-property: all; -webkit-transition-duration: .15s; transition-duration: .15s; -webkit-box-shadow: 0 2px 0 #bbbbbb, 0 3px 3px rgba(0, 0, 0, 0.2); box-shadow: 0 2px 0 #bbbbbb, 0 3px 3px rgba(0, 0, 0, 0.2); } .button-3d.button-primary {-webkit-box-shadow: 0 7px 0 #0880d7, 0 8px 3px rgba(0, 0, 0, 0.3); box-shadow: 0 7px 0 #0880d7, 0 8px 3px rgba(0, 0, 0, 0.3); } .button-3d.button-primary:hover, .button-3d.button-primary:focus {-webkit-box-shadow: 0 7px 0 #077ace, 0 8px 3px rgba(0, 0, 0, 0.3); box-shadow: 0 7px 0 #077ace, 0 8px 3px rgba(0, 0, 0, 0.3); } .button-3d.button-primary:active, .button-3d.button-primary.active, .button-3d.button-primary.is-active {-webkit-box-shadow: 0 2px 0 #0662a6, 0 3px 3px rgba(0, 0, 0, 0.2); box-shadow: 0 2px 0 #0662a6, 0 3px 3px rgba(0, 0, 0, 0.2); }@media screen and (max-width:800px) {.iimg{margin:0px;}} codeHide.addEventListener(\"click\",function(){$(\"#sourceCode\").slideToggle(\"slow\")});","tags":[{"name":"AHK","slug":"AHK","permalink":"http://tomotoes.com/blog/tags/AHK/"}]},{"title":"学习Less-看这篇就够了","date":"2017-12-08T02:52:11.000Z","path":"/posts/11b92833/","text":"Less 一门简单而又优雅的预处理语言。 前言CSS的短板&nbsp;&nbsp;&nbsp;&nbsp;作为前端学习者的我们 或多或少都要学些 CSS ，它作为前端开发的三大基石之一，时刻引领着 Web 的发展潮向。 而 CSS 作为一门标记性语言，可能 给初学者第一印象 就是简单易懂，毫无逻辑，不像编程该有的样子。在语法更新时，每当新属性提出，浏览器的兼容又会马上变成绊脚石，可以说 CSS 短板不容忽视。 &nbsp;&nbsp;&nbsp;&nbsp;问题的诞生往往伴随着技术的兴起， 在 Web 发展的这几年， 为了让 CSS 富有逻辑性，短板不那么严重，涌现出了 一些神奇的预处理语言。 它们让 CSS 彻底变成一门 可以使用 变量 、循环 、继承 、自定义方法等多种特性的标记语言，逻辑性得以大大增强。 预处理语言的诞生其中 就我所知的有三门语言：Sass、Less 、Stylus 。 Sass 诞生于 2007 年，Ruby 编写，其语法功能都十分全面，可以说 它完全把 CSS 变成了一门编程语言。另外 在国内外都很受欢迎，并且它的项目团队很是强大 ，是一款十分优秀的预处理语言。 Stylus 诞生于 2010 年，来自 Node.js 社区，语法功能也和 Sass 不相伯仲，是一门十分独特的创新型语言。 Less 诞生于 2009 年，受Sass的影响创建的一个开源项目。 它扩充了 CSS 语言，增加了诸如变量、混合（mixin）、函数等功能，让 CSS 更易维护、方便制作主题、扩充（引用于官网）。 选择预处理语言这是一个十分纠结的问题。 在我看来，这就好比 找女朋友，有人喜欢 贤惠安静的，就有人喜欢 活泼爱闹的，各有各的爱好，可晚上闭灯后 其实都差不多，所以你不用太过纠结。当然了 ，首先 你要有女朋友。 在网上讨论看来，Sass 与 Stylus 相比于 Less 功能更为丰富，但对于学习成本以及适应时间 ，Less 稍胜一筹，这也是我选择 Less 的原因。 Less 没有去掉任何 CSS 的功能，而是在现有的语法上，增添了许多额外的功能特性，所以学习 Less 是一件非常舒服的事情。 如果你之前没有接触过预处理语言，纠结应该学哪一个，不如先看看 下面 Less 的介绍，我相信你会爱上它的。 使用 Less 的前奏使用 Less 有两种方式 在页面中 引入 Less.js 可在官网下载 或使用CDN &lt;script src=\"//cdnjs.cloudflare.com/ajax/libs/less.js/2.7.2/less.min.js\"&gt;&lt;/script&gt; 需要注意的是，link 标签一定要在 Less.js 之前引入，并且 link 标签的 rel 属性要设置为stylesheet/less。 &lt;link rel=\"stylesheet/less\" href=\"style.less\"&gt;&lt;script src=\"less.min.js\"&gt;&lt;/script&gt; 在命令行 使用npm安装 npm install -g less 具体使用命令 $ lessc styles.less &gt; styles.css 假如还有问题，官网已经有了明确的步骤。 如果你也是 Webpack 的使用者，还需要配合 less-loader 进行处理，具体可见我的这篇文章：Webpack飞行手册，里面详细说明了 less 的处理方式。 如果你在本地环境，可以使用第一种方式，非常简单；但在生产环境中，性能非常重要，最好使用第二种方式。 正文下面我将简介 Less 的功能特性。 变量我们常常在 CSS 中 看到同一个值重复多次，这样难易于代码维护。理想状态，应是下面这样：const bgColor=\"skyblue\";$(\".post-content\").css(\"background-color\",bgColor);$(\"#wrap\").css(\"background-color\",bgColor);$(\".arctive\").css(\"background-color\",bgColor); 只要我们修改 bgColor这一个变量， 整个页面的背景颜色都会随之改变。 而 Less 中的变量十分强大，可化万物，值得一提的是，其变量是常量 ，所以只能定义一次，不能重复使用。 值变量 /* Less */@color: #999;@bgColor: skyblue;//不要添加引号@width: 50%;#wrap &#123; color: @color; background: @bgColor; width: @width;&#125;/* 生成后的 CSS */#wrap &#123; color: #999; background: skyblue; width: 50%;&#125; 以 @ 开头 定义变量，并且使用时 直接 键入 @名称。 在平时工作中，我们就可以把 常用的变量 封装到一个文件中，这样利于代码组织维护。 @lightPrimaryColor: #c5cae9;@textPrimaryColor: #fff;@accentColor: rgb(99, 137, 185);@primaryTextColor: #646464;@secondaryTextColor: #000;@dividerColor: #b6b6b6;@borderColor: #dadada; 选择器变量 让 选择器 变成 动态 /* Less */@mySelector: #wrap;@Wrap: wrap;@&#123;mySelector&#125;&#123; //变量名 必须使用大括号包裹 color: #999; width: 50%;&#125;.@&#123;Wrap&#125;&#123; color:#ccc;&#125;#@&#123;Wrap&#125;&#123; color:#666;&#125;/* 生成的 CSS */#wrap&#123; color: #999; width: 50%;&#125;.wrap&#123; color:#ccc;&#125;#wrap&#123; color:#666;&#125; 属性变量 可减少代码书写量 /* Less */@borderStyle: border-style;@Soild:solid;#wrap&#123; @&#123;borderStyle&#125;: @Soild;//变量名 必须使用大括号包裹&#125;/* 生成的 CSS */#wrap&#123; border-style:solid;&#125; url 变量 项目结构改变时，修改其变量即可。 /* Less */@images: \"../img\";//需要加引号body &#123; background: url(\"@&#123;images&#125;/dog.png\");//变量名 必须使用大括号包裹&#125;/* 生成的 CSS */body &#123; background: url(\"../img/dog.png\");&#125; 声明变量 有点类似于 下面的 混合方法 结构: @name: { 属性: 值 ;}; 使用：@name(); /* Less */@background: &#123;background:red;&#125;;#main&#123; @background();&#125;@Rules:&#123; width: 200px; height: 200px; border: solid 1px red;&#125;;#con&#123; @Rules();&#125;/* 生成的 CSS */#main&#123; background:red;&#125;#con&#123; width: 200px; height: 200px; border: solid 1px red;&#125; 变量运算 不得不提的是，Less 的变量运算完全超出我的期望，十分强大。 加减法时 以第一个数据的单位为基准 乘除法时 注意单位一定要统一 /* Less */@width:300px;@color:#222;#wrap&#123; width:@width-20; height:@width-20*5; margin:(@width-20)*5; color:@color*2; background-color:@color + #111;&#125;/* 生成的 CSS */#wrap&#123; width:280px; height:200px; margin:1400px; color:#444; background-color:#333;&#125; 变量作用域 一句话理解就是：就近原则，不要跟我提闭包。 借助官网的Demo /* Less */@var: @a;@a: 100%;#wrap &#123; width: @var; @a: 9%;&#125;/* 生成的 CSS */#wrap &#123; width: 9%;&#125; 用变量去定义变量 /* Less */@fnord: \"I am fnord.\";@var: \"fnord\";#wrap::after&#123; content: @@var; //将@var替换为其值 content:@fnord;&#125;/* 生成的 CSS */#wrap::after&#123; content: \"I am fnord.\";&#125; 嵌套 &amp; 的妙用 &amp; ：代表的上一层选择器的名字，此例便是header。 /* Less */#header&#123; &amp;:after&#123; content:\"Less is more!\"; &#125; .title&#123; font-weight:bold; &#125; &amp;_content&#123;//理解方式：直接把 &amp; 替换成 #header margin:20px; &#125;&#125;/* 生成的 CSS */#header::after&#123; content:\"Less is more!\";&#125;#header .title&#123; //嵌套了 font-weight:bold;&#125;#header_content&#123;//没有嵌套！ margin:20px;&#125; 媒体查询 在以往的工作中，我们使用 媒体查询，都要把一个元素 分开写 #wrap&#123; width:500px;&#125;@media screen and (max-width:768px)&#123; #wrap&#123; width:100px; &#125;&#125; Less 提供了一个十分便捷的方式 /* Less */#main&#123; //something... @media screen&#123; @media (max-width:768px)&#123; width:100px; &#125; &#125; @media tv &#123; width:2000px; &#125;&#125;/* 生成的 CSS */@media screen and (maxwidth:768px)&#123; #main&#123; width:100px; &#125;&#125;@media tv&#123; #main&#123; width:2000px; &#125;&#125; 唯一的缺点就是 每一个元素都会编译出自己 @media 声明，并不会合并。 实战技巧 可以借助 Less 在元素中，去定义自己的私有样式。 /* Less */#main&#123; // something.. &amp;.show&#123; display:block; &#125;&#125;.show&#123; display:none;&#125; const main = document.getElementById(\"main\");main.classList.add(\"show\"); 结果： #main.show&#123; display:block;&#125;.show&#123; display:none; //会被覆盖。&#125; 混合方法 无参数方法 方法犹如 声明的集合，使用时 直接键入名称即可。 /* Less */.card &#123; // 等价于 .card() background: #f6f6f6; -webkit-box-shadow: 0 1px 2px rgba(151, 151, 151, .58); box-shadow: 0 1px 2px rgba(151, 151, 151, .58);&#125;#wrap&#123; .card;//等价于.card();&#125;/* 生成的 CSS */#wrap&#123; background: #f6f6f6; -webkit-box-shadow: 0 1px 2px rgba(151, 151, 151, .58); box-shadow: 0 1px 2px rgba(151, 151, 151, .58);&#125; 其中 .card 与 .card() 是等价的。个人建议，为了避免 代码混淆，应写成 : .card()&#123; //something...&#125;#wrap&#123; .card();&#125; 要点： . 与 # 皆可作为 方法前缀。 方法后写不写 () 看个人习惯。 默认参数方法 Less 可以使用默认参数，如果 没有传参数，那么将使用默认参数。 @arguments 犹如 JS 中的 arguments 指代的是 全部参数。 传的参数中 必须带着单位。 /* Less */.border(@a:10px,@b:50px,@c:30px,@color:#000)&#123; border:solid 1px @color; box-shadow: @arguments;//指代的是 全部参数&#125;#main&#123; .border(0px,5px,30px,red);//必须带着单位&#125;#wrap&#123; .border(0px);&#125;#content&#123; .border;//等价于 .border()&#125;/* 生成的 CSS */#main&#123; border:solid 1px red; box-shadow:0px,5px,30px,red;&#125;#wrap&#123; border:solid 1px #000; box-shadow: 0px 50px 30px #000;&#125;#content&#123; border:solid 1px #000; box-shadow: 10px 50px 30px #000;&#125; 方法的匹配模式 与 面向对象中的多态 很相似 /* Less */.triangle(top,@width:20px,@color:#000)&#123; border-color:transparent transparent @color transparent ;&#125;.triangle(right,@width:20px,@color:#000)&#123; border-color:transparent @color transparent transparent ;&#125;.triangle(bottom,@width:20px,@color:#000)&#123; border-color:@color transparent transparent transparent ;&#125;.triangle(left,@width:20px,@color:#000)&#123; border-color:transparent transparent transparent @color;&#125;.triangle(@_,@width:20px,@color:#000)&#123; border-style: solid; border-width: @width;&#125;#main&#123; .triangle(left, 50px, #999)&#125;/* 生成的 CSS */#main&#123; border-color:transparent transparent transparent #999; border-style: solid; border-width: 50px;&#125; 要点 第一个参数 left 要会找到方法中匹配程度最高的，如果匹配程度相同，将全部选择，并存在着样式覆盖替换。 如果匹配的参数 是变量，则将会匹配，如 @_ 。 方法的命名空间 让方法更加规范 /* Less */#card()&#123; background: #723232; .d(@w:300px)&#123; width: @w; #a(@h:300px)&#123; height: @h;//可以使用上一层传进来的方法 &#125; &#125;&#125;#wrap&#123; #card &gt; .d &gt; #a(100px); // 父元素不能加 括号&#125;#main&#123; #card .d();&#125;#con&#123; //不得单独使用命名空间的方法 //.d() 如果前面没有引入命名空间 #card ，将会报错 #card; // 等价于 #card(); .d(20px); //必须先引入 #card&#125;/* 生成的 CSS */#wrap&#123; height:100px;&#125;#main&#123; width:300px;&#125;#con&#123; width:20px;&#125; 要点 在 CSS 中&gt; 选择器，选择的是 儿子元素，就是 必须与父元素 有直接血源的元素。 在引入命令空间时，如使用 &gt; 选择器，父元素不能加 括号。 不得单独使用命名空间的方法 必须先引入命名空间，才能使用 其中方法。 子方法 可以使用上一层传进来的方法 方法的条件筛选 Less 没有 if else，可是它有 when /* Less */#card&#123; // and 运算符 ，相当于 与运算 &amp;&amp;，必须条件全部符合才会执行 .border(@width,@color,@style) when (@width&gt;100px) and(@color=#999)&#123; border:@style @color @width; &#125; // not 运算符，相当于 非运算 !，条件为 不符合才会执行 .background(@color) when not (@color&gt;=#222)&#123; background:@color; &#125; // , 逗号分隔符：相当于 或运算 ||，只要有一个符合条件就会执行 .font(@size:20px) when (@size&gt;50px) , (@size&lt;100px)&#123; font-size: @size; &#125;&#125;#main&#123; #card&gt;.border(200px,#999,solid); #card .background(#111); #card &gt; .font(40px);&#125;/* 生成后的 CSS */#main&#123; border:solid #999 200px; background:#111; font-size:40px;&#125; 要点 比较运算有： &gt; &gt;= = =&lt; &lt;。 = 代表的是等于 除去关键字 true 以外的值都被视为 false： 数量不定的参数 如果你希望你的方法接受数量不定的参数，你可以使用… ，犹如 ES6 的扩展运算符。 /* Less */.boxShadow(...)&#123; box-shadow: @arguments;&#125;.textShadow(@a,...)&#123; text-shadow: @arguments;&#125;#main&#123; .boxShadow(1px,4px,30px,red); .textShadow(1px,4px,30px,red);&#125;/* 生成后的 CSS */#main&#123; box-shadow: 1px 4px 30px red; text-shadow: 1px 4px 30px red;&#125; 方法使用important！ 使用方法 非常简单，在方法名后 加上关键字即可。 /* Less */.border&#123; border: solid 1px red; margin: 50px;&#125;#main&#123; .border() !important;&#125;/* 生成后的 CSS */#main &#123; border: solid 1px red !important; margin: 50px !important;&#125; 循环方法 Less 并没有提供 for 循环功能，但这也难不倒 聪明的程序员，使用递归去实现。下面是官网中的一个 Demo，模拟了生成栅格系统。 /* Less */.generate-columns(4);.generate-columns(@n, @i: 1) when (@i =&lt; @n) &#123; .column-@&#123;i&#125; &#123; width: (@i * 100% / @n); &#125; .generate-columns(@n, (@i + 1));&#125;/* 生成后的 CSS */.column-1 &#123; width: 25%;&#125;.column-2 &#123; width: 50%;&#125;.column-3 &#123; width: 75%;&#125;.column-4 &#123; width: 100%;&#125; 属性拼接方法 +_ 代表的是 空格；+ 代表的是 逗号。 逗号 /* Less */.boxShadow() &#123; box-shadow+: inset 0 0 10px #555;&#125;.main &#123; .boxShadow(); box-shadow+: 0 0 20px black;&#125;/* 生成后的 CSS */.main &#123; box-shadow: inset 0 0 10px #555, 0 0 20px black;&#125; 空格 /* Less */.Animation() &#123; transform+_: scale(2);&#125;.main &#123; .Animation(); transform+_: rotate(15deg);&#125;/* 生成的 CSS */.main &#123; transform: scale(2) rotate(15deg);&#125; 实战技巧 下面是官网中的一个非常赞的 Demo /* Less */.average(@x, @y) &#123; @average: ((@x + @y) / 2);&#125;div &#123; .average(16px, 50px); // 调用 方法 padding: @average; // 使用返回值&#125;/* 生成的 CSS */div &#123; padding: 33px;&#125; 可以说 Less 是一门优雅编程语言。 继承extend 是 Less 的一个伪类。它可继承 所匹配声明中的全部样式。 extend 关键字的使用 /* Less */.animation&#123; transition: all .3s ease-out; .hide&#123; transform:scale(0); &#125;&#125;#main&#123; &amp;:extend(.animation);&#125;#con&#123; &amp;:extend(.animation .hide);&#125;/* 生成后的 CSS */.animation,#main&#123; transition: all .3s ease-out;&#125;.animation .hide , #con&#123; transform:scale(0);&#125; all 全局搜索替换 使用选择器匹配到的 全部声明。 /* Less */#main&#123; width: 200px;&#125;#main &#123; &amp;:after &#123; content:\"Less is good!\"; &#125;&#125;#wrap:extend(#main all) &#123;&#125;/* 生成的 CSS */#main,#wrap&#123; width: 200px;&#125;#main:after, #wrap:after &#123; content: \"Less is good!\";&#125; 减少代码的重复性 从表面 看来，extend 与 方法 最大的差别，就是 extend 是同个选择器共用同一个声明，而 方法 是使用自己的声明，这无疑 增加了代码的重复性。 方法示例 与上面的 extend 进行对比： /* Less */.Method&#123; width: 200px; &amp;:after &#123; content:\"Less is good!\"; &#125;&#125;#main&#123; .Method;&#125;#wrap&#123; .Method;&#125;/* 生成的 CSS */#main&#123; width: 200px; &amp;:after&#123; content:\"Less is good!\"; &#125; &#125;#wrap&#123; width: 200px; &amp;:after&#123; content:\"Less is good!\"; &#125; &#125; 要点 翻译官网 选择器和扩展之间 是允许有空格的：pre:hover :extend(div pre). 可以有多个扩展: pre:hover:extend(div pre):extend(.bucket tr) - 注意这与 pre:hover:extend(div pre, .bucket tr)一样。 这是不可以的，扩展必须在最后 : pre:hover:extend(div pre).nth-child(odd)。 如果一个规则集包含多个选择器，所有选择器都可以使用extend关键字。 导入 导入 less 文件 可省略后缀 import \"main\"; //等价于import \"main.less\"; @import 的位置可随意放置 #main&#123; font-size:15px;&#125;@import \"style\"; reference Less 中 最强大的特性使用 引入的 Less 文件，但不会 编译它。 /* Less */@import (reference) \"bootstrap.less\"; #wrap:extend(.navbar all)&#123;&#125; 翻译官网： 使用@import (reference)导入外部文件，但不会添加 把导入的文件 编译到最终输出中，只引用。 once @import语句的默认行为。这表明相同的文件只会被导入一次，而随后的导入文件的重复代码都不会解析。 @import (once) \"foo.less\";@import (once) \"foo.less\"; // this statement will be ignored multiple 使用@import (multiple)允许导入多个同名文件。 /* Less */// file: foo.less.a &#123; color: green;&#125;// file: main.less@import (multiple) \"foo.less\";@import (multiple) \"foo.less\";/* 生成后的 CSS */.a &#123; color: green;&#125;.a &#123; color: green;&#125; 函数 判断类型 isnumber 判断给定的值 是否 是一个数字。 isnumber(#ff0); // falseisnumber(blue); // falseisnumber(\"string\"); // falseisnumber(1234); // trueisnumber(56px); // trueisnumber(7.8%); // trueisnumber(keyword); // falseisnumber(url(...)); // false iscolor 判断给定的值 是否 是一个颜色。 isurl 判断给定的值 是否 是一个 url 。 颜色操作 saturate 增加一定数值的颜色饱和度。 lighten 增加一定数值的颜色亮度。 darken 降低一定数值的颜色亮度。 fade 给颜色设定一定数值的透明度。 mix 根据比例混合两种颜色。 数学函数 ceil 向上取整。 floor 向下取整。 percentage 将浮点数转换为百分比字符串。 round 四舍五入。 sqrt 计算一个数的平方根。 abs 计算数字的绝对值，原样保持单位。 pow 计算一个数的乘方。 由于 文章 篇幅有限，所以 只能介绍一些 使用效率高的函数。如果你想了解更多，可以去官网的函数链接 其他 注释 /* */ CSS原生注释，会被编译在 CSS 文件中。 /&nbsp;&nbsp;&nbsp;/ Less提供的一种注释，不会被编译在 CSS 文件中。 避免编译 /* Less */#main&#123; width:~'calc(300px-30px)';&#125;/* 生成后的 CSS */#main&#123; width:calc(300px-30px);&#125; 结构： ~&#39; 值 &#39; 变量拼串 在平时工作中，这种需求 太常见了。在下面例子中， 实现了不同的 transtion-delay、animation、@keyframes .judge(@i) when(@i=1)&#123; @size:15px;&#125;.judge(@i) when(@i&gt;1)&#123; @size:16px;&#125;.loopAnimation(@i) when (@i&lt;16) &#123; .circle:nth-child(@&#123;i&#125;)&#123; .judeg(@i); border-radius:@size @size 0 0; animation: ~\"circle-@&#123;i&#125;\" @duration infinite @ease; transition-delay:~\"@&#123;i&#125;ms\"; &#125; @keyframes ~\"circle-@&#123;i&#125;\" &#123; // do something... &#125; .loopAnimation(@i + 1);&#125; 结构： ~&quot;字符@{变量}字符&quot;; 使用 JS 因为 Less 是由 JS 编写，所以 Less 有一得天独厚的特性：代码中使用 Javascript 。 /* Less */@content:`\"aaa\".toUpperCase()`;#randomColor&#123; @randomColor: ~\"rgb(`Math.round(Math.random() * 256)`,`Math.round(Math.random() * 256)`,`Math.round(Math.random() * 256)`)\";&#125;#wrap&#123; width: ~\"`Math.round(Math.random() * 100)`px\"; &amp;:after&#123; content:@content; &#125; height: ~\"`window.innerHeight`px\"; alert:~\"`alert(1)`\"; #randomColor(); background-color: @randomColor;&#125;/* 生成后的 CSS */// 弹出 1#wrap&#123; width: 随机值（0~100）px; height: 743px;//由电脑而异 background: 随机颜色;&#125;#wrap::after&#123; content:\"AAA\";&#125; &nbsp;&nbsp;&nbsp;&nbsp;前几个月 ， 有个 CSS in JS 的概念非常火，现在 看来 JS in CSS 也未曾不可。我觉得完全可以根据 Less 这个特性来造个轮子，JS来控制 CSS ，形成 动态属性，如果成功 很可能会改变 现在前端的打开姿势。 结束语&nbsp;&nbsp;&nbsp;&nbsp;从我学习 Web 以来，无数前辈告诉我，Web 有三大基石，JS 控制行为，HTML 控制结构，CSS 控制样式。我一直再想 为什么要分为 3 个语言？为什么不能合成一个语言？或者说 就没有更合适的吗？在这几年的 Web 发展中，页面从 MVC 到 现在的 MVVC，结构正在发生着改变，但 其根本 不过是造了一个又一个 完美的轮子。我们为什么就不能打破传统呢？让 前端的 三大基石 变成一座大山呢 ？&nbsp;&nbsp;&nbsp;&nbsp;请试想一下，那该是个怎样的世界。 以上便是 Less 的特性总结，希望本文能对你有所帮助。本文会同步更新在以下地方(已链接本人主页),欢迎你在常逛的网站中关注我。 掘金 简书 博客园 CSDN segmentfault 转载本站文章请注明作者和出处 tomotoes.com，请勿用于任何商业用途。深入Web全栈各项技术，坚持原创，文章更新虽不定，但只为质量而生。建议收藏这个坏掉的番茄 tomotoes.com ，愿陪你一起在全栈的道路上努力前行！ .post-content ol li > p:nth-child(1){font-weight:bold;color:#555;text-shadow: rgb(207, 207, 207) 0 0 1px;}","tags":[{"name":"Less","slug":"Less","permalink":"http://tomotoes.com/blog/tags/Less/"}]},{"title":"VSCode之高效快捷键","date":"2017-12-05T08:40:11.000Z","path":"/posts/8c0be06/","text":"绝对福利,不容错过！ 前言常言道：“工欲善其事必先利其器”，而我的器便是 VSCode ，这是一款高颜值的编辑器。不过在经过长时间的使用后，发现总有些一些快捷键令人难以接受。遂花了一天的时间，将快捷键全部调整了一遍，总结如下： 底部有源文件,可供你替换 正文编辑 Alt + Enter 跳转到下一个编辑点 Ctrl + A 全选 Ctrl + Shift + A Autoprefixer/Eslint Ctrl + Shift + Z 重做 Ctrl + R 注释当前行 Ctrl + T格式化 Ctrl + Y选择下一个匹配 Ctrl + Shift + Y选择所有匹配项 Ctrl + /增加注释 Ctrl + J连接下一行 Ctrl + Shift + J将标签内的内容全部缩成一行 Ctrl + P交换字符位置 Ctrl + G 浏览markdown 开启LiveServer Alt + G 关闭LiveServer Alt + .Emmet 命令列表 Alt + z自动换行 Ctrl + L选中一行 Ctrl + Shift + L跳转行 Ctrl + D删除行 Ctrl + F搜索 Ctrl + H替换 Ctrl + Shift + C向下复制一行 Ctrl + Shift + V打开Ditto Ctrl + Enter在当前行下边插入一行 Shift + Enter在当前行上方插入一行 Alt + Up/Down移动行 Ctrl + Alt + down列编辑 Ctrl + Shift + []折叠代码 Alt + X光标撤销 Ctrl + F5Code Run Ctrl + Shift + Space显示参数 Ctrl + 左键多处编辑 Ctrl + Shift + 左键块选择 Ctrl + Alt + Up/Down指针上移/下移 Alt + Shift + Right选中标签内中的内容 Alt + Shift + Left选中标签中的第一个子标签 Alt + Left移除包裹标签 Alt + Right键入标签名 包围所在标签 与 多光标一起使用 威力无穷 Alt + Shift +Enter将当前标签替换成键入的标签 Ctrl + Shift + J将标签内的内容全部缩成一行 Alt + Enter跳转到下一个编辑点 F12移动到定义处 Alt+F12定义处缩略图,可更改 Shift+F12列出所有的引用 命令窗口 F1 Ctrl + Shift + P Ctrl + E 输入 &gt; Ctrl + P 输入 &gt; 其中在 Ctrl + E / P 窗口中还可以这么玩 : 直接输入文件名，跳转到文件 ? 列出当前可执行的动作 ! 显示 Errors或 Warnings，也可以 Ctrl+Shift+M : 跳转到行数 @ 跳转到 symbol（搜索变量或者函数），也可以 Ctrl+Shift+O 直接进入 @ 根据分类跳转 symbol，查找属性或函数，也可以 Ctrl+Shift+O 后输入:进入 # 根据名字查找 symbol 项目 Ctrl + O 打开文件 Ctrl + Shift + O 打开文件夹 Ctrl + Alt + O 打开本地Git项目 Ctrl + B 打开最近项目 Alt + R (需先Ctrl + Shift + E) 打开聚焦文件的路径 标签 Ctrl + Shift + T 打开关闭后的标签 Ctrl + Num 聚焦到某个标签 Ctrl + W 关闭当前标签 调试 F5 调试 Shift + F5 运行 不调试 F10 单步执行 注意事项 先关掉所有的Chrome 启动调试 Launch to Chrome 可以使用断点，单独调试 还可以像Chrome调试台那样 去使用调试$(&quot;#header&quot;).style.background获取 header的背景颜色$ document.querySelector 。 $$相当于 document.querySelectorAll 。 $_ 返回上一个表达式的值 dirconsole.dir keys取对象的键名, 返回键名组成的数组 values(object)返回一个数组，该数组包含属于指定对象的所有属性值。dirxml(object)$(&quot;#header&quot;).css(&quot;color&quot;,&quot;red&quot;);使用页面中的框架,记录jQuery1 + 2普通输入 function()&#123;alert(1);&#125;函数 设置 Ctrl + , 设置 Ctrl + Shift + , 快捷键 Ctrl + Alt + , 代码片段 Alt + F2 选择主题 Alt + F1 改变语言 设置如果想快速找到插件的设置 只要打开设置 看看分类就好了然后右键 前面的复制到设置！然后在自己的设置前面 也可以选择编辑 窗口 Ctrl + M 打开新窗口 Ctrl + Shift +M 重新载入 Ctrl + \\ 多栏编辑 Ctrl + Shift + \\ 切换多栏布局 Alt + W 只保留当前栏 Alt + A 当前栏增大视图 Alt + Num 聚焦到第Num个栏 Booksmarks Ctrl + Q 切换书签 Ctrl + Shift + Q 跳转到下一个书签 Ctrl + Alt + Q跳转到上一个书签 Ctrl + Shift + Alt + Q 书签列表 F1 + Clear remove all bookmarks in the current file清除当前文件的所有标签 F1 + Clear from All Files remove all bookmarks from all files 清除所有标签 文件 Ctrl + S 保存当前文件 Ctrl + Shift +S 保存所有文件 Ctrl + Alt + S 另存为 Ctrl + N 新建文件 Ctrl + Shift + N 新建文件夹 侧边栏 Ctrl + Shift + E 聚焦到资源管理器 Ctrl + Shift + F 全局搜索 Ctrl + Shift + D 调试代码 Ctrl + Shift + G Git版本库 Ctrl + Shift + X 插件商场 Ctrl + Shift + B 切换侧边栏 Ctrl + Shift + H 全局替换 底栏 Ctrl + Shift + W 问题 F8下一个错误/警告 Shift + F8上一个错误/警告 Ctrl + Shift + R 调试控制台 Ctrl + Shift + U 输出 Alt + Q 终端 Ctrl+↑ / ↓上下滚动 Markdown Alt + B 粗体 Ctrl + i 斜体 Ctrl + Shift + [/] 增加标题等级 Ctrl + G 浏览视图 右键Markdown视图 保存多种类型 其他特性 悬停提示 文件拖拽移动 双击变量 高亮匹配相同词 code ./ 使用VSCode打开当前文件 F11 全屏 文件右键打开资源管理栏 Ctrl+ Shift +E 右键 在资源管理器中打开 在终端打开 选择以比较 然后在选择一个文件 即可进行比较 复制路径 Alt + Shift+C Git 查看该文件的历史 Git F1 View Git History (git log) (git.viewHistory) View File History (git.viewFileHistory) View Line History (git.viewLineHistory) Alt + F3查看文件更改 NPM &amp;&amp; Task Ctrl + I导入模块 Alt + F5运行脚本 Ctrl+u运行任务 源文件点击显/隐源文件 [ &#123; \"key\": \"ctrl+l\", \"command\": \"expandLineSelection\", \"when\": \"editorTextFocus\" &#125;, &#123; \"key\": \"alt+x\", \"command\": \"cursorUndo\", \"when\": \"editorTextFocus\" &#125;, &#123; \"key\": \"ctrl+shift+f\", \"command\": \"workbench.view.search\", \"when\": \"!searchViewletVisible\" &#125;, &#123; \"key\": \"ctrl+r\", \"command\": \"editor.action.commentLine\", \"when\": \"editorTextFocus &amp;&amp; !editorReadonly\" &#125;, &#123; \"key\": \"ctrl+d\", \"command\": \"editor.action.deleteLines\", \"when\": \"editorTextFocus &amp;&amp; !editorReadonly\" &#125;, &#123; \"key\": \"alt+f1\", \"command\": \"workbench.action.editor.changeLanguageMode\" &#125;, &#123; \"key\": \"shift+enter\", \"command\": \"editor.action.insertLineBefore\", \"when\": \"editorTextFocus &amp;&amp; !editorReadonly\" &#125;, &#123; \"key\": \"ctrl+shift+c\", \"command\": \"editor.action.copyLinesDownAction\", \"when\": \"editorTextFocus &amp;&amp; !editorReadonly\" &#125;, &#123; \"key\": \"alt+r\", \"command\": \"revealFileInOS\", \"when\": \"explorerViewletFocus &amp;&amp; explorerViewletVisible\" &#125;, &#123; \"key\": \"ctrl+g\", \"command\": \"extension.liveServer.goOnline\", \"when\": \"editorTextFocus &amp;&amp; editorLangId != 'markdown'\" &#125;, &#123; \"key\": \"alt+g\", \"command\": \"extension.liveServer.goOffline\", \"when\": \"editorTextFocus &amp;&amp; editorLangId != 'markdown'\" &#125;, &#123; \"key\": \"ctrl+q\", \"command\": \"bookmarks.toggle\", \"when\": \"editorTextFocus\" &#125;, &#123; \"key\": \"ctrl+shift+q\", \"command\": \"bookmarks.jumpToNext\", \"when\": \"editorTextFocus\" &#125;, &#123; \"key\": \"ctrl+alt+q\", \"command\": \"bookmarks.jumpToPrevious\", \"when\": \"editorTextFocus\" &#125;, &#123; \"key\": \"ctrl+shift+alt+q\", \"command\": \"bookmarks.listFromAllFiles\" &#125;, &#123; \"key\": \"ctrl+y\", \"command\": \"editor.action.addSelectionToNextFindMatch\", \"when\": \"editorFocus\" &#125;, &#123; \"key\": \"ctrl+shift+o\", \"command\": \"workbench.action.files.openFolder\" &#125;, &#123; \"key\": \"ctrl+/\", \"command\": \"editor.action.blockComment\", \"when\": \"editorTextFocus &amp;&amp; !editorReadonly\" &#125;, &#123; \"key\": \"ctrl+shift+s\", \"command\": \"workbench.action.files.saveAll\" &#125;, &#123; \"key\": \"ctrl+alt+s\", \"command\": \"workbench.action.files.saveAs\" &#125;, &#123; \"key\": \"ctrl+shift+y\", \"command\": \"editor.action.changeAll\", \"when\": \"editorTextFocus &amp;&amp; !editorReadonly\" &#125;, &#123; \"key\": \"ctrl+t\", \"command\": \"HookyQR.beautify\", \"when\": \"editorFocus\" &#125;, &#123; \"key\": \"ctrl+j\", \"command\": \"editor.action.joinLines\", \"when\": \"editorFocus\" &#125;, &#123; \"key\": \"ctrl+m\", \"command\": \"editor.action.insertSnippet\", \"when\": \"editorFocus\" &#125;, &#123; \"key\": \"alt+enter\", \"command\": \"editor.action.inspectTMScopes\", \"when\": \"editorFocus\" &#125;, &#123; \"key\": \"ctrl+p\", \"command\": \"editor.action.transposeLetters\", \"when\": \"editorFocus\" &#125;, &#123; \"key\": \"ctrl+shift+a\", \"command\": \"eslint.executeAutofix\", \"when\": \"editorFocus\" &#125;, &#123; \"key\": \"ctrl+n\", \"command\": \"explorer.newFile\", \"when\": \"editorFocus\" &#125;, &#123; \"key\": \"ctrl+shift+n\", \"command\": \"explorer.newFolder\", \"when\": \"editorFocus\" &#125;, &#123; \"key\": \"ctrl+alt+,\", \"command\": \"workbench.action.openSnippets\", \"when\": \"editorFocus\" &#125;, &#123; \"key\": \"alt+f2\", \"command\": \"workbench.action.selectTheme\", \"when\": \"editorFocus\" &#125;, &#123; \"key\": \"ctrl+m\", \"command\": \"workbench.action.newWindow\" &#125;, &#123; \"key\": \"ctrl+shift+,\", \"command\": \"workbench.action.openGlobalKeybindings\" &#125;, &#123; \"key\": \"ctrl+u\", \"command\": \"workbench.action.tasks.runTask\" &#125;, &#123; \"key\": \"f11\", \"command\": \"workbench.action.toggleZenMode\" &#125;, &#123; \"key\": \"ctrl+f5\", \"command\": \"code-runner.run\" &#125;, &#123; \"key\": \"ctrl+i\", \"command\": \"npm-intellisense.import\" , \"when\": \"editorLangId != 'markdown'\" &#125;, &#123; \"key\": \"alt+f5\", \"command\": \"npm-script.run\" &#125;, &#123; \"key\": \"shift+f5\", \"command\": \"workbench.action.debug.run\", \"when\": \"!inDebugMode\" &#125;, &#123; \"key\": \"ctrl+shift+\\\\\", \"command\": \"workbench.action.toggleEditorGroupLayout\" &#125;, &#123; \"key\": \"ctrl+shift+b\", \"command\": \"workbench.action.toggleSidebarVisibility\" &#125;, &#123; \"key\": \"ctrl+g\", \"command\": \"markdown-preview-enhanced.openPreview\", \"when\": \"editorLangId == 'markdown'\" &#125;, &#123; \"key\": \"ctrl+shift+l\", \"command\": \"workbench.action.gotoLine\" &#125;, &#123; \"key\": \"alt+a\", \"command\": \"workbench.action.increaseViewSize\" , \"when\": \"editorLangId != 'markdown'&amp;&amp;editorFocus\" &#125;, &#123; \"key\": \"alt+w\", \"command\": \"workbench.action.joinTwoGroups\" , \"when\": \"editorFocus\" &#125;, &#123; \"key\": \"ctrl+1\", \"command\": \"workbench.action.openEditorAtIndex1\" &#125;, &#123; \"key\": \"ctrl+2\", \"command\": \"workbench.action.openEditorAtIndex2\" &#125;, &#123; \"key\": \"ctrl+3\", \"command\": \"workbench.action.openEditorAtIndex3\" &#125;, &#123; \"key\": \"ctrl+4\", \"command\": \"workbench.action.openEditorAtIndex4\" &#125;, &#123; \"key\": \"ctrl+5\", \"command\": \"workbench.action.openEditorAtIndex5\" &#125;, &#123; \"key\": \"ctrl+6\", \"command\": \"workbench.action.openEditorAtIndex6\" &#125;, &#123; \"key\": \"ctrl+7\", \"command\": \"workbench.action.openEditorAtIndex7\" &#125;, &#123; \"key\": \"ctrl+8\", \"command\": \"workbench.action.openEditorAtIndex8\" &#125;, &#123; \"key\": \"ctrl+9\", \"command\": \"workbench.action.openEditorAtIndex9\" &#125;, &#123; \"key\": \"alt+1\", \"command\": \"workbench.action.focusFirstEditorGroup\" &#125;, &#123; \"key\": \"alt+2\", \"command\": \"workbench.action.focusSecondEditorGroup\" &#125;, &#123; \"key\": \"alt+3\", \"command\": \"workbench.action.focusThirdEditorGroup\" &#125;, &#123; \"key\": \"ctrl+shift+m\", \"command\": \"workbench.action.reloadWindow\" &#125;, &#123; \"key\": \"alt+.\", \"command\": \"workbench.action.showEmmetCommands\", \"when\": \"editorLangId != 'markdown'&amp;&amp;editorFocus\" &#125;, &#123; \"key\": \"alt+enter\", \"command\": \"editor.emmet.action.nextEditPoint\", \"when\": \"editorFocus\" &#125;, &#123; \"key\": \"ctrl+shift+j\", \"command\": \"editor.emmet.action.mergeLines\", \"when\": \"editorFocus\" &#125;, &#123; \"key\": \"alt+left\", \"command\": \"editor.emmet.action.removeTag\", \"when\": \"editorFocus\" &#125;, &#123; \"key\": \"alt+right\", \"command\": \"editor.emmet.action.wrapWithAbbreviation\", \"when\": \"editorFocus\" &#125;, &#123; \"key\": \"alt+shift+right\", \"command\": \"editor.emmet.action.balanceOut\", \"when\": \"editorFocus\" &#125;, &#123; \"key\": \"alt+shift+left\", \"command\": \"editor.emmet.action.balanceIn\", \"when\": \"editorFocus\" &#125;, &#123; \"key\": \"alt+shift+enter\", \"command\": \"editor.emmet.action.updateTag\", \"when\": \"editorFocus\" &#125;, &#123; \"key\": \"ctrl+shift+w\", \"command\": \"workbench.actions.view.problems\" &#125;, &#123; \"key\": \"alt+q\", \"command\": \"workbench.action.terminal.toggleTerminal\" &#125;, &#123; \"key\": \"ctrl+shift+r\", \"command\": \"workbench.debug.action.toggleRepl\" &#125;, &#123; \"key\": \"ctrl+shift+a\", \"command\": \"autoprefixer.execute\", \"when\": \"editorTextFocus &amp;&amp; editorLangId != 'javascript'\" &#125;, &#123; \"key\": \"ctrl+alt+o\", \"command\": \"gitProjectManager.openProject\" &#125;, &#123; \"key\": \"ctrl+b\", \"command\": \"workbench.action.openRecent\" &#125;, &#123; \"key\": \"alt+b\", \"command\": \"markdown.extension.editing.toggleBold\", \"when\": \"editorTextFocus &amp;&amp; editorLangId == 'markdown'\" &#125;, &#123; \"key\": \"alt+c\", \"command\": \"markdown-preview-enhanced.syncPreview\", \"when\": \"editorLangId == 'markdown'\" &#125;] 结束如果你的机器是Windows系统，同时也是VSCode重度使用者，不妨试试我的快捷键，可以让你的操作彻底飞起来~ 本文会同步更新在以下地方(已链接本人主页),欢迎你在常逛的网站中关注我。 掘金 简书 博客园 CSDN segmentfault 转载本站文章请注明作者和出处 tomotoes.com，请勿用于任何商业用途。深入Web全栈各项技术，坚持原创，文章更新虽不定，但只为质量而生。建议收藏这个坏掉的番茄 tomotoes.com ，愿陪你一起在全栈的道路上努力前行！ .Key{color:#999;font-size:98%;}.button {color: #666; background-color: #EEE; border-color: #EEE; text-decoration: none; text-align: center; line-height: 40px; height: 40px; padding: 0 40px; margin: 0; display: inline-block; border: none; -webkit-box-sizing: border-box; box-sizing: border-box; -webkit-transition-property: all; transition-property: all; -webkit-transition-duration: .3s; transition-duration: .3s; font-size: 18px; font-weight: bold; font-family: @font-custom; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; letter-spacing: 3px; } .button:visited {color: #666; } .button:hover, .button:focus {background-color: #f6f6f6; text-decoration: none; outline: none; } .button:active, .button.active, .button.is-active {text-shadow: 0 1px 0 rgba(255, 255, 255, 0.3); text-decoration: none; background-color: #eeeeee; border-color: #cfcfcf; color: #d4d4d4; -webkit-transition-duration: 0s; transition-duration: 0s; -webkit-box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.2); box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.2); } .button.disabled, .button.is-disabled, .button:disabled {top: 0 !important; background: #EEE !important; border: 1px solid #DDD !important; text-shadow: 0 1px 1px white !important; color: #CCC !important; -webkit-box-shadow: none !important; box-shadow: none !important; opacity: .8 !important; } .button-primary {background-color: #1B9AF7; border-color: #1B9AF7; color: #FFF; } .button-primary:visited {color: #FFF; } .button-primary:hover, .button-primary:focus {background-color: #4cb0f9; border-color: #4cb0f9; color: #FFF; } .button-primary:active, .button-primary.active, .button-primary.is-active {background-color: #2798eb; border-color: #2798eb; color: #0880d7; } .button-rounded {border-radius: 4px; } .button-border.button-primary, .button-primary.button-border-thin, .button-primary.button-border-thick, .button-border-thin.button-primary, .button-border-thick.button-primary {color: #1B9AF7; } .button-border.button-primary:hover, .button-primary.button-border-thin:hover, .button-primary.button-border-thick:hover, .button-border.button-primary:focus, .button-primary.button-border-thin:focus, .button-primary.button-border-thick:focus, .button-border-thin.button-primary:hover, .button-border-thin.button-primary:focus, .button-border-thick.button-primary:hover, .button-border-thick.button-primary:focus {background-color: rgba(76, 176, 249, 0.9); color: rgba(255, 255, 255, 0.9); } .button-border.button-primary:active, .button-primary.button-border-thin:active, .button-primary.button-border-thick:active, .button-border.button-primary.active, .button-primary.active.button-border-thin, .button-primary.active.button-border-thick, .button-border.button-primary.is-active, .button-primary.is-active.button-border-thin, .button-primary.is-active.button-border-thick, .button-border-thin.button-primary:active, .button-border-thin.button-primary.active, .button-border-thin.button-primary.is-active, .button-border-thick.button-primary:active, .button-border-thick.button-primary.active, .button-border-thick.button-primary.is-active {background-color: rgba(39, 152, 235, 0.7); color: rgba(255, 255, 255, 0.5); opacity: .3; } .button-3d {position: relative; top: 0; -webkit-box-shadow: 0 7px 0 #bbbbbb, 0 8px 3px rgba(0, 0, 0, 0.2); box-shadow: 0 7px 0 #bbbbbb, 0 8px 3px rgba(0, 0, 0, 0.2); } .button-3d:hover, .button-3d:focus {-webkit-box-shadow: 0 7px 0 #bbbbbb, 0 8px 3px rgba(0, 0, 0, 0.2); box-shadow: 0 7px 0 #bbbbbb, 0 8px 3px rgba(0, 0, 0, 0.2); } .button-3d:active, .button-3d.active, .button-3d.is-active {top: 5px; -webkit-transition-property: all; transition-property: all; -webkit-transition-duration: .15s; transition-duration: .15s; -webkit-box-shadow: 0 2px 0 #bbbbbb, 0 3px 3px rgba(0, 0, 0, 0.2); box-shadow: 0 2px 0 #bbbbbb, 0 3px 3px rgba(0, 0, 0, 0.2); } .button-3d.button-primary {-webkit-box-shadow: 0 7px 0 #0880d7, 0 8px 3px rgba(0, 0, 0, 0.3); box-shadow: 0 7px 0 #0880d7, 0 8px 3px rgba(0, 0, 0, 0.3); } .button-3d.button-primary:hover, .button-3d.button-primary:focus {-webkit-box-shadow: 0 7px 0 #077ace, 0 8px 3px rgba(0, 0, 0, 0.3); box-shadow: 0 7px 0 #077ace, 0 8px 3px rgba(0, 0, 0, 0.3); } .button-3d.button-primary:active, .button-3d.button-primary.active, .button-3d.button-primary.is-active {-webkit-box-shadow: 0 2px 0 #0662a6, 0 3px 3px rgba(0, 0, 0, 0.2); box-shadow: 0 2px 0 #0662a6, 0 3px 3px rgba(0, 0, 0, 0.2); } codeHide.addEventListener(\"click\",function(){$(\"#sourceCode\").slideToggle(\"slow\")});","tags":[{"name":"VSCode","slug":"VSCode","permalink":"http://tomotoes.com/blog/tags/VSCode/"},{"name":"快捷键","slug":"快捷键","permalink":"http://tomotoes.com/blog/tags/快捷键/"}]},{"title":"Webpack飞行手册","date":"2017-11-30T11:16:57.000Z","path":"/posts/4d6f8cc5/","text":"现在是一个 Web 技术蓬发的时代。 前言在学习 Webpack 之前，我们需要了解一个概念：模块。 何为模块？如果你曾学过 Java , C# 之类的语言，一定会知道 Java 中的 import 或 C# 中的 using 吧？比如：我想在 C# 中进行数据库操作，我只需要在代码头部加上 下面这两段代码即可。using System.Data;using System.Data.SqlClient; 这两段代码可以看成 两个与数据库操作相关的模块。当我们需求是数据库，或者是读取 IO 等其他操作，我们便加载其他不同的模块。很明显，这实现了编程中的一个非常重要的功能 按需加载。 在前端中 模块又该如何定义呢？按照我个人的理解： 在 HTML 中 模块 便是一个组件 &lt;div class=\"layer\"&gt; &lt;div&gt;&lt;%= name %&gt;&lt;/div&gt; &lt;% for(var i = 0; i &lt; People.length;++i) &#123; %&gt; &lt;%= People[i] %&gt; &lt;% &#125; %&gt;&lt;/div&gt; 在 CSS 中 模块 便是一个局部样式 header&#123; display:block;&#125;header h1&#123; font-size: 60px;&#125; 在 Javascript 中 模块 便是一个封装着方法或数据的脚本文件 let People = &#123; name: \"Simon\" &#125; ;module.exports = People; 而我们又该怎样实现 在前端中加载模块呢？下面是两个很常见的例子： 在 Less 中 @import \"header\";@import \"layout\";@import \"footer\"; 在 Javascript // CommonJSconst $ = require(\"jQuery\");//es6let People = &#123; name: \"Simon\" &#125; ;module.exports = People;import \"./layer.less\";import tpl from \"./layer.ejs\"; 如果你直接运行以上代码，浏览器并不会解析，这个时候，就要依靠 Webpack 了！ Webpack是什么Webpack 是一款目前非常流行的前端模块打包工具，可以将项目中所加载的模块进行打包，以及将 一些浏览器不支持的语言进行转换。 Webpack 的打包原理是 先找到入口文件，递归探索出所有依赖的模块，最后 利用 Loader 进行不同文件类型的处理，打包成一个 Javascript 文件。 其中，Webpack 的两个最核心原理分别是： 一切皆模块 按需加载 当然 Webpack 的作用不止加载模块这么简单，前端的常用需求通常都可以实现：利用 Loader 转换 es6 、 Less 、 Typescript ，还可利用插件 开发多页面应用,等等诸多强大功能。 正文下面，我将讲解 Webpack 的具体使用和配置。 安装我一般在项目中使用 Webpack，都是先执行下面这四条命令进行 Webpack 的安装 npm install -g webpack在全局安装 Webpack，第一次使用时 执行 npm install --save-dev webpack将 Webpack 安装到你的项目 npm initnpm初始化，会询问你的项目信息，可以回车跳过 npm install --save-dev webpack-dev-server 在当前项目，安装 Webpack 服务器 安装完成后，便是建立配置文件了。 基本配置在项目根目录下新建名为 webpack.config.js 的文件，基本上 一个配置文件的大体结构就是下面这样：modules.export=&#123; entry:&#123; /* 入口文件 */ &#125;, output:&#123; /* 出口文件 */ &#125;, module:&#123; /* Loader */ rules:[&#123;&#125;,&#123;&#125;,&#123;&#125;] &#125;, plugins:[ /* 插件 */ ], devtool: ... devServer: &#123;...&#125; resolve:&#123;...&#125;&#125; 我们下面就先分析 modules.export 各个属性 入口entry代表是入口文件，Webpack 工作的开始。Webpack 会递归的探索出 入口文件中所依赖的模块，并按照顺序 利用 Loader 进行处理。官网给出了其 3 种数据类型： 字符串 entry: \"app.js\"; 数组数组中的每一项都会被打包，形成互不依赖的文件 entry: [\"app.js\",\"main.js\"]; 对象对象中的每一个属性都会被打包，形成互不依赖的文件 entry:&#123; app: \"./src/js/app.js\", main: \"./src/js/main.js\"&#125; 一般入口文件中多是 import 或者 require 等模块导入命令。 出口output顾名思义，Webpack打包后文件的具体配置常用的属性有 4 个 path: ${__dirname }/dist打包后文件所在路径 filename: “js/[name].js”打包后文件的名字，这里有 4 种常用的写法 自定义 [name].js代表的便是入口的文件名 [hash].js此次打包后的hash值 [chunkhash]该块打包后的hash值 publicPath: &quot;http://cdn.com/&quot; 上线时的公共路径，主要应用于线上 chunkFilename: ‘js/[name].js’ 按需加载模块时输出的文件名称 LoaderLoader 是 Webpack 中最振奋人心的东西了！将一切浏览器不支持的语言，处理成 浏览器可以支持。针对各个文件类型，都有各种的 Loader 等你去挖掘。 Loader 的工作方式 是从右向左执行，链式地按照顺序进行编译。loader 链中的第一个返回值给下一个 loader，在最后一个 loader，返回所预期的结果。 loader 可以是同步或异步函数，也可使用 options 对象去接受配置参数。 基础结构 module:&#123; rules:[ &#123; test:/\\.xxx$/,//以xxx结尾的文件 loader: \"xxx-loader\", exclude: &#123;排除的路径&#125;, include: &#123;包含的路径&#125;, options: &#123;Loader配置&#125; &#125; ]&#125; 可以很清楚的看到，Loader 利用 test 的正则 找到各个类型文件，然后使用 loader 进行处理，便可转换成浏览器支持的文件。 其中我知道的 loader 的写法有两种: 每一个 loader 都是一个对象 loaders:[ &#123;loader:\"style-loader\"&#125;, &#123; loader: \"css-loader?modules\", options: &#123; importLoaders: 1 &#125; &#125;, &#123;loader: \"less-loader\"&#125;] 使用 ! 号拼接的写法 loader: \"style-loader!css-loader?importLoaders=1!less-loader\" 下面介绍三个 前端必备的 Loader 方式 css style-loader通过注入&lt;style&gt;标签将 CSS 添加到 DOM npm install style-loader --save-dev css-loadercss-loader像import / require（）一样解释@import和url（）并解析它们。 npm install css-loader --save-dev postcss-loader补充 不兼容的css属性 的浏览器前缀 npm install post-loader --save-dev less-loader将Less 转换成 CSS npm install less --save-devnpm install less-loader --save-dev javascriptbabel主要用于将 es6 转换成 es2015npm install --save-dev babel-core babel-loader babel-preset-es2015 图片 &amp; 字体 file-loader用于压缩文件 npm install --save-dev file-loader url-loader如果文件下于 规定限制，将会转换成 二进制编码 npm install --save-dev url-loader ejs另外 我想介绍一下 自己常用的 ejs-loader 配置 npm install --save-dev ejs-loader test:/\\.ejs$/ , loader:\"ejs-loader\", 使用 &lt;div class=\"layer\"&gt; &lt;div&gt;&lt;%= name %&gt;&lt;/div&gt; &lt;% for(let i = 0; i &lt; Array.length;++i) &#123; %&gt; &lt;%= Array[i] %&gt; &lt;% &#125; %&gt;&lt;/div&gt; //入口文件import tpl from \"./layer.ejs\";document.body.innerHTML = tpl(&#123; name:\"Simon\", arr:[\"Apple\",\"Xiaomi\"]&#125;); 运行 生成后的页面 ，便会发现 ejs 组件已经被加进去了，想象一下，我们在平时工作中是否可以把 一个轮播图，或者 排行榜 、评论 当成一个组件呢？ 插件plugins在日常工作中，我们使用 Loader 处理不同类型的文件，当有某种其他方面的需求时，比如 抽离 CSS 、生成多页面 HTML ，plugins 便派上了用场。 插件的使用，一般都要先 require 出来，然后在 plugins 属性中 进行初始化const htmlWebpackPlugin = require(\"html-webpack-plugin\");......plugins: [ new htmlWebpackPlugin(&#123;/* options */&#125;) ] 下面将介绍 一些工作中常用的插件 clean-webpack-plugin主要用于 打包之前 先清空 打包目录下的文件，防止文件混乱。 npm install --save-dev clean-webpack-plugin html-webpack-plugin主要用于生成HTML，可以规定 模板HTML，也可以为 模板传入参数，压缩文件等 npm install --save-dev html-webpack-plugin 这个插件可谓是 前端必备的，它的配置有很多new htmlWebpackPlugin(&#123; //打包后的文件名 filename: \"index.html\", //模板 template: \"index.html\", //为true自动生成script标签添加到html中 //或者写 body/head 标签名 inject: false,//js的注入标签 //通过&lt;%= htmlWebpackPlugin.options.title %&gt;引用 title: \"参数title\", //通过&lt;%= htmlWebpackPlugin.options.date %&gt; 引用 date: new Date() //网站的图标 favicon: 'path/to/yourfile.ico' //生成此次打包的hash //如果文件名中有哈希，便代表有 合理的缓冲 hash: true, //排除的块 excludeChunks: [''], //选中的块 与入口文件相关 chunks: ['app','people'], //压缩 minify:&#123; removeComments: true, collapseWhitespace: true, removeRedundantAttributes: true, useShortDoctype: true, removeEmptyAttributes: true, removeStyleLinkTypeAttributes: true, keepClosingSlash: true, minifyJS: true, minifyCSS: true, minifyURLs: true, &#125; &#125;), 那么问题来了，我们在模板文件中 又该怎样使用参数呢？直接按照 ejs 的语法写入 html 文件即可！&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;%= htmlWebpackPlugin.options.date %&gt;&lt;/html&gt; 生成后的模板文件&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;Thu Dec 07 2017 10:01:58 GMT+0800 (中国标准时间)&lt;/html&gt; 另外，如果想生成 多页面应用，只需 将上面的配置，多复制几遍即可。new htmlWebpackPlugin(&#123; filename: \"index1.html\", &#125;new htmlWebpackPlugin(&#123; filename: \"index2.html\", &#125;new htmlWebpackPlugin(&#123; filename: \"index3.html\", &#125; UglifyJsPlugin主要用于压缩 Javascript 文件 npm i -D uglifyjs-webpack-plugin webpack.ProvidePlugin自动加载模块，全局使用变量，下面借助 官网的DEMO new webpack.ProvidePlugin(&#123; $: 'jquery', jQuery: 'jquery'&#125;)// in a module$('#item'); // &lt;= 起作用jQuery('#item'); // &lt;= 起作用// $ 自动被设置为 \"jquery\" 输出的内容 open-browser-webpack-plugin打开服务器后 会自动打开浏览器端口，用起来 很方便 HotModuleReplacementPlugin热更新插件 常用命令 webpack最基本的启动webpack命令。找到根目录下的webpack.config.js文件中的 entry属性，递归出所有项目中依赖的模块。 webpack -w监控代码变化，实时进行打包更新 webpack -p对打包后的文件进行压缩，利用线上发布 webpack -d提供SourceMaps，方便调试代码 webpack –colors输出结果带彩色，可以更详细的查看信息 webpack –profile输出性能数据，可以看到每一步的耗时 前两个命令使用频率会较大 devtool不知道你现在时候有没有一个想法？ webpack 打包后的文件就一定正确无误吗？ 如果发生错误的话，该怎么办呢？ devtool 属性 便提供了生成 sourcemap 的功能，具体有下面这些选项。 source-map此选项具有最完备的source map，但会减慢打包的速度； cheap-module-source-map生成一个不带列映射的map eval-source-map使用eval打包源文件模块，生成一个完整的source map。 cheap-module-eval-source-map这是最快生成source map的方法，生成后的Source Map 会和打包后的 JavaScript 文件同行显示，但没有列映射，所以慎用 devServer contentBase: “./dist”,本地服务器所加载的页面所在的目录 historyApiFallback: true,再找不到文件的时候默认指向index.html inline: true,当源文件改变时会自动刷新页面 hot: true,热加载开启 port:8080设置默认监听端口 resolve extensions: [“.js”, “.html”, “.css”, “.txt”,”less”,”ejs”,”json”],自动扩展文件后缀名，意味着我们require模块可以省略不写后缀名 alias: { Temp: path.resolve(__dirname, “src/templates/“) }模块别名定义，直接 require(‘AppStore’) 即可,方便后续直接引用别名 其他功能path常用于字符串拼接路径。const path = require(\"path\"); 有两个 API path.resolve()将相对路径转换成绝对路径 const aPath = path.resolve(\"__dirname\",\"js\",\"main.js\");// aPath = 当前目录下的 js 文件夹的 main.js 文件的路径 path.join()对路径进行拼接 const rPath = path.join(\"source\",\"js\",\"main.js\");// aPath = //source/js/main.js __dirnameNode.js 中的全局变量，代表的是 项目的当前路径。常与 path 结合使用。 热更新上面我们已经提过了 webpack -w 命令，它可以实时的监控 代码的改变，从而自动进行打包，但是 有个缺点 在于它不能及时的刷新界面。在我们 开启服务器后，是无法使用 此命令的，这个时候，如果你还想进行 自动打包，又想自动刷新界面，热更新 便是不二之选，另外 Webpack 只会热更新 发生改变的模块，不会重新加载整个页面，便可加快开发速度。 开启步骤： 修改 devServer属性 devServer: &#123; hot: true,//热加载开启 inline: true,//文件改变时会自动刷新页面&#125; 增加热更新插件 const webpack = require(\"webpack\");//Other propertyplugins: [ new webpack.HotModuleReplacementPlugin()] 另外，只有修改 依赖的项目，才会进行实时更新。 源文件个人总结了很长时间的 Webpack 配置，希望能对你有帮助。点击显/隐源文件 const path = require(\"path\"), webpack = require(\"webpack\"), htmlWebpackPlugin = require (\"html-webpack-plugin\"), ExtractTextPlugin = require (\"extract-text-webpack-plugin\"), marked = require(\"marked\"), renderer = new marked.Renderer(), CleanWebpackPlugin = require (\"clean-webpack-plugin\"), OpenBrowserPlugin = require (\"open-browser-webpack-plugin\"); const MyConfig = &#123; entry: &#123; app:\"./src/js/app.js\" &#125;, output: &#123; path: `$&#123;__dirname &#125;/dist`, filename: \"js/[name].js\" // 上线时的公共路径 // publicPath: \"http://cdn.com/\", // 按需加载模块时输出的文件名称 // chunkFilename: 'js/[name].js' &#125;, /* 生成调试用的 source-map */ devtool: \"eval-source-map\", devServer: &#123; contentBase: \"./dist\", //本地服务器所加载 的页面所在的目录 historyApiFallback: true, //再找不到文件 的时候默认指向index.html, inline: true,//当源文件改变时会自动刷新页面 hot: true,//热加载开启 port:8080// 设置默认监听端口 &#125;, resolve:&#123; //自动扩展文件后缀名，意味着我们require模块可 以省略不写后缀名 extensions: [\".js\", \".html\", \".css\", \".txt\",\"less\",\"ejs\",\"json\"], //模块别名定义，直接 require('AppStore') 即可,方便后续直接引用别名 alias: &#123; Temp: path.resolve(__dirname, \"src/templates/\") &#125; &#125;, module:&#123; rules:[ &#123; test: /\\.(less|css)?$/ , use:ExtractTextPlugin.extract(&#123; fallback: \"style-loader\", use:[ &#123; loader: \"css-loader? modules\", options: &#123; importLoaders: 1 &#125; &#125;, &#123; loader:\"postcss-loa der\", options:&#123;plugins: (loader) =&gt; [require (\"autoprefixer\")()] &#125; &#125;, &#123;loader: \"less-loader\"&#125; ] &#125;), exclude: path.resolve (__dirname,\"./node_modules\") &#125;, &#123; test: /\\.js$/ , loader:\"babel-loader\", exclude: path.resolve (__dirname,\"./node_modules\"), include: path.resolve (__dirname, \"./src\"), options: &#123;\"presets\": [\"latest\"] &#125; &#125;, &#123; test:/\\.html$/ , loader:\"html-loader\", include:path.resolve(__dirname, \"./src/layer\"), exclude: path.resolve (__dirname,\"./node_modules\") &#125;, &#123; test:/\\.ejs$/ , loader:\"ejs-loader\", include:path.resolve(__dirname, \"./src/layer\"), exclude: path.resolve (__dirname,\"./node_modules\") &#125;, &#123; test: /\\.(png|jpg|jpeg|gif|svg| woff|woff2|ttf|eot|otf)$/i, loaders: [ \"file-loader\", \"url-loader?limit=8192\",&#123; loader: \"image-webpack-loader\", options: &#123; gifsicle: &#123; interlaced: false &#125; , optipng: &#123; optimizationLevel: 7 &#125;, pngquant: &#123; quality: \"65-90\", speed: 4 &#125;, mozjpeg: &#123; progressive: true, quality: 65 &#125;, webp: &#123; quality: 75 &#125; &#125; &#125; ], exclude: path.resolve (__dirname,\"./node_modules\") &#125; ] &#125;, plugins: [ //打包前 先删除dist目录下的文件 new CleanWebpackPlugin( [\"dist\"], &#123; root: __dirname,//指定插件根目录 位置 verbose: true, //开启在控制台输出 信息 dry: false //启用删除文件 &#125; ), //生成html new htmlWebpackPlugin(&#123; filename: \"index.html\",//文件名 template: \"index.html\",//模板 inject: false,//js的注入标签 //这个配置项为true表示自动把打包出来的文 件通过自动生成script标签添加到html中 title: \"参数title\",//通过&lt;%= htmlWebpackPlugin.options.title %&gt; 引用 date: new Date()//通过&lt;%= htmlWebpackPlugin.options.date %&gt;引 用 //favicon: 'path/to/yourfile.ico' // excludeChunks: [''],//排除的块 // chunks: ['app','people']//选中的 块 /*minify:&#123; //压缩 removeComments: true, collapseWhitespace: true, removeRedundantAttributes: true, useShortDoctype: true, removeEmptyAttributes: true, removeStyleLinkTypeAttributes: true, keepClosingSlash: true, minifyJS: true, minifyCSS: true, minifyURLs: true, &#125;*/ &#125;), //防止CSS文件混乱，单独生成一个css文件 new ExtractTextPlugin(\"./css/[name] .min.css\"), //在每个生成的 chunk 顶部添加 banner new webpack.BannerPlugin (\"Anthor:Simon\"),//添加一个显示版权声明的插 件 new webpack.optimize.UglifyJsPlugin(&#123; compress:&#123;//额外的压缩选项 warnings:false &#125; // mangle: &#123; 排除不想要压缩的对象名称 // except: ['$super', '$', 'exports', 'require', 'module', '_'] // &#125;, &#125;),//压缩js //定义全局变量 new webpack.DefinePlugin(&#123; __DEV__: JSON.stringify(JSON.parse (process.env.DEBUG || \"false\")) &#125;), //使用ProvidePlugin加载的模块在使用时将不再 需要import和require进行引入 //全局自动加载模块 new webpack.ProvidePlugin(&#123; $: \"jquery\", jQuery: \"jquery\" &#125;), //打开服务器后 会自动打开浏览器 new OpenBrowserPlugin(&#123;url: \"http://localhost:8080\"&#125;), //排序输出,为组件分配ID new webpack.optimize.OccurrenceOrderPlugin (), // 启用 HMR 热加载插件 new webpack.HotModuleReplacementPlugin (), // 打印日志信息时 webpack 默认使用模块的数 字 ID 指代模块，不便于 debug， // 这个插件可以将其替换为模块的真实路径 new webpack.NamedModulesPlugin() /*提取 Chunks中的公共内容 new webpack.optimize.CommonsChunkPlugin (&#123; name: [\"vendor\", \"manifest\"], // vendor libs + extracted manifest minChunks: Infinity, &#125;),*/ /*拷贝资源插件 适用于线上场景 new CopyWebpackPlugin([&#123; from: __dirname + '/src/public' &#125;]),*/ ] &#125;; module.exports = MyConfig; 结束语 本文会同步更新在以下地方(已链接本人主页),欢迎你在常逛的网站中关注我。 掘金 简书 博客园 CSDN segmentfault 转载本站文章请注明作者和出处 tomotoes.com，请勿用于任何商业用途。深入Web全栈各项技术，坚持原创，文章更新虽不定，但只为质量而生。建议收藏这个坏掉的番茄 tomotoes.com ，愿陪你一起在全栈的道路上努力前行！ .post-toc-link { line-height: 23px; padding: 2px 20px; } .post-content ol li:first-line { color: #999; font-weight: bold; } .button {color: #666; background-color: #EEE; border-color: #EEE; text-decoration: none; text-align: center; line-height: 40px; height: 40px; padding: 0 40px; margin: 0; display: inline-block; border: none; -webkit-box-sizing: border-box; box-sizing: border-box; -webkit-transition-property: all; transition-property: all; -webkit-transition-duration: .3s; transition-duration: .3s; font-size: 18px; font-weight: bold; font-family: @font-custom; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; letter-spacing: 3px; } .button:visited {color: #666; } .button:hover, .button:focus {background-color: #f6f6f6; text-decoration: none; outline: none; } .button:active, .button.active, .button.is-active {text-shadow: 0 1px 0 rgba(255, 255, 255, 0.3); text-decoration: none; background-color: #eeeeee; border-color: #cfcfcf; color: #d4d4d4; -webkit-transition-duration: 0s; transition-duration: 0s; -webkit-box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.2); box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.2); } .button.disabled, .button.is-disabled, .button:disabled {top: 0 !important; background: #EEE !important; border: 1px solid #DDD !important; text-shadow: 0 1px 1px white !important; color: #CCC !important; -webkit-box-shadow: none !important; box-shadow: none !important; opacity: .8 !important; } .button-primary {background-color: #1B9AF7; border-color: #1B9AF7; color: #FFF; } .button-primary:visited {color: #FFF; } .button-primary:hover, .button-primary:focus {background-color: #4cb0f9; border-color: #4cb0f9; color: #FFF; } .button-primary:active, .button-primary.active, .button-primary.is-active {background-color: #2798eb; border-color: #2798eb; color: #0880d7; } .button-rounded {border-radius: 4px; } .button-border.button-primary, .button-primary.button-border-thin, .button-primary.button-border-thick, .button-border-thin.button-primary, .button-border-thick.button-primary {color: #1B9AF7; } .button-border.button-primary:hover, .button-primary.button-border-thin:hover, .button-primary.button-border-thick:hover, .button-border.button-primary:focus, .button-primary.button-border-thin:focus, .button-primary.button-border-thick:focus, .button-border-thin.button-primary:hover, .button-border-thin.button-primary:focus, .button-border-thick.button-primary:hover, .button-border-thick.button-primary:focus {background-color: rgba(76, 176, 249, 0.9); color: rgba(255, 255, 255, 0.9); } .button-border.button-primary:active, .button-primary.button-border-thin:active, .button-primary.button-border-thick:active, .button-border.button-primary.active, .button-primary.active.button-border-thin, .button-primary.active.button-border-thick, .button-border.button-primary.is-active, .button-primary.is-active.button-border-thin, .button-primary.is-active.button-border-thick, .button-border-thin.button-primary:active, .button-border-thin.button-primary.active, .button-border-thin.button-primary.is-active, .button-border-thick.button-primary:active, .button-border-thick.button-primary.active, .button-border-thick.button-primary.is-active {background-color: rgba(39, 152, 235, 0.7); color: rgba(255, 255, 255, 0.5); opacity: .3; } .button-3d {position: relative; top: 0; -webkit-box-shadow: 0 7px 0 #bbbbbb, 0 8px 3px rgba(0, 0, 0, 0.2); box-shadow: 0 7px 0 #bbbbbb, 0 8px 3px rgba(0, 0, 0, 0.2); } .button-3d:hover, .button-3d:focus {-webkit-box-shadow: 0 7px 0 #bbbbbb, 0 8px 3px rgba(0, 0, 0, 0.2); box-shadow: 0 7px 0 #bbbbbb, 0 8px 3px rgba(0, 0, 0, 0.2); } .button-3d:active, .button-3d.active, .button-3d.is-active {top: 5px; -webkit-transition-property: all; transition-property: all; -webkit-transition-duration: .15s; transition-duration: .15s; -webkit-box-shadow: 0 2px 0 #bbbbbb, 0 3px 3px rgba(0, 0, 0, 0.2); box-shadow: 0 2px 0 #bbbbbb, 0 3px 3px rgba(0, 0, 0, 0.2); } .button-3d.button-primary {-webkit-box-shadow: 0 7px 0 #0880d7, 0 8px 3px rgba(0, 0, 0, 0.3); box-shadow: 0 7px 0 #0880d7, 0 8px 3px rgba(0, 0, 0, 0.3); } .button-3d.button-primary:hover, .button-3d.button-primary:focus {-webkit-box-shadow: 0 7px 0 #077ace, 0 8px 3px rgba(0, 0, 0, 0.3); box-shadow: 0 7px 0 #077ace, 0 8px 3px rgba(0, 0, 0, 0.3); } .button-3d.button-primary:active, .button-3d.button-primary.active, .button-3d.button-primary.is-active {-webkit-box-shadow: 0 2px 0 #0662a6, 0 3px 3px rgba(0, 0, 0, 0.2); box-shadow: 0 2px 0 #0662a6, 0 3px 3px rgba(0, 0, 0, 0.2); } codeHide.addEventListener(\"click\",function(){$(\"#sourceCode\").slideToggle(\"slow\");});","tags":[{"name":"Webpack","slug":"Webpack","permalink":"http://tomotoes.com/blog/tags/Webpack/"}]},{"title":"链式向前星","date":"2017-11-22T14:24:41.000Z","path":"/posts/7c714001/","text":"这是一种神奇的数据结构。 来源听说是某个高中Oi菊苣发明，%%% 应用有的时候有的图可能比较稀疏而且点数较多，邻接矩阵存不下，所以就要用到邻接表。邻接表用vector数组比较方便，但是vector比较慢。所以就有了链式向前星。 理解通过Head可以找到一个点的所有边,可以把Head理解为：链表的有实际含义的头节点 Head[N]永远保存最后一次输入的N点数组的下标值， Head[N]=idx; 意思是，保存N点的数组的下标值 而Next保存变化中的Head，但不保存最后一次的Head Edge[i].Next=Head[N]; Head[N]=idx++;从而Head与Next数组实现链式向前星的整个过程， Head相当于链表的有实际含义的头节点Next保存链表中的节点，但值得注意的是Next与Head都是通过保存下标值的方式实现的相当于：索引式链表。 End为终点，Value为权值，先不提而Next就相当于链表中的节点的位置，而没有头节点Head ,是无法提取的。保存下标值的方式很有趣，虽然开始理解起来有点怪。 int i=Head[S]; 此时i为最后一次保存S点数组的下标值，也就是最后一次输入的S点数据Edge[i].End 便为最后一次输入S点的终点，Value也是同理，而S作为出发点，不再多提 之后很关键，i=Edge[i].Next，要知道，每次的Edge[i].Next 都是由Head变化而来意思就是，i=Edge[i].Next,此后的 i为倒数第二次输入S点数组的下标值！i=Edge[Head[S]].Next;之后 i=Edge[Edge[Head[S]].Next;].Next;从而反复循环，直到，下一条边为0时，便是最后一次输入的S点的数组的下标值因为 最开始时，Edge[i].Next=Head[S]=0; 代码#include&lt;bits/stdc++.h&gt;using namespace std;const int maxn = 1e5;struct Node&#123; int End;//保存一个边的终点 int Next;//保存一个点（起点）的 除了最后一条（输入的顺序）之外的所有边的下标值 int Value;//保存一条边的权值 Node()&#123;&#125; Node(int a,int b,int c): End(a),Next(b),Value(c)&#123;&#125;&#125;Edge[maxn];bool Vis[maxn];int Head[maxn];//Head数组 为边的索引int Idx;queue&lt;int&gt;Map;inline void AddEdge(int Start,int End,int Value)&#123; Edge[Idx]=Node(End,Head[Start],Value); Head[Start]=Idx++;&#125;inline void Init()&#123; Idx=1; memset(Edge,0,sizeof(Edge)); memset(Vis,false,sizeof(Vis)); int N,M,x,y,z; scanf(\"%d%d\",&amp;N,&amp;M); while(M--)&#123; scanf(\"%d%d%d\",&amp;x,&amp;y,&amp;z); AddEdge(x,y,z); AddEdge(y,x,z); &#125; int Start; scanf(\"%d\",&amp;Start); Vis[Start]=true; Map.push(Start);&#125;inline void Traverse()&#123; while(!Map.empty())&#123; int Start=Map.front(); Map.pop(); for(int i=Head[Start];i;i=Edge[i].Next)&#123; printf(\"%d-&gt;%d=%d\\n\",Start,Edge[i].End,Edge[i].Value); if(!Vis[Edge[i].End])&#123; Map.push(Edge[i].End); Vis[Edge[i].End]=true; &#125; &#125; &#125;&#125;int main()&#123; Init(); Traverse(); return 0;&#125;/*输入样例5 51 2 32 3 43 4 54 5 65 6 71*/ 总结 优点：不会浪费数据空间;缺点：无法直接判断两个点是否是邻接点链式向前星是一个很不错的数据结构，利用数组索引特性，加上其他权值，存储了整个图。","tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://tomotoes.com/blog/tags/数据结构/"}]},{"title":"Hexo-入门篇","date":"2017-11-22T05:37:27.000Z","path":"/posts/b9fba72a/","text":"初识Hexo。 前提 熟悉git 拥有github page仓库 开始 在喜欢的目录下，新建blog文件夹 使用命令行，进入到blog文件夹比如，我把文件夹新建到C盘的hexo目录 cd c:/hexo/blog 在blog下安装hexo npm install -g hexo-cli hexo初始化 hexo init 安装npm npm install 如果安装很慢，或者安装失败，建议安装淘宝镜像npm 安装hexo部署 npm install --save hexo-deployer-git 选网站主题假如 你选的我这款网站主题，那么恭喜你，我已经准备好了简单明了的安装步骤 常用操作常用的hexo命令无非是6个 hexo clean 清空生成目录 hexo g 生成网站文件 hexo s 打开本地服务 localhost:4000 hexo d 将文件部署到github page hexo new xxx 新建一篇文章xxx hexo new page xxx 新建一个页面xxx 具体使用如果你想玩明白hexo，我真心建议： 了解hexo文档，至少能看懂 is_post() 这类的API 了解文件类型的使用方法，比如 我的主题是ejs+less，其他主题还有 sass stylus 之类的， ejs和less的学习成本都不高，如果要折腾博客，一定要非常明白 不要盲目折腾，自己舒服就行了，要有自己网站的style，配色 常见问题等你评论","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://tomotoes.com/blog/tags/Hexo/"}]},{"title":"常用Vim命令","date":"2017-11-22T02:20:04.000Z","path":"/posts/f85650f4/","text":"总结下 Vim 常用命令以及使用技巧。 移动命令h 左j 下 k 上 l 右space 右e 后单词尾w 后单词头b 前单词头^ 行首$ 行尾 &#123; 上段&#125; 下段H 屏幕上面M 屏幕中间L 屏幕下面gg 文件头G 文件尾zz 定位屏幕中间zt 定位屏幕顶部zb 定位屏幕底部mk 标记`k 转到标记 插入命令a 后字符A 行尾i 前字符I 行首s 当前字符S 当前行o 下一行O 上一行cc 当前行C 后字符至行尾c+op 查找/a 文章 n N?a 反向fa 当前行 ; ,Fa 反向ta 当前行的前一个字符 ; ,Ta 反向\\* 文章 n N\\# 反向 编辑% 括号匹配&lt;&lt; 缩进u 撤回p 粘贴P 粘贴至上一行yy 复制Y 复制rt 替换R 替换模式dd 剪切D 剪切至行尾J 连接下一行x 剪切当前字符X 剪切前一个字符zc 折叠zo 打开折叠v 选中字符V 选中当前行~ 切换当前字符大小写Vu 当前行小写VU 当前行大写 寄存器&quot;ayy 将当前数据复制到 a的寄存器&quot;ap 将 a的寄存器中的数据粘贴出来qa 寄存器a的开始记录op 操作~q 结束记录@a 使用寄存器&quot;_ 黑洞寄存器,说白了就是删除&quot;adiw &quot;aP 命令:w 保存文件:wq 退出编辑器，且保存文件:x 退出编辑器，且保存文件q! 放弃修改e! 放弃 修改后 载入文件 范围介词i Inside &quot;x&quot; =&gt; &quot;&quot;a Around &quot;x&quot; =&gt; f Forward x =&gt; ...o...t To x =&gt; ...ox...名词w Words Sentencep Paragraph b ()B &#123;&#125;[]&apos;&apos;&quot;&quot; 技巧动词 介词 名词d/y i/a/f/t c~/b/B/w/&quot;/&apos;动词 数词 名词2 d w数词 动词5 G4 jxp 交换两个字符yiw 拷贝一个单词 dk 删除当前行以及上一行dft 删除至t包括t 必备. 重复上一次命令","tags":[{"name":"Vim","slug":"Vim","permalink":"http://tomotoes.com/blog/tags/Vim/"}]},{"title":"HDU1874-畅通工程续","date":"2017-11-22T01:30:59.000Z","path":"/posts/421b1f9a/","text":"题目传送门 大一做的最短路模板题，很适合练手我分别利用了3种数据结构+Dijkstra/Floyd来解决，解题步骤具体如下： 邻接矩阵15ms#include&lt;bits/stdc++.h&gt;using namespace std;const int maxn = 2e2+5;const int INF = 0x3f3f3f3f;int Map[maxn][maxn];bool Vis[maxn];int Dis[maxn];int N,M,S,D;inline void Init()&#123; memset(Map,INF,sizeof(Map)); memset(Vis,false,sizeof(Vis)); memset(Dis,0,sizeof(Dis)); int x,y,z; while(M--)&#123; scanf(\"%d%d%d\",&amp;x,&amp;y,&amp;z); Map[x][y]=Map[y][x]=min(Map[x][y],z); &#125; scanf(\"%d%d\",&amp;S,&amp;D); for(int i=0;i&lt;N;++i)&#123; Dis[i]=Map[S][i]; &#125; Dis[S]=0; Vis[S]=true;&#125;inline void Dijkstra()&#123; for(int l=0;l&lt;N;++l)&#123; int Min=INF,k; for(int i=0;i&lt;N;++i)&#123; if(!Vis[i]&amp;&amp;Dis[i]&lt;Min)&#123; Min=Dis[i]; k=i; &#125; &#125; Vis[k]=true; if(Min!=INF)&#123; for(int j=0;j&lt;N;++j)&#123; if(!Vis[j]&amp;&amp;Dis[j]&gt;Dis[k]+Map[k][j])&#123; Dis[j]=Dis[k]+Map[k][j]; &#125; &#125; &#125; &#125; Dis[D]==INF?printf(\"-1n\"):printf(\"%dn\",Dis[D]);&#125;int main()&#123; while(~scanf(\"%d%d\",&amp;N,&amp;M))&#123; Init(); Dijkstra(); &#125; return 0;&#125; 邻接表15ms#include&lt;bits/stdc++.h&gt;using namespace std;const int maxn = 1e5;const int INF = 0x3f3f3f3f;struct Node&#123; int from,to,cost; Node(int a,int b,int c):from(a),to(b),cost(c)&#123;&#125;&#125;;vector&lt;Node&gt;Edges;vector&lt;int&gt;G[maxn];int Dis[maxn];int N,M,S,T;typedef pair&lt;int,int&gt; Pair;priority_queue&lt;Pair,vector&lt;Pair&gt;,greater&lt;Pair&gt; &gt;Q;inline void AddEdge(int x,int y,int z)&#123; Edges.push_back(Node(x,y,z)); G[x].push_back(Edges.size()-1);&#125;inline void Init()&#123; Edges.clear(); memset(Dis,INF,sizeof(Dis)); for(int i=0;i&lt;N;G[i++].clear()); int x,y,z; while(M--)&#123; scanf(\"%d%d%d\",&amp;x,&amp;y,&amp;z); AddEdge(x,y,z); AddEdge(y,x,z); &#125; scanf(\"%d%d\",&amp;S,&amp;T); Dis[S]=0; Q.push(Pair(0,S));&#125;inline void Dijkstra()&#123; int Now,Val,L; while(!Q.empty())&#123; Now=Q.top().second; Val=Q.top().first; Q.pop(); if(Dis[Now]&lt;Val)&#123;continue;&#125; L=G[Now].size(); for(int i=0;i&lt;L;++i)&#123; if(Dis[Edges[G[Now][i]].to]&gt;Dis[Now]+Edges[G[Now][i]].cost)&#123; Dis[Edges[G[Now][i]].to]=Dis[Now]+Edges[G[Now][i]].cost; Q.push(Pair(Dis[Edges[G[Now][i]].to],Edges[G[Now][i]].to)); &#125; &#125; &#125; Dis[T]==INF?printf(\"-1n\"):printf(\"%dn\",Dis[T]);&#125;int main()&#123; while(~scanf(\"%d%d\",&amp;N,&amp;M))&#123; Init(); Dijkstra(); &#125; return 0;&#125; 链式向前星0ms#include&lt;bits/stdc++.h&gt;using namespace std;const int maxn = 2017;const int INF = 0x3f3f3f3f;struct Node&#123; int End; int Value; int Front; Node()&#123;&#125; Node(int a,int b,int c):End(a),Front(b),Value(c)&#123;&#125;&#125;Edge[maxn];int Head[maxn];int Dis[maxn];int N,M,S,D,Idx;typedef pair&lt;int,int&gt;Pair;priority_queue&lt;Pair,vector&lt;Pair&gt;,greater&lt;Pair&gt; &gt;Q;inline void AddEdge(int S,int D,int V)&#123; Edge[Idx]=Node(D,Head[S],V); Head[S]=Idx++;&#125;inline void Init()&#123; Idx=0; memset(Head,-1,sizeof(Head)); memset(Dis,INF,sizeof(Dis)); int x,y,z; while(M--)&#123; scanf(\"%d%d%d\",&amp;x,&amp;y,&amp;z); AddEdge(x,y,z); AddEdge(y,x,z); &#125; scanf(\"%d%d\",&amp;S,&amp;D); Pair pNew; Dis[S]=0; pNew.first=0; pNew.second=S; Q.push(pNew);&#125;inline void Dijkstra()&#123; int Now,Val; while(!Q.empty())&#123; Now=Q.top().second; Val=Q.top().first; Q.pop(); if(Dis[Now]&lt;Val)continue; for(int i=Head[Now];~i;i=Edge[i].Front)&#123; if(Dis[Edge[i].End]&gt;Dis[Now]+Edge[i].Value)&#123; Dis[Edge[i].End]=Dis[Now]+Edge[i].Value; Q.push(Pair(Dis[Edge[i].End],Edge[i].End)); &#125; &#125; &#125; Dis[D]==INF?printf(\"-1n\"):printf(\"%dn\",Dis[D]);&#125;int main()&#123; while(~scanf(\"%d%d\",&amp;N,&amp;M))&#123; Init(); Dijkstra(); &#125; Floyd62ms#include&lt;bits/stdc++.h&gt;using namespace std;const int maxn = 2e2+5;const int INF = 0x3f3f3f3f;int Map[maxn][maxn];int N,M,S,D;inline void Init()&#123; int x,y,z; memset(Map,INF,sizeof(Map)); for(int i=0;i&lt;N;++i)&#123; Map[i][i]=0; &#125; while(M--)&#123; scanf(\"%d%d%d\",&amp;x,&amp;y,&amp;z); Map[x][y]=Map[y][x]=min(Map[x][y],z); &#125; scanf(\"%d%d\",&amp;S,&amp;D);&#125;inline void Floyd()&#123; for(int k=0;k&lt;N;++k)&#123; for(int i=0;i&lt;N;++i)&#123; for(int j=0;j&lt;N;++j)&#123; Map[i][j]=min(Map[i][j],Map[i][k]+Map[k][j]); &#125; &#125; &#125; Map[S][D]==INF?printf(\"-1\\n\"):printf(\"%d\\n\",Map[S][D]);&#125;int main()&#123; while(~scanf(\"%d%d\",&amp;N,&amp;M))&#123; Init(); Floyd(); &#125; return 0;&#125; 后记自从退acm，很多东西都在遗忘…","tags":[{"name":"ACM","slug":"ACM","permalink":"http://tomotoes.com/blog/tags/ACM/"},{"name":"数据结构","slug":"数据结构","permalink":"http://tomotoes.com/blog/tags/数据结构/"}]}]